% \iffalse                                                 -*- mode: LaTeX -*-
%
% fixme.dtx --- Doc file for the FiXme package (code and documentation)
%
% Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006 Didier Verna.
% Copyright (C) 2007, 2009 Didier Verna.
%
% Author:        Didier Verna <didier@lrde.epita.fr>
% Maintainer:    Didier Verna <didier@lrde.epita.fr>
% Created:       Thu Dec 10 16:04:01 1998
% Last Revision: Thu Jul 16 19:55:00 2009
%
% This file is part of FiXme.
%
% FiXme may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.1
% of this license or (at your option) any later version.
% The latest version of this license is in
% http://www.latex-project.org/lppl.txt
% and version 1.1 or later is part of all distributions of LaTeX
% version 1999/06/01 or later.
%
% FiXme consists of the files listed in the file `README'.
%
%
% Commentary:
%
% Contents management by FCM version 0.1.
%
%
% Code:
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\usepackage{xspace}
\usepackage{docx}
% \OnlyDescription
\CodelineIndex
% \RecordChanges
\begin{document}
\DocInput{fixme.dtx}
\end{document}
%</driver>
%
% \fi
%
% \catcode`\¡=14
% ^^A\CheckSum{880}
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%
% \MakeShortVerb{\|}
%
% \makeatletter
% \renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}{%
%     -3.25ex\@plus -1ex \@minus -.2ex}{%
%     1.5ex \@plus .2ex}{%
%     \normalfont\normalsize\bfseries}}
% \makeatother
% \newcommand\subsubsubsection[1]{\paragraph{#1:}}
%
% \newcommand\komascript{\textsc{Koma}-Script\xspace}
% \newcommand\auctex{AUC-\TeX\xspace}
%
% \newcommand\version{4.0}
% \newcommand\releasedate{2009/08/26}
% \newcommand\packagecopyright{%
%   Copyright \copyright{} 1998--2002, 2004--2007, 2009 Didier Verna}
% \newcommand\fixme{\textsf{FiXme}\xspace}
%
% \date\today
% \title{\fixme{} -- a \LaTeXe{} package for inserting fixme notes
%   in your documents\thanks{This document describes \fixme \version,
%     release date \releasedate.}}
% \author{Didier Verna\\
%   \texttt{mailto:didier@lrde.epita.fr}\\
%   \texttt{http://www.lrde.epita.fr/\~{}didier/}}
% \maketitle
%
%
% \begin{abstract}
%   In the process of writing a long document, it is a common practice to
%   leave some parts unwritten or uncomplete, and come back to them later. In
%   such cases, you probably want to stick clues about which parts need to be
%   ``fixed'', where they are located, and what needs to be done. This is what
%   I call ``fixme notes''. The purpose of this package is to provide you with
%   convenient ways to insert \fixme notes in your documents.\par
%   The \fixme package is \packagecopyright{}, and distributed under the
%   terms of the LPPL license.
% \end{abstract}
%
% \tableofcontents
%
% \section{Description}
% With \fixme, you can insert different kinds of notes in your documents,
% ranging from simple not-so-important notices to critical stuff that must
% absolutely be fixed in the final version.\par
% \fixme gives you full control on the layout of these notes: they can be
% displayed inline (directly in the text), as marginal paragraphs (the
% default), as footnotes and even as index entries. All these possibilities
% can be mixed together. Additionally, you can summarize all \fixme notes in
% a ``list of fixme's''.\par
% \fixme notes are also recorded in the log file, and (depending on their
% importance level) some of them are displayed on the terminal during
% compilation. A final summary is also created at the end of the compilation
% process.\par
% All these features are actually available when you're working in
% \texttt{draft} mode. In \texttt{final} mode, the behavior is slightly
% different: any remaining critical note generates an error (the compilation
% aborts), while non critical ones are just removed from the document's body
% (they're still recorded in the log file though).
%
%
% \section{Using \fixme}
% \subsection{Requirements}
% In order to work properly, \fixme requires the presence of some \LaTeX{}
% packages. You don't have to load them explicitly though. As long as
% \LaTeX{} can locate them, they will be used automatically. \fixme currently
% depends on \texttt{xspace}, \texttt{ifthen}, \texttt{verbatim} and
% \texttt{xkeyval} no older than release date 2006/11/18.
%
% \subsection{Loading the package}
% In order to load \fixme, simply say |\usepackage[|\meta{options}|]{fixme}|
% in the preamble of your document. There is an important number of options
% that you can use in order to customize \fixme's default behavior. These
% options will be discussed when appropriate.\\
% \DescribeMacro{\fxsetup}\marg{options}\\
% Another way of customizing \fixme's default behavior is to use the
% \cs{fxsetup} command. \cs{fxsetup} understands the same options as the
% package itself and can be used in the preamble as well as in the document's
% body.
%
% Finally, note that unless specified otherwise, all package options are also
% understood by the note insertion commands or environments. The effect is
% then local to that particular command.
%
% \subsection{Inserting \fixme notes}
% \subsubsection{Macros}
% \DescribeMacro{\fxnote}
% \DescribeMacro{\fxwarning}
% \DescribeMacro{\fxerror}
% \DescribeMacro{\fxfatal}\oarg{options}\marg{note}\\
% \fixme provides four note insertion commands corresponding to different
% levels of importance (notes, warnings, errors and fatal errors).
% \cs{fxfatal} is a bit different from the other ones, as will be explained in
% section \ref{sec:manual:behavior} on page \pageref{sec:manual:behavior}.
%
% \subsubsection{Environments}
% \DescribeEnv{anfxnote}
% \DescribeEnv{anfxwarning}
% \DescribeEnv{anfxerror}
% \DescribeEnv{anfxfatal}\oarg{options}\marg{summary}\\
% While \fixme notes are usually meant to be short, there might be times when
% a longer comment is appropriate. As of version 3.0, \fixme provides four
% environments for inserting such longer notes\footnote{\textbf{Warning: as of
% version 4.0, the environments interface has changed and is \emph{not}
% backward-compatible.}}.
%
% \fixme environments take one mandatory argument (meant to be a short summary
% of the long note) and behave in exactly the same way as their macro
% counterpart. The layout policy is a bit different though (see section
% \ref{sec:manual:layout} on page \pageref{sec:manual:layout}): the long note
% (the environment's contents) will always appear inline, and the
% \meta{summary} will obey all active layout forms except for the inline one.
%
% \subsection{Controlling the behavior of \fixme\label{sec:manual:behavior}}
% \DescribeOption{final}
% \DescribeOption{draft}
% The behavior of \fixme is controlled by the two standard options
% \texttt{final} and \texttt{draft}. These options are usually given to
% \cs{documentclass} which in turn passes them to all packages. In addition,
% you can also use them as an option to \cs{usepackage}, in the call to
% \cs{fxsetup}, and even to the note insertion commands and environments.
%
% In \texttt{draft} mode, \fixme notes are recorded in the log file and appear
% in the document as specified by the layout settings (see section
% \ref{sec:manual:layout}). Additionally, warnings, errors and fatal errors
% are also displayed on the terminal.
%
% In final mode, non fatal notes (those generated by \cs{fxnote},
% \cs{fxwarning}, \cs{fxerror} and their corresponding environments) are still
% logged, but they're not typeset. On the other hand, fatal notes (those
% generated by the \cs{fxfatal} command and the \texttt{anfxfatal}
% environment) will throw a \LaTeX{} error and thus interrupt or abort
% compilation with an informative message. This will help you track down
% forgotten important caveats in your document.
%
% Let me rephrase: final documents can only have notes, warnings, and (non
% fatal) errors left. Of course, this is not completely true: remember that
% these options are understood locally by all the note insertion commands and
% environments, so even in \texttt{final} mode, you can use something like
% this:
% \begin{verbatim}
% \fxfatal[draft]{bla bla}
% \end{verbatim}
%
% By default, \fixme is in \texttt{final} mode (\LaTeX{} itself behaves that
% way).
%
% \subsection{Controlling the layout of \fixme notes\label{sec:manual:layout}}
% \fixme notes can appear in several forms in your document. Each of these
% forms can be individually selected, or they can be combined together. This
% section describes the available layout forms and their possible combination.
%
% \subsubsection{Available layout forms}
% The layout forms currently supported are: inline (directly in the text),
% marginal notes (the default), footnotes, index entries and (as of version
% 3.2) marginal clues.\footnote{\fixme notes also appear in a ``list of
%   fixmes'', see section \ref{sec:manual:listoffixmes} on page
%   \pageref{sec:manual:listoffixmes}.} While most of these layout forms
% should be self-explanatory, the marginal clues deserve a bit more
% explanation.
%
% \subsubsubsection{Marginal Clues}
% If your preferred layout form is inline or say, footnote, it might be
% somewhat difficult to localize the \fixme note on the page, especially its
% vertical position. That's where marginal clues come into play. A marginal
% clue does not display the \fixme note's contents, but only an indication
% that there is such a note at that (vertical) position. So you have to use
% another layout form (again, typically inline or footnote) in order to get
% the actual note's contents.
%
% Obviously, the margin and margin clue forms are mutually exclusive, so if
% you try to activate both, only the most recently activated one will be
% enabled (and you'll get a notice in the log file and on the terminal).
%
% \subsubsection{Individual control}
% \DescribeOption{inline}
% \DescribeOption{margin}
% \DescribeOption{marginclue}
% \DescribeOption{footnote}
% \DescribeOption{index}
% For each layout form, there is a corresponding boolean option. These options
% are understood by the package itself, the \cs{fxsetup} command and also
% locally by every note insertion command or environment.
%
% To activate a layout form, use the option directly or give it a value of
% \texttt{true}. For instance, these two forms are equivalent:
% \begin{verbatim}
% \fxnote[margin]{note...}
% \fxnote[margin=true]{note...}
% \end{verbatim}
%
% \DescribeOption{noinline}
% \DescribeOption{nomargin}
% \DescribeOption{nomarginclue}
% \DescribeOption{nofootnote}
% \DescribeOption{noindex}
% For convenience, each layout option has a counterpart that deactivates the
% corresponding layout form. The counterpart option has the same name,
% prefixed with \texttt{no}. Again, these options are understood by the
% package itself, the \cs{fxsetup} command and also locally by every note
% insertion command or environment. For instance, these two forms are
% equivalent:
% \begin{verbatim}
% \fxsetup{margin=false}
% \fxsetup{nomargin}
% \end{verbatim}
%
% \subsubsection{Global control}
% \DescribeOption{layout}
% \DescribeOption{morelayout}
% As of version 4.0, an even more convenient way to specify the required
% layout is to use the \texttt{layout} and \texttt{morelayout} options. In
% fact, the use of individual control is considered more or less deprecated.
% Both of these options take a comma-separated list of the individual options
% described above (this includes the \texttt{no}\meta{option} form as well).
%
% While the \texttt{morelayout} options \emph{adds} to the existing layout
% configuration, the \texttt{layout} one completely overrides it. For
% instance, knowing that by default, only the \texttt{margin} layout form is
% active, the following forms are all equivalent:
% \begin{verbatim}
% \usepackage[nomargin,inline,index]{fixme}
% \usepackage[margin=false,inline=true,index=true]{fixme}
% \usepackage[morelayout={nomargin,inline,index}]{fixme}
% \usepackage[layout={inline,index}]{fixme}
% \end{verbatim}
%
% Again, these two options are understood by the package itself, the
% \cs{fxsetup} command and also locally by every note insertion command or
% environment.
%
% \subsubsection{Inner layout}
% There might be various reasons for you to change the layout locally for one
% particular note. As of version 4.0, one frequent reason (described below)
% can be handled automatically by \fixme.
%
% Remember that the default layout is to use margin paragraphs. One drawback
% is that you can't insert \fixme notes in a figure (or its caption for
% instance) because floats can't be nested in \LaTeX, and margin paragraphs
% are floats. If you try to do so, you will get a cryptic ``Not in outer par
% mode'' error message.
%
% \DescribeOption{innerlayout}
% Fortunately, this situation can be detected automatically. As of version
% 4.0, \fixme provides an option named \texttt{innerlayout} that allows you
% to specify an alternate layout setting to use when \TeX{} is in \emph{inner}
% mode. In addition to that, \fixme automatically disables the \texttt{margin}
% and \texttt{marginclue} forms.
%
% Using \texttt{innerlayout} is not as trivial as it may seem: it
% \emph{really} is an alternate layout configuration, and as such, you can use
% any combination you like of individual options, or you can even use the
% \texttt{layout} and \texttt{morelayout} options. This means that your
% alternate layout can either \emph{add} to the existing one, or
% \emph{override} it.
%
% By default, the \fixme inner layout is set to just \texttt{inline}. This can
% be simulated by the following call:
% \begin{verbatim}
% \usepackage[layout=margin,innerlayout={layout=inline}]{fixme}
% \end{verbatim}
% Try to understand why the following gives a different result:
% \begin{verbatim}
% \usepackage[layout=margin,innerlayout=inline]{fixme}
% \end{verbatim}
%
% \subsubsection{Class compatibility}
% By default, \fixme is set to use marginal notes. You should know that this
% is known to cause problems with at least the ACM SIG classes:
% \texttt{acm\_proc\_article-sp} and \texttt{sig-alternate}. These classes
% forbid the use of \cs{marginpar}, so if you use them, you should choose
% another layout for \fixme, and also avoid using marginal clues\ldots
%
% \subsection{Controlling the notes logging}
% \DescribeOption{silent}
% \DescribeOption{nosilent}
% As well as being displayed in the document itself, all \fixme notes are
% ``logged'' in different ways: by default, simple notes are recorded in the
% log file while the others are also displayed on the terminal output.\par
% You have the ability to suppress all kind of logging by using the
% \texttt{silent} option. By default, the behavior is that of
% \texttt{nosilent}.
%
% \subsection{List of \fixme's}
% \DescribeMacro{\listoffixmes}
% \fixme remembers where you put \fixme notes in a toc-like file whose
% extension is \texttt{lox}. The \cs{listoffixmes} macro generates the list of
% all \fixme notes in a manner similar to that of the ``list of figures''
% for instance. A standard layout is automatically used for the `article',
% `report', `book' classes and their \komascript replacements. If another
% class is used, the `article' layout is selected. Also, note that if no
% \fixme note remain in the document, this macro doesn't generate an empty
% list, but rather stays silent. It also stays silent in \texttt{final} mode,
% regardless of the presence of remaining notes.
%
%
% \section{Customizing \fixme}
% \subsection{Customizing the notes layout}
% \subsubsection{Macros}
% The \texttt{inline}, \texttt{margin} and \texttt{footnote} layouts have two
% parts: a ``prefix'' which depends on the note level, and the note
% itself. The prefix is one of ``\fixme note:'', ``\fixme warning:'',
% ``\fixme error:''  or simply ``\fixme:'', and appears in bold. The note
% itself appears emphasized.
% \DescribeMacro{\FXInline}
% \DescribeMacro{\FXMargin}
% \DescribeMacro{\FXFootnote}
% These layouts are implemented thanks to the corresponding \cs{FX*} macros
% that you can redefine if you wish. Each such macro takes two mandatory
% arguments: the prefix and the note, in that order.\par
% \DescribeMacro{\FXMarginCLue}
% The special \texttt{marginclue} layout only outputs the prefix mentioned
% above. Its layout is controlled by the macro \cs{FXMarginClue} which takes
% the prefix as its only mandatory argument.
% \DescribeMacro{\FXIndex}
% The \cs{FXIndex} macro is used for the \texttt{index} layout. All \fixme
% index entries appear under the ``\fixme'' key in the symbols section.
% There are 4 subcategories under this key, as many as there are note levels.
% By default, only the first 3 of them are used though (fatal errors do not
% appear under a subkey, but directly under the \fixme key). The notes are
% numbered in the index.\par
%
% \subsubsection{Environments}
% \DescribeMacro{\FXEnvBegin}
% \DescribeMacro{\FXEnvEnd}
% The optional argument of \fixme environments is always typeset according
% to the \texttt{inline} layout described above. By default, \fixme uses a
% \texttt{quotation} for displaying the environments'contents. If you want to
% change that, you can redefine the macros \cs{FXEnvBegin} and \cs{FXEnvEnd}
% that open and close the environments.
%
% \subsection{Customizing the notes logging}
% \DescribeMacro{\FXNote}
% \DescribeMacro{\FXWarning}
% \DescribeMacro{\FXError}
% \DescribeMacro{\FXFatal}
% If you want a finer control on logging, you can redefine the commands used
% to implement it. These commands (on the left) are the ones used by
% \cs{fxnote}, \cs{fxwarning}, \cs{fxerror} and \cs{fixme} respectively. They
% take the note itself as mandatory argument.
%
% \subsection{Fancy fruit salad layout}
% \DescribeOption{user}
% \DescribeMacro{\FXUser}
% If, for some totally unjustified reason, you are not happy with the
% available layouts, you have the ability to define your own: pass the
% \texttt{user} option to the package (it also has its \texttt{nouser}
% counterpart), and define an \cs{FXUser} macro in the following manner:\\
% |\newcommand{\FXUser}[2]{|\meta{fancy fruit salad layout job}|}|\\ The
% arguments are the prefix, and the note itself, in that order.\par
% Note that the \texttt{user} option can also be used in the optional argument
% of the note insertion commands.
%
% \subsection{Internationalization}
% \DescribeOption{english}
% \DescribeOption{french}
% \DescribeOption{francais}
% \DescribeOption{spanish}
% \DescribeOption{italian}
% \DescribeOption{german}
% \DescribeOption{ngerman}
% \DescribeOption{danish}
% \DescribeOption{croatian}
% \fixme currently supports English, French, Spanish, Italian, German,
% Danish and Croatian. You can select the language you want to use by passing
% the corresponding option (these options are usually given directly to
% \cs{documentclass} which in turn passes them to all packages). The
% \texttt{french} and \texttt{francais} options are synonyms. The
% \texttt{german} and \texttt{ngerman} options are currently equivalent.\par
% If you want a finer grain on the language-dependent parts of \fixme, the
% following macros are provided and can be redefined.\par
% \DescribeMacro{\fixmenoteprefix}
% \DescribeMacro{\fixmewarningprefix}
% \DescribeMacro{\fixmeerrorprefix}
% \DescribeMacro{\fixmefatalprefix}
% \DescribeMacro{\fixmelogo}
% The \cs{fixme*prefix} macros define the prefix for the four different note
% levels. They make intensive use of the macro \cs{fixmelogo} ;-)\par
% \DescribeMacro{\fixmeindexname}
% \DescribeMacro{\fixmenoteindexname}
% \DescribeMacro{\fixmewarningindexname}
% \DescribeMacro{\fixmeerrorindexname}
% \DescribeMacro{\fixmefatalindexname}
% The macro \cs{fixmeindexname} defines the main \fixme index key. The other
% ones define the different index subkeys for each note level. Please note that
% an empty name for a subkey means that you don't actually want a subcategory
% (that's the case by default for fatal errors). The corresponding notes will
% then appear directly under the main \fixme key. For that reason, a non
% empty subkey must end with an exclamation mark.\par
% \DescribeMacro{\listfixmename}
% \cs{listfixmename} defines the title for the ``list of fixmes'' section.
%
% \section{\auctex support}
% \auctex is a powerful major mode for editing \TeX{} documents in
% \textsf{Emacs} or \textsf{XEmacs}. In particular, it provides automatic
% completion of macro names once they are known. \fixme supports \auctex
% by providing a style file named \texttt{fixme.el} which contains \auctex
% definitions for the relevant macros. This file should be installed in a
% place where \auctex can find it (usually in a subdirectory of your
% \LaTeX{} styles directory). Please refer to the \auctex documentation for
% more information on this.
%
% \section{History}
% \begin{itemize}
% \item[v4.0] New feature: floating notes (not specific to any portion of
%   text), suggested by Rasmus Villemoes.\\
%   New feature: alternate layout autoswitch for inner mode, suggested by Will
%   Robertson.\\
%   New feature: key/value argument syntax in the whole user interface.\\
%   New command: \cs{fxsetup}.\\
%   Homogenize the log and console messages.\\
%   Heavy internals refactoring.
% \item[v3.4] \cs{fixme}, \cs{fxerror}, \cs{fxwarning} and \cs{fxnote} are now
%   robust, thanks to Will Robertson.\\
%   Fix incompatibility with \komascript classes version of \cs{@starttoc}
%   when the lox file is inexistent, reported by Philipp Stephani.
% \item[v3.3] Document incompatibility between marginal layout and the ACM
%   SIG classes, reported by Jochen Wuttke.\\
%   Honor \texttt{twoside} option in marginal layout, suggested by Jens
%   Remus.\\
%   Support for \komascript classes version 2006/07/30 v2.95b, suggested by
%   Jens Remus.\\
%   Documentation improvements suggested by Brian van den Broek.\\
%   Fix incompatibility with \texttt{amsart} reported by Lars Madsen:
%   \cs{@starttoc} takes two arguments.\\
%   Fix bug reported by Stefan Mann: a typo in the \cs{fixme@footnotetrue}
%   macro name.
% \item[v3.2] Added the marginclue layout option which only signals a fixme in
%   the margin, withtout the actual contents.\\
%   Support for Croatian thanks to Marcel Maretic |<marcel@fsb.hr>|.\\
%   Fix incompatibility with \texttt{amsbook} reported by Claude
%   Lacoursi\`ere: \cs{@starttoc} takes two arguments.\\
%   Fix incompatibility with Beamer reported by Akim Demaille: protect
%   contents of lox file.
% \item[v3.1] Fix bug reported by Arnold Beckmann: the environments were
%   visible in final mode.
% \item[v3.0] Added environments corresponding to the note insertion
%   commands.\\
%   Added an optional first argument to the note insertion commands
%   to change the layout locally.\\
%   Fix bug reported by Akim Demaille: marginal notes could mess up the
%   document's layout by flushing it right.
% \item[v2.2] New option \texttt{silent} to suppress notes logging.\\
%   Support for Danish thanks to Kim Rud Bille |<krbi01@control.auc.dk>|.
% \item[v2.1] Use \cs{nobreakspace} instead of the tilda character. This avoids
%   conflicts with Babel in Spanish environments.\\
%   Fix bug reported by Knut Lickert: index entries were unconditionally built.
% \item[v2.0] New feature: note levels.\\
%   New feature: \fixme note counters and usage summary.\\
%   Suggestions from Kasper B. Graversen |<kbg@dkik.dk>|.\\
%   Support for Spanish thanks to Agust\'in Mart\'in |<agusmba@terra.es>|
% \item[v1.5] New appearance option: \texttt{inline}.
% \item[v1.4] Support for the \komascript classes.\\
%   Fix bug reported by Ulf Jaenicke-Roessler: the \cs{listoffixmes} command
%   didn't work when called before the first \fixme note.
% \item[v1.3] Support for Italian thanks to Riccardo Murri
%   |<murri@phc.unipi.it>|.
% \item[v1.2] Support for German thanks to Harald Harders
%   |<h.harders@tu-bs.de>|.
% \end{itemize}
%
% \StopEventually{\par Well, I think that's it. Enjoy using \fixme!
%   \vfill\hfill\small \packagecopyright{}.}
%
% \section{Implementation}
% \subsection{Preamble}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{fixme}[2009/08/26 v4.0
                        Insert fixme notes in your documents]

%    \end{macrocode}
% Some required packages:
%    \begin{macrocode}
\RequirePackage{ifthen}
\RequirePackage{verbatim}
\RequirePackage{xkeyval}[2006/11/18]

%    \end{macrocode}
% \begin{macro}{\fixmelogo}
%   The \fixme logo:
%    \begin{macrocode}
\newcommand*\fixmelogo{\textsf{FiXme}}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Utilities}
% \begin{macro}{\@fxcsstring}
%   \marg{name}\\
%   Stringify a control sequence name:
%    \begin{macrocode}
\newcommand\@fxcsstring[1]{\expandafter\string\csname#1\endcsname}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxpkginfo}
%   \begin{macro}{\@fxpkgwarning}
%     \marg{msg}\\
%     Issue a \fixme package info or warning:
%    \begin{macrocode}
\newcommand\@fxpkginfo{\PackageInfo{FiXme}}
\newcommand\@fxpkgwarning{\PackageWarning{FiXme}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxpkgerror}
%   \marg{shortmsg}\marg{longmsg}\\
%   Issue a \fixme package error:
%    \begin{macrocode}
\newcommand\@fxpkgerror{\PackageError{FiXme}}

%    \end{macrocode}
% \end{macro}
% \subsubsection{\texttt{xkeyval} related}
% \begin{macro}{\@fxdefinekey}
%   \marg{family}\marg{key}\oarg{default}\marg{function}
%    \begin{macrocode}
\newcommand\@fxdefinekey{\define@key[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxsetkeys}
%   \marg{families}\oarg{na}\marg{keys}
%    \begin{macrocode}
\newcommand\@fxsetkeys{\setkeys[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxpresetkeys}
%   \marg{families}\marg{head keys}\marg{tail keys}
%    \begin{macrocode}
\newcommand\@fxpresetkeys{\presetkeys[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdeclarelegacyopt}
%   \marg{name}\\
%   A ``legacy option'' is a package option that is not used anymore.
%    \begin{macrocode}
\newcommand\@fxdeclarelegacyopt[1]{%
  \DeclareOptionX[fx]<legacy>{#1}{%
    \@fxpkgwarning{%
      '#1' is a legacy option that has no effect anymore}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdeclarelegacyboolopt}
%   \marg{name}\\
%   A ``legacy boolean option'' is a legacy option \texttt{opt} and its
%   \texttt{noopt} counterpart. Note that we don't really (need to) ensure the
%   boolean status of these options anymore.
%    \begin{macrocode}
\newcommand\@fxdeclarelegacyboolopt[1]{%
  \@fxdeclarelegacyopt{#1}
  \@fxdeclarelegacyopt{no#1}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxvoidkeyerror}
%   \marg{key}\marg{value}\\
%   Issue a \fixme error about a void key misuse (see below):
%    \begin{macrocode}
\newcommand\@fxvoidkeyerror[2]{%
  \@fxpkgerror{misuse of key '#1'}{%
    You have given the key '#1' the argument '#2' but it takes
    none.\MessageBreak
    Type X to quit, fix that key and re-run LaTeX.\MessageBreak}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefinevoidkey}
%   \marg{family}\marg{name}\marg{func}\\
%   A \fixme ``void key'' is an \texttt{xkeyval} key that doesn't expect any
%   argument.
%    \begin{macrocode}
\newcommand\@fxdefinevoidkey[3]{%
  \define@key[fx]{#1}{#2}[]{%
    \ifthenelse{\equal{##1}{}}{%
      #3}{%
      \@fxvoidkeyerror{#2}{##1}}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefineboolkey}
%   \oarg{func}\marg{family}\marg{name}\\
%   A \fixme ``boolean key'' is like an \texttt{xkeyval} one, with the
%   addition that for every such \texttt{key}, there is a \texttt{nokey} void
%   key counterpart.
%    \begin{macrocode}
\newcommand\@fxdefineboolkey[3][]{%
  \define@boolkey[fx]{#2}{#3}[true]{#1}
  \@fxdefinevoidkey{#2}{no#3}{\@nameuse{fx@#2@#3}{false}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdeclarecmdkey}
%   \marg{family}\oarg{mp}\marg{key}\oarg{default}\marg{function}\\
%    \begin{macrocode}
\newcommand\@fxdefinecmdkey{\define@cmdkey[fx]}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Backward compatibility related}
% \subsubsubsection{Legacy commands}
% \begin{macro}{\@fxlegacycmdwarning}
%   \marg{name}\\
%   Issue a \fixme warning about a legacy command (see below):
%    \begin{macrocode}
\newcommand\@fxlegacycmdwarning[1]{%
  \@fxpkgwarning{%
    \@fxcsstring{#1} is a legacy command that is not used anymore}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxnewlegacycmd}
%   \marg{name}\\
%   A ``legacy command'' is an old command taking one argument and that has no
%   effect anymore. Note: currently unused.
%    \begin{macrocode}
%% \newcommand\@fxnewlegacycmd[1]{%
%%   \expandafter\newcommand\csname#1\endcsname[1]{\@fxlegacycmdwarning{#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxnewlegacyrcmd}
%   \marg{name}\\
%   A ``legacy renewable command'' is a legacy command that might be
%   renew'ed by the user instead of being used directly. Here is what we do:
%   \begin{enumerate}
%   \item \cs{newcommand} it and \cs{let} it be \cs{empty},
%   \item \cs{AtBeginDocument}, check if it has been redefined (that is, if
%     it is not \cs{empty} anymore),
%   \item and if so, issue a legacy command warning.
%   \end{enumerate}
%    \begin{macrocode}
\newcommand\@fxnewlegacyrcmd[1]{%
  \expandafter\newcommand\csname#1\endcsname{}
  \expandafter\let\csname#1\endcsname\empty
  \AtBeginDocument{%
    \expandafter\ifx\csname#1\endcsname\empty\else%
      \@fxlegacycmdwarning{#1}
    \fi}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsubsection{Deprecated commands}
% \begin{macro}{\@fxdeprecatedcmdwarning}
%   \marg{old}\marg{new}\\
%   Issue a \fixme warning about a deprecated command (see below):
%    \begin{macrocode}
\newcommand\@fxdeprecatedcmdwarning[2]{%
  \@fxpkgwarning{%
    \@fxcsstring{#1} is deprecated; please use \@fxcsstring{#2} instead}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxnewdeprecatedcmd}
%   \marg{old}\marg{new}\\
%   A ``deprecated command'' is a user-level command that has been deprecated
%   in favor of a new one. Users might call these commands, but are not
%   supposed to redefine them. Hence, their definition is just a call to the
%   new version.
%    \begin{macrocode}
\newcommand\@fxnewdeprecatedcmd[2]{%
  \@namedef{#1}{%
    \@fxdeprecatedcmdwarning{#1}{#2}%
    \@nameuse{#2}}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxprefixdeprecatecmd}
%   \oarg{prefix}\marg{name}\\
%   Since version 4 of \fixme comes with a lot of \texttt{fixme} to
%   \texttt{fx} prefix changes, we have a special macro to do this for
%   deprecated commands:
%    \begin{macrocode}
\newcommand\@fxprefixdeprecatecmd[2][]{%
  \@fxnewdeprecatedcmd{#1fixme#2}{#1fx#2}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdeprecatedenvwarning}
%   \marg{old}\marg{new}\\
%   Issue a \fixme warning about a deprecated environment (see below):
%    \begin{macrocode}
\newcommand\@fxdeprecatedenvwarning[2]{%
  \@fxpkgwarning{%
    the '#1' environment is deprecated;\MessageBreak
    please use '#2' instead}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxnewdeprecatedenv}
%   \marg{old}\marg{new}\\
%   A ``deprecated environment'' is defined similarly to a deprecated command.
%    \begin{macrocode}
\newcommand\@fxnewdeprecatedenv[2]{%
  \@namedef{#1}{%
    \@fxdeprecatedenvwarning{#1}{#2}%
    \@nameuse{#2}}
  \@namedef{end#1}{\@nameuse{end#2}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxnewdeprecatedrcmd}
%   \marg{old}\marg{new}\\
%   A ``deprecated renewable command'' is a deprecated command that is
%   likely to be renew'ed by the user. There are several possibilities to
%   implement this. One is to maintain the use of the older version in the
%   core of \fixme, and make it just call the new one by default. That way,
%   if the user redefines the older one, it will work out of the box. However,
%   I prefer that the core of \fixme always use the newest API if possible,
%   so the chosen solution is as follows:
%   \begin{enumerate}
%   \item \cs{newcommand} the old one and \cs{let} it be \cs{empty},
%   \item \cs{AtBeginDocument}, check if the old command has been redefined
%     (that is, if it is not \cs{empty} anymore),
%   \item and if so, issue a deprecation warning and redefine the new one to
%     call the old one.
%   \end{enumerate}
%   Note that we don't need to know the macro's prototype, because
%   \cs{renewcommand} asks for it all over again.
%    \begin{macrocode}
\newcommand\@fxnewdeprecatedrcmd[2]{%
  \expandafter\newcommand\csname#1\endcsname{}
  \expandafter\let\csname#1\endcsname\empty
  \AtBeginDocument{%
    \expandafter\ifx\csname#1\endcsname\empty\else%
      \@fxdeprecatedcmdwarning{#1}{#2}%
      \@namedef{#2}{\@nameuse{#1}}
    \fi}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxprefixdeprecatercmd}
%   \oarg{prefix}\marg{name}\\
%   Since version 4 of \fixme comes with a lot of \texttt{fixme} to
%   \texttt{fx} prefix changes, we have a special macro to do this for
%   deprecated renewable commands:
%    \begin{macrocode}
\newcommand\@fxprefixdeprecatercmd[2][]{%
  \@fxnewdeprecatedrcmd{#1fixme#2}{#1fx#2}}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Preliminary stuff}
% \begin{option}{area}
%   A \fixme note's ``area'' may replace the page number in the list of
%   fixmes or in the index (see sections \ref{sec:code:contentsline} and
%   \ref{sec:code:layoutmacros}).
%    \begin{macrocode}
\@fxdefinecmdkey{lox}{area}{}
%    \end{macrocode}
% \end{option}
%
% \subsection{List macros}
% \subsubsection{Contents lines\label{sec:code:contentsline}}
% \begin{macro}{\l@fixme}
%   We use the same layout as for the list of figures.
%    \begin{macrocode}
\let\l@fixme\l@figure
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdottedtocline}
%   \marg{tocdepth}\marg{indent}\marg{numwidth}\marg{contents}\marg{location}\\
%   This macro is copied almost verbatim from \LaTeX's core. The intent is
%   to do a similar layout, but replacing the last argument, normally a page
%   number, by arbitrary text. The original macro defines a restricted width
%   to typeset the page number which is much too short for us, so we just let
%   the \meta{location} text take all the space it needs.
%    \begin{macrocode}
\def\@fxdottedtocline#1#2#3#4#5{%
  \ifnum #1>\c@tocdepth \else
    \vskip \z@ \@plus.2\p@
    {\leftskip #2\relax \rightskip \@tocrmarg \parfillskip -\rightskip
     \parindent #2\relax\@afterindenttrue
     \interlinepenalty\@M
     \leavevmode
     \@tempdima #3\relax
     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
     {#4}\nobreak
     \leaders\hbox{$\m@th
        \mkern \@dotsep mu\hbox{.}\mkern \@dotsep
        mu$}\hfill
     \nobreak
     #5\par}%
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fxcontentsline}
%   \marg{contents}\marg{area}\\
%   Similar to \LaTeX's \cs{contentsline} macro, but temporarily bind
%   \cs{@dottedtocline} to our own version. The nice thing about this
%   implementation is that we can still use \cs{l@fixme} (remember that it is
%   bound to \cs{l@figure}) without exactly knowing what its definition is.
%   Note that this macro is at the user level because \cs{contentsline} is,
%   but it is not currently documented in the user manual.
%    \begin{macrocode}
\newcommand\fxcontentsline[2]{%
  \begingroup%
  \let\@dottedtocline\@fxdottedtocline%
  \l@fixme{#1}{#2}%
  \endgroup}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fxaddcontentsline}
%   \marg{contents}\\
%   Wrapper around \LaTeX's \cs{addcontentsline} macro to handle the
%   \texttt{area} option. If a specific area is provided, we can't use the
%   normal \cs{addcontentsline} macro for reasons explained above, so we use
%   our own version of \cs{contentsline} instead. Note that this macro is at
%   the user level because \cs{addcontentsline} is, but it is not currently
%   documented in the user manual.
%    \begin{macrocode}
\newcommand\fxaddcontentsline[1]{%
  \ifthenelse{\equal{\cmdfx@lox@area}{thepage}}{%
    \addcontentsline{lox}{fixme}{#1}}{%
    \addtocontents{lox}{\protect\fxcontentsline{#1}{\cmdfx@lox@area}}}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{List title}
% \begin{macro}{\listfixmename}
%   In order to redefine the list title, users have to call \cs{renewcommand}.
%   I don't like this much: it would be cleaner to provide a real command
%   that redefines the title internally. However, I'll stick with the
%   current scheme because it is consistent with the rest of \LaTeX's lists.
%    \begin{macrocode}
\newcommand*\listfixmename{}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{List headers}
% Lists are output in a document class dependant fashion. Classes
% currently recognized are \texttt{article}, \texttt{report},
% \texttt{book} and their \komascript replacements.
% \subsubsubsection{\texttt{article} version}
% \begin{macro}{\@lox@prtc@article}
%   \begin{macro}{\@lox@psttc@article}
%     \mbox{}
%    \begin{macrocode}
\def\@lox@prtc@article{%
  \section*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}}
\def\@lox@psttc@article{}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{report} version}
% \begin{macro}{\@lox@prtc@report}
%   \begin{macro}{\@lox@psttc@report}
%     \mbox{}
%    \begin{macrocode}
\def\@lox@prtc@report{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}%
  }
\def\@lox@psttc@report{\if@restonecol\twocolumn\fi}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{book} version}
% \begin{macro}{\@lox@prtc@book}
%   \begin{macro}{\@lox@psttc@book}
%     \mbox{}
%    \begin{macrocode}
\def\@lox@prtc@book{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}%
  }
\def\@lox@psttc@book{\if@restonecol\twocolumn\fi}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
%
% The code below (version 3.3) mimics \komascript version 2006/07/30 v2.95b.
% Older versions (using chapter*) are no longer supported because it is
% simpler that way, but if some people complain, I'll  have to conditionalize
% on the \komascript version, which would be a \textsc{pita}.
% \begin{macro}{\lox@heading}
%   \mbox{}
%    \begin{macrocode}
\newcommand*\lox@heading{\float@listhead{\listfixmename}}

%    \end{macrocode}
%  \end{macro}
%  \subsubsubsection{\texttt{scrartcl} version}
%  \begin{macro}{\@lox@prtc@scrartcl}
%    \begin{macro}{\@lox@psttc@scrartcl}
%      \mbox{}
%    \begin{macrocode}
\def\@lox@prtc@scrartcl{%
  \begingroup%
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative
  }
\def\@lox@psttc@scrartcl{%
  \endgroup
  }

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{scrreprt} version}
% \begin{macro}{\@lox@prtc@scrreprt}
%   \begin{macro}{\@lox@psttc@scrreprt}
%     \mbox{}
%    \begin{macrocode}
\def\@lox@prtc@scrreprt{%
  \begingroup%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative
  }
\def\@lox@psttc@scrreprt{%
    \if@restonecol\twocolumn\fi
  \endgroup
  }

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{scrbook} version}
% \begin{macro}{\@lox@prtc@scrbook}
%   \begin{macro}{\@lox@psttc@scrbook}
%     \mbox{}
%    \begin{macrocode}
\def\@lox@prtc@scrbook{%
  \begingroup%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative
}
\def\@lox@psttc@scrbook{%
    \if@restonecol\twocolumn\fi
  \endgroup
}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
%
% \subsubsection{Generic implementation}
% \begin{macro}{\lox@final}
%   \begin{macro}{\lox@draft}
%     In order to prevent the List of Fixme's heading from being generated
%     when there are no \fixme notes, a test on the existence of the
%     \texttt{lox} file is performed. There's a slight bug left however:
%     after removing the last fixme note, one ends up with an empty
%     \texttt{lox} file, so the heading still appears. Previously, this
%     was done by checking if some \fixme notes were given, but that was
%     buggy: the List of Fixme's could not appear before the first fixme
%     note\ldots I should try to detect whether the file is empty.
%    \begin{macrocode}
\def\lox@final{}
\def\lox@draft{%
  \IfFileExists{\jobname .lox}{%
    \@lox@prtc%
    \@starttoc{lox}%
    \@lox@psttc}{%
    \@starttoc{lox}}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\lox@draft@ams}
%   The \texttt{amsbook} and \texttt{amsart} classes have the very ugly idea
%   of redefining the \cs{@starttoc} command to take two arguments. Therefore,
%   I need to provide a specific version of the \cs{listoffixmes} macro:
%    \begin{macrocode}
\def\lox@draft@ams{\@starttoc{lox}\listfixmename}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Layout}
% \begin{macro}{\@fxsetlayoutkeys}
%   \marg{keys}\\
%   This macro would probably be overkill if we did not need to
%   \cs{expandafter} it at some point (see section
%   \ref{sec:code:layoutdispatch} on page \pageref{sec:code:layoutdispatch}).
%    \begin{macrocode}
\def\@fxsetlayoutkeys{\@fxsetkeys{layout}}
%    \end{macrocode}
% \end{macro}
% \subsubsection{Layout macros\label{sec:code:layoutmacros}}
% \begin{macro}{\@fxlayoutrename}
%   \marg{name}\\
%   As of version 4, layout macros have been renamed from \cs{FX*} to
%   \cs{FXLayout*}. Older versions remain for backward compatibility.
%    \begin{macrocode}
\newcommand\@fxlayoutrename[1]{%
  \@fxnewdeprecatedrcmd{FX#1}{FXLayout#1}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsubsection{Textual output}
% \begin{macro}{\FXLayoutInline}
%   \begin{macro}{\FXLayoutMargin}
%     \begin{macro}{\FXLayoutFootnote}
%       \marg{prefix}\marg{note}
%    \begin{macrocode}
\newcommand\FXLayoutInline[2]{%
  \textbf{#1}: \emph{#2}}
\newcommand\FXLayoutMargin[2]{%
  \marginpar[\footnotesize\raggedleft\textbf{#1}: \emph{#2}]{%
    \footnotesize\raggedright\textbf{#1}: \emph{#2}}}
\newcommand\FXLayoutFootnote[2]{%
  \footnote{\textbf{#1}: \emph{#2}}}
%    \end{macrocode}
%     \end{macro}
%   \end{macro}
% \end{macro}
% \begin{macro}{\FXLayoutMarginCLue}
%   \marg{prefix}
%    \begin{macrocode}
\newcommand\FXLayoutMarginClue[1]{%
  \marginpar[\footnotesize\raggedleft\textbf{#1}!]{%
    \footnotesize\raggedright\textbf{#1}!}}

%    \end{macrocode}
% \end{macro}
% Note that neither \cs{FXLayoutUser} nor the deprecated version \cs{FXUser}
% are defined here (see section \ref{sec:code:userlayout} for backward
% compatibility concerns). Requesting the \texttt{user} layout without
% defining one or the other would produce an error, which is the expected
% behavior.
% \begin{macro}{FXInline}
%   \begin{macro}{FXMargin}
%     \begin{macro}{FXFootnote}
%       \begin{macro}{FXMarginClue}
%         Deprecated versions:
%    \begin{macrocode}
\@fxlayoutrename{Inline}
\@fxlayoutrename{Margin}
\@fxlayoutrename{Footnote}
\@fxlayoutrename{MarginClue}

%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%
% \subsubsubsection{Index output}
% \begin{macro}{\@wrindex}
%   \marg{contents}\\
%   A replacement for \LaTeX's standard \cs{@wrindex} command to deal with the
%   \texttt{area} option. When given, it is supposed to replace the page
%   number, just as in the list of fixmes.
%    \begin{macrocode}
\def\@wrindex#1{%
  \ifthenelse{\equal{\cmdfx@lox@area}{thepage}}{%
    \protected@write\@indexfile{}{\string\indexentry{#1}{\thepage}}}{%
    \protected@write\@indexfile{}{\string\indexentry{#1}{\cmdfx@lox@area}}}
  \endgroup
  \@esphack}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fixmeindexname}
%   The comment about \cs{listfixmename} applies to \cs{fixmeindexname} as
%   well.
%    \begin{macrocode}
\newcommand*\fixmeindexname{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\FXLayoutIndex}
%   \marg{note}
%    \begin{macrocode}
\newcommand\FXLayoutIndex[1]{\index{***@\fixmeindexname:!#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{FXIndex}
%   Deprecated version:
%    \begin{macrocode}
\@fxlayoutrename{Index}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\FiXmeInfo}
%   \begin{macro}{\FiXmeWarning}
%     The following macros are unused since version 2.2 (at the time of which,
%     layout and logging were the same thing), but kept here anyway to avoid
%     breaking compilation of older documents (renewing these commands).
%    \begin{macrocode}
\@fxnewlegacyrcmd{FiXmeInfo}
\@fxnewlegacyrcmd{FiXmeWarning}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Layout options}
% \subsubsubsection{Individual options}
% As of version 4, these options are reimplemented with \texttt{xkeyval}. The
% \texttt{margin} and \texttt{marginclue} layouts are mutually exclusive,
% hence the non empty \meta{function} argument.
% the \texttt{xkeyval} key macro to handle this.
% \begin{option}{inline}
%   \begin{option}{noinline}
%     \mbox{}
%    \begin{macrocode}
\@fxdefineboolkey{layout}{inline}
%    \end{macrocode}
%   \end{option}
% \end{option}
% \begin{option}{margin}
%   \begin{option}{nomargin}
%     \mbox{}
%    \begin{macrocode}
\@fxdefineboolkey[%
  \ifthenelse{\boolean{fx@layout@margin}\and\boolean{fx@layout@marginclue}}{%
    \@fxpkgwarning{%
      marginal notes requested;\MessageBreak
      turning marginal clues off}%
    \fx@layout@marginclue{false}}]{%
    layout}{margin}
%    \end{macrocode}
%   \end{option}
% \end{option}
% \begin{option}{footnote}
%   \begin{option}{nofootnote}
%     \mbox{}
%    \begin{macrocode}
\@fxdefineboolkey{layout}{footnote}
%    \end{macrocode}
%   \end{option}
% \end{option}
% \begin{option}{user}
%   \begin{option}{nouser}
%     \mbox{}
%    \begin{macrocode}
\@fxdefineboolkey{layout}{user}
%    \end{macrocode}
%   \end{option}
% \end{option}
% \begin{option}{marginclue}
%   \begin{option}{nomarginclue}
%     \mbox{}
%    \begin{macrocode}
\@fxdefineboolkey[%
  \ifthenelse{\boolean{fx@layout@marginclue}\and\boolean{fx@layout@margin}}{%
    \@fxpkgwarning{%
      marginal clues requested;\MessageBreak
      turning marginal notes off}%
    \fx@layout@margin{false}}]{%
    layout}{marginclue}
%    \end{macrocode}
%   \end{option}
% \end{option}
% \begin{option}{index}
%   \begin{option}{noindex}
%     \mbox{}
%    \begin{macrocode}
\@fxdefineboolkey{layout}{index}

%    \end{macrocode}
%   \end{option}
% \end{option}
% \begin{option}{innerlayout}
%     \mbox{}
%    \begin{macrocode}
\@fxdefinecmdkey{layout}{innerlayout}{}

%    \end{macrocode}
% \end{option}
% The following options are unused since version 2.2 (at the time of which,
% layout and logging were the same thing), but kept here anyway to avoid
% breaking compilation of older documents.
% \begin{option}{info}
%   \begin{option}{warning}
%     \mbox{}
%    \begin{macrocode}
\@fxdeclarelegacyboolopt{info}
\@fxdeclarelegacyboolopt{warning}

%    \end{macrocode}
%  \end{option}
% \end{option}
%
% \subsubsubsection{Global options}
% \begin{macro}{\@fxlayouts}
%   Maintains the list of available layouts:
%    \begin{macrocode}
\newcommand\@fxlayouts{inline,margin,footnote,user,marginclue,index}
%    \end{macrocode}
% \end{macro}
% \begin{option}{morelayout}
%   The \texttt{morelayout} option adds to the existing layout configuration.
%   The implementation is trivial, as it simply boils down to calling
%   \cs{setkeys} on its argument. There are several advantages in doing this.
%   \begin{enumerate}
%   \item It is possible to disable a layout by using the
%     \texttt{no}\meta{layout} form. For example,
%     |morelayout={inline,nomargin}| will work.
%   \item A wrong layout name (for instance, misspelled) will trigger an
%   \texttt{xkeyval} error.
%   \end{enumerate}
%    \begin{macrocode}
\@fxdefinekey{layout}{morelayout}{\@fxsetlayoutkeys{#1}}
%    \end{macrocode}
% \end{option}
% \begin{option}{layout}
%   The \texttt{layout} option lets the user specify exactly which ones she
%   wants to use. Not very difficult to implement either: it works by first
%   deactivating all layouts, and then activating the provided ones as before.
%   Note that the use of the \texttt{no}\meta{layout} form is valid but has no
%   effect.
%    \begin{macrocode}
\@fxdefinekey{layout}{layout}{%
  \@for\@fxlt:=\@fxlayouts\do{\@nameuse{fx@layout@\@fxlt}{false}}%
  \@fxsetlayoutkeys{#1}}
%    \end{macrocode}
% \end{option}
%
% \subsection{Logging}
% \subsubsection{Logging macros}
% \begin{macro}{\@fxlogrename}
%   \marg{name}\\
%   As of version 4, logging macros have been renamed from \cs{FX*} to
%   \cs{FXLog*}. Older versions remain for backward compatibility.
% \end{macro}
%    \begin{macrocode}
\newcommand\@fxlogrename[1]{\@fxnewdeprecatedrcmd{FX#1}{FXLog#1}}

%    \end{macrocode}
% \begin{macro}{\FXLogNote}
%   \begin{macro}{\FXLogWarning}
%     \begin{macro}{\FXLogerror}
%       \begin{macro}{\FXLogFatal}
%         \marg{msg}\\
%         Logging includes both log file and terminal output.
%    \begin{macrocode}
\newcommand\FXLogNote[1]{%
  \GenericInfo{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Note: '#1'}}
\newcommand\FXLogWarning[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Warning: '#1'}}
\newcommand\FXLogError[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Error: '#1'}}
\newcommand\FXLogFatal[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Fatal Error: '#1'}}

%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
% \begin{macro}{FXNote}
%   \begin{macro}{FXWarning}
%     \begin{macro}{FXError}
%       \begin{macro}{FXFatal}
%         Deprecated versions:
%    \begin{macrocode}
\@fxlogrename{Note}
\@fxlogrename{Warning}
\@fxlogrename{Error}
\@fxlogrename{Fatal}

%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxlogcs@note}
%   \begin{macro}{\@fxlogcs@warning}
%     \begin{macro}{\@fxlogcs@fatal}
%       In order for the generic note dispatcher to be able to call the
%       logging macros (see section \ref{sec:code:nonfatalnotes}), we need an
%       easier translation mechanism from the note type to the actual command
%       name. This, however, is unnecessary for fatal notes because they are
%       implemented in a specialized way (see section
%       \ref{sec:code:fatalnotes}).
%    \begin{macrocode}
\let\@fxlogcs@note\FXLogNote
\let\@fxlogcs@warning\FXLogWarning
\let\@fxlogcs@error\FXLogError

%    \end{macrocode}
%    \end{macro}
%  \end{macro}
% \end{macro}
%
% \subsubsection{Logging options}
% \begin{option}{silent}
%   \begin{option}{nosilent}
%     \mbox{}
%    \begin{macrocode}
\@fxdefineboolkey{log}{silent}

%    \end{macrocode}
%   \end{option}
% \end{option}
%
% \subsection{\fixme notes}
% \subsubsection{Note parameters}
% As of version 4, the \cs{fixme*} commands have been renamed to \cs{fx*}.
% Older versions remain for backward compatibility.
% \begin{macro}{\@fxcounterrename}
%   \marg{name}\\
%   \texttt{fixme*} counters have also been renamed to \texttt{fx*}. Older
%   versions of \cs{the*} macros remain for backward compatibility (not the
%   counters themselves, but that should be ok since users are not supposed to
%   mess up with them).
%    \begin{macrocode}
\newcommand\@fxcounterrename[1]{\@fxprefixdeprecatecmd[the]{#1count}}

%    \end{macrocode}
% \end{macro}
% \begin{counter}{fixmecount}
%   \texttt{fixmecount} maintains the total of all notes, regardless of their
%   level.
%    \begin{macrocode}
\newcounter{fixmecount}

%    \end{macrocode}
% \end{counter}
% \begin{macro}{\@fxnoteparameters}
%   \marg{type}\\
%   The following macro creates all required note parameters:
%    \begin{macrocode}
\newcommand\@fxnoteparameters[1]{%
  \newcounter{fx#1count}
  \expandafter\newcommand\expandafter*\csname fx#1prefix\endcsname{}
  \expandafter\newcommand\expandafter*\csname fx#1indexname\endcsname{}

  \@fxcounterrename{#1}
  \@fxprefixdeprecatercmd{#1prefix}
  \@fxprefixdeprecatercmd{#1indexname}}

%    \end{macrocode}
% \end{macro}
% \begin{counter}{fx*count}
%   \begin{macro}{\thefixme*count}
%     \begin{macro}{\fx*prefix}
%       \begin{macro}{\fixme*prefix}
%         \begin{macro}{\fx*indexname}
%           \begin{macro}{\fixme*indexname}
%             And we use it for all note types:
%    \begin{macrocode}
\@fxnoteparameters{note}
\@fxnoteparameters{warning}
\@fxnoteparameters{error}
\@fxnoteparameters{fatal}

%    \end{macrocode}
%           \end{macro}
%         \end{macro}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{counter}
%
% \subsubsection{Layout dispatch\label{sec:code:layoutdispatch}}
% \begin{macro}{\@fxhandleinnermode}
%   Handles the case where \TeX{} is in inner mode. We use the alternate
%   layout provided by the \texttt{innerlayout} option, and we make sure to
%   disable both the \texttt{margin} and \texttt{marginclue} layout forms.
%   This is done by appending \texttt{nomargin} and \texttt{nomarginclue} to
%   the inner layout value (this also renders nasty user settings harmless).
%   Before that, we provide some informative message if risky layout forms
%   were active.
%    \begin{macrocode}
\def\@fxhandleinnermode{%
  \ifinner%
    \ifthenelse{\boolean{fx@layout@margin}}{%
      \@fxpkginfo{%
        inner mode detected;\MessageBreak
        turning margin layout form off}}{%
      \ifthenelse{\boolean{fx@layout@marginclue}}{%
        \@fxpkginfo{%
          inner mode detected;\MessageBreak
          turning marginclue layout form off}}{}}%
    \expandafter\@fxsetlayoutkeys\expandafter{%
      \cmdfx@layout@innerlayout,nomargin,nomarginclue}%
  \fi}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxlayout}
%   \marg{type}\marg{note}\\
%   Dispatch all active layouts. Note that we start with the footnote layout,
%   so that it is sticked properly to the preceding text if active. Next we
%   handle marginal layouts so that it is also close to the text to fix.
%    \begin{macrocode}
\def\@fxlayout#1#2{%
  \@fxhandleinnermode%
  \def\@fxtempa{\@nameuse{fx#1prefix}}%
  \def\@fxtempb{\@nameuse{fx#1indexname}}%
  \def\@fxtempc{\@nameuse{thefx#1count}}%
  \iffx@layout@footnote\FXLayoutFootnote{\@fxtempa}{#2}\fi%
  \iffx@layout@margin\FXLayoutMargin{\@fxtempa}{#2}\fi%
  \iffx@layout@marginclue\FXLayoutMarginClue{\@fxtempa}\fi%
  \iffx@layout@inline\FXLayoutInline{\@fxtempa}{#2}\fi%
  \iffx@layout@user\FXLayoutUser{\@fxtempa}{#2}\fi%
  \iffx@layout@index\FXLayoutIndex{\@fxtempb\@fxtempc: #2}\fi}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Non fatal notes\label{sec:code:nonfatalnotes}}
% The generic mechanism below applies only to \fixme notes, warnings and
% errors. Fatal notes are handled in the next section.
%
% \subsubsubsection{Low-level implementation}
% \begin{macro}{\@@fxnote@final}
%   \begin{macro}{\@@fxnote@draft}
%     \marg{type}\marg{note}
%    \begin{macrocode}
\def\@@fxnote@final#1#2{%
  \iffx@log@silent\else\@nameuse{@fxlogcs@#1}{#2}\fi%
  \fxaddcontentsline{\expandafter\protect\@nameuse{fx#1prefix}: #2}}
\def\@@fxnote@draft#1#2{%
  \@fxlayout{#1}{#2}%
  \@@fxnote@final{#1}{#2}}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \begin{macro}{\@fxnote}
%   \marg{type}\oarg{options}\marg{note}\\
%   Whatever the current default area is, local notes always use the page
%   number by default, unless explicitely set otherwise by a user option.
%    \begin{macrocode}
\def\@fxnote#1[#2]#3{%
  \begingroup%
  \@fxpresetkeys{lox}{area=thepage}{}%
  \@fxsetkeys{ltx,lang,lox,log,layout}{#2}%
  \stepcounter{fixmecount}%
  \stepcounter{fx#1count}%
  \@@fxnote{#1}{#3}%
  \endgroup}

%    \end{macrocode}
% \end{macro}
%
% \subsubsubsection{User-level interface}
% \begin{macro}{\fxnote}
%   \begin{macro}{\fxwarning}
%     \begin{macro}{\fxerror}
%       \oarg{options}\marg{note}
%    \begin{macrocode}
\DeclareRobustCommand\fxnote{%
  \@ifstar{%
    \@ifnextchar[%]
    {\@fxsnote{note}}{\@fxsnote{note}[]}}{%
    \@ifnextchar[%]
    {\@fxnote{note}}{\@fxnote{note}[]}}}
\DeclareRobustCommand\fxwarning{%
  \@ifstar{%
    \@ifnextchar[%]
    {\@fxsnote{warning}}{\@fxsnote{warning}[]}}{%
    \@ifnextchar[%]
    {\@fxnote{warning}}{\@fxnote{warning}[]}}}
\DeclareRobustCommand\fxerror{%
  \@ifstar{%
    \@ifnextchar[%]
    {\@fxsnote{error}}{\@fxsnote{error}[]}}{%
    \@ifnextchar[%]
    {\@fxnote{error}}{\@fxnote{error}[]}}}

%    \end{macrocode}
%     \end{macro}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Fatal notes}
% Fatal notes can't be handled in the same generic way as the others for two
% reasons: backward compatibility problems, and the fact that their behavior
% differs from that of the others in \texttt{final} mode.\par
% \begin{macro}{\FiXmeInline}
%   \begin{macro}{\FiXmeMargin}
%     \begin{macro}{\FiXmeFootnote}
%       \begin{macro}{\FiXmeUser}
%         \begin{macro}{\FiXmeIndex}
%           The \cs{FiXme*} macros below are kept only to preserve backward
%           compatibility. They are used by fatal notes only and are made to
%           call the new versions by default. \cs{FiXmeUser} is treated a bit
%           differently though (see section \ref{sec:code:userlayout}).
%    \begin{macrocode}
\newcommand\FiXmeInline[1]{\FXLayoutInline{\fxfatalprefix}{#1}}
\newcommand\FiXmeMargin[1]{\FXLayoutMargin{\fxfatalprefix}{#1}}
\newcommand\FiXmeFootnote[1]{\FXLayoutFootnote{\fxfatalprefix}{#1}}

\newcommand\FiXmeUser[1]{}
\let\FiXmeUser\empty

\newcommand\FiXmeIndex[1]{\FXLayoutIndex{#1}}

%    \end{macrocode}
%         \end{macro}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%
% \subsubsubsection{Low-level implementation\label{sec:code:fatalnotes}}
% \begin{macro}{\@@fxfatal@final}
%   \begin{macro}{\@@fxfatal@draft}
%     \marg{note}\\
%     Note that we start with the footnote layout, so that it is sticked
%     properly to the preceding text if active.
%    \begin{macrocode}
\def\@@fxfatal@final#1{%
  \@fxpkgerror{'#1' fatal error left in final version}{%
    You are currently processing in final mode,\MessageBreak
    but you still have some FiXme fatal errors left behind.\MessageBreak
    Type X to quit, fix your document (or switch back to draft
    mode),\MessageBreak
    and rerun LaTeX.}}
\def\@@fxfatal@draft#1{%
  \@fxhandleinnermode%
  \iffx@layout@footnote\FiXmeFootnote{#1}\fi%
  \iffx@layout@margin\FiXmeMargin{#1}\fi%
  \iffx@layout@marginclue\FXLayoutMarginClue{\fxfatalprefix}\fi%
  \iffx@layout@inline\FiXmeInline{#1}\fi%
  \iffx@layout@user\FiXmeUser{#1}\fi%
  \iffx@layout@index%
    \FiXmeIndex{\fxfatalindexname\thefxfatalcount: #1}%
  \fi%
  \iffx@log@silent\else\FXLogFatal{#1}\fi%
  \fxaddcontentsline{\protect\fxfatalprefix: #1}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxfatal}
%   \oarg{options}\marg{note}\\
%   Whatever the current default area is, local notes always use the page
%   number by default, unless explicitely set otherwise by a user option.
%    \begin{macrocode}
\def\@fxfatal[#1]#2{%
  \begingroup%
  \@fxpresetkeys{lox}{area=thepage}{}%
  \@fxsetkeys{ltx,lang,lox,log,layout}{#1}%
  \stepcounter{fixmecount}%
  \stepcounter{fxfatalcount}%
  \@@fxfatal{#2}%
  \endgroup}

%    \end{macrocode}
% \end{macro}
%
% \subsubsubsection{User-level interface}
% \begin{macro}{\fxfatal}
%   \oarg{options}\marg{note}
%    \begin{macrocode}
\DeclareRobustCommand\fxfatal{%
  \@ifstar{%
    \@ifnextchar[%]
    {\@fxsfatal}{\@fxsfatal[]}}{%
    \@ifnextchar[%]
    {\@fxfatal}{\@fxfatal[]}}}
\@fxnewdeprecatedcmd{fixme}{fxfatal}

%    \end{macrocode}
% \end{macro}
%
% \subsection{\fixme environments}
% \subsubsection{Layout macros}
% \begin{macro}{\FXEnvBegin}
%   \marg{prefix}
%    \begin{macrocode}
\newcommand\FXEnvBegin[1]{\begin{quotation}
    \textbf{#1:}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\FXEnvEnd}
%   \mbox{}
%    \begin{macrocode}
\newcommand\FXEnvEnd{\end{quotation}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{\texttt{final} and \texttt{draft} versions}
% \fixme environments are always laid out inline. The environment's summary
% is laid out by the corresponding macro, but the \texttt{inline} layout is
% disabled (this is as easy as appending \texttt{noinline} at the end of the
% options list). In \texttt{final} mode, \texttt{verbatim}'s \texttt{comment}
% environment is used to suppress output. Note that contrary to the macro
% version, we don't need to define the \texttt{fxfatal} environment in a
% specialized way because the fatal error will be triggered by the call to
% \cs{fxfatal} anyway.\\
% \begin{macro}{\@fxenvbegin@final}
%   \begin{macro}{\@fxenvbegin@draft}
%     \marg{type}\marg{options}\marg{summary}
%    \begin{macrocode}
\def\@fxenvbegin@final#1#2#3{%
  \@nameuse{fx#1}[#2]{#3}%
  \comment}
\def\@fxenvbegin@draft#1#2#3{%
  \@nameuse{fx#1}[#2,noinline]{#3}%
  \FXEnvBegin{\@nameuse{fx#1prefix}}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxenvend@final}
%   \begin{macro}{\@fxenvend@draft}
%     \mbox{}
%    \begin{macrocode}
\def\@fxenvend@final{\endcomment}
\def\@fxenvend@draft{\FXEnvEnd}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{User-level environments}
% \begin{macro}{\@fxdefineenvironment}
%   \marg{type}\\
%   This command defines \fixme environments in a generic way:
%    \begin{macrocode}
\newcommand\@fxdefineenvironment[1]{%
  \newenvironment{anfx#1}[2][]{\@fxenvbegin{#1}{##1}{##2}}{\@fxenvend}}

%    \end{macrocode}
% \end{macro}
% \begin{environment}{anfxnote}
%   \begin{environment}{anfxwarning}
%     \begin{environment}{anfxerror}
%       \begin{environment}{anfxfatal}
%         And we use it to create the user level interface:
%    \begin{macrocode}
\@fxdefineenvironment{note}
\@fxdefineenvironment{warning}
\@fxdefineenvironment{error}
\@fxdefineenvironment{fatal}

%    \end{macrocode}
%       \end{environment}
%     \end{environment}
%   \end{environment}
% \end{environment}
% \begin{environment}{afixme}
%   The \texttt{afixme} environment is deprecated:
%    \begin{macrocode}
\@fxnewdeprecatedenv{afixme}{anfxfatal}

%    \end{macrocode}
% \end{environment}
%
% \subsection{Internationalization}
% \begin{option}{english}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{english}{%
  \renewcommand*\fxnoteprefix{\fixmelogo\nobreakspace Note}%
  \renewcommand*\fxwarningprefix{\fixmelogo\nobreakspace Warning}%
  \renewcommand*\fxerrorprefix{\fixmelogo\nobreakspace Error}%
  \renewcommand*\fxfatalprefix{\fixmelogo}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnoteindexname{**a@Notes:!}%
  \renewcommand*\fxwarningindexname{**b@Warnings:!}%
  \renewcommand*\fxerrorindexname{**c@Errors:!}%
  \renewcommand*\fxfatalindexname{}%
  \renewcommand*{\listfixmename}{List of Corrections}}
%    \end{macrocode}
% \end{option}
% \begin{option}{french}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{french}{%
  \renewcommand*\fxnoteprefix{\fixmelogo\nobreakspace Note}%
  \renewcommand*\fxwarningprefix{\fixmelogo\nobreakspace Attention}%
  \renewcommand*\fxerrorprefix{\fixmelogo\nobreakspace Erreur}%
  \renewcommand*\fxfatalprefix{\fixmelogo}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnoteindexname{**a@Notes:!}%
  \renewcommand*\fxwarningindexname{**b@Avertissements:!}%
  \renewcommand*\fxerrorindexname{**c@Erreurs:!}%
  \renewcommand*\fxfatalindexname{}%
  \renewcommand*{\listfixmename}{Liste des Corrections}}
%    \end{macrocode}
% \end{option}
% \begin{option}{francais}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{francais}{\@fxsetkeys{lang}{french}}
%    \end{macrocode}
% \end{option}
% \begin{option}{spanish}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{spanish}{%
  \renewcommand*\fxnoteprefix{\fixmelogo\nobreakspace Nota}%
  \renewcommand*\fxwarningprefix{\fixmelogo\nobreakspace Aviso}%
  \renewcommand*\fxerrorprefix{\fixmelogo\nobreakspace Error}%
  \renewcommand*\fxfatalprefix{\fixmelogo}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnoteindexname{**a@Notas:!}%
  \renewcommand*\fxwarningindexname{**b@Avisos:!}%
  \renewcommand*\fxerrorindexname{**c@Errores:!}%
  \renewcommand*\fxfatalindexname{}%
  \renewcommand*{\listfixmename}{Lista de Correcciones}}
%    \end{macrocode}
% \end{option}
% \begin{option}{italian}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{italian}{%
  \renewcommand*\fxnoteprefix{\fixmelogo\nobreakspace Nota}%
  \renewcommand*\fxwarningprefix{\fixmelogo\nobreakspace Avviso}%
  \renewcommand*\fxerrorprefix{\fixmelogo\nobreakspace Errore}%
  \renewcommand*\fxfatalprefix{\fixmelogo}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnoteindexname{**a@Note:!}%
  \renewcommand*\fxwarningindexname{**b@Avvisi:!}%
  \renewcommand*\fxerrorindexname{**c@Errori:!}%
  \renewcommand*\fxfatalindexname{}%
  \renewcommand*{\listfixmename}{Corrigenda}}
%    \end{macrocode}
% \end{option}
% \begin{option}{german}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{german}{%
  \renewcommand*\fxnoteprefix{\fixmelogo\nobreakspace Anm}%
  \renewcommand*\fxwarningprefix{\fixmelogo\nobreakspace Warnung}%
  \renewcommand*\fxerrorprefix{\fixmelogo\nobreakspace Fehler}%
  \renewcommand*\fxfatalprefix{\fixmelogo}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnoteindexname{**a@Anmerkungen:!}%
  \renewcommand*\fxwarningindexname{**b@Warnungen:!}%
  \renewcommand*\fxerrorindexname{**c@Fehler:!}%
  \renewcommand*\fxfatalindexname{}%
  \renewcommand*{\listfixmename}{Verzeichnis der Korrekturen}}
%    \end{macrocode}
% \end{option}
% \begin{option}{ngerman}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{ngerman}{\@fxsetkeys{lang}{german}}
%    \end{macrocode}
% \end{option}
% \begin{option}{danish}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{danish}{%
  \renewcommand*\fxnoteprefix{\fixmelogo\nobreakspace Note}%
  \renewcommand*\fxwarningprefix{\fixmelogo\nobreakspace Advarsel}%
  \renewcommand*\fxerrorprefix{\fixmelogo\nobreakspace Fejl}%
  \renewcommand*\fxfatalprefix{\fixmelogo}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnoteindexname{**a@Noter:!}%
  \renewcommand*\fxwarningindexname{**b@Advarsler:!}%
  \renewcommand*\fxerrorindexname{**c@Fejl:!}%
  \renewcommand*\fxfatalindexname{}%
  \renewcommand*{\listfixmename}{Rettelser}}
%    \end{macrocode}
% \end{option}
% \begin{option}{croatian}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{croatian}{%
  \renewcommand*\fxnoteprefix{\fixmelogo\nobreakspace Poruka}%
  \renewcommand*\fxwarningprefix{\fixmelogo\nobreakspace Upozorenje}%
  \renewcommand*\fxerrorprefix{\fixmelogo\nobreakspace Gre\v ska}%
  \renewcommand*\fxfatalprefix{\fixmelogo}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnoteindexname{**a@Poruke:!}%
  \renewcommand*\fxwarningindexname{**b@Upozorenja:!}%
  \renewcommand*\fxerrorindexname{**c@Greske:!}%
  \renewcommand*\fxfatalindexname{}%
  \renewcommand*{\listfixmename}{Popis korekcija}}

%    \end{macrocode}
% \end{option}
%
% \subsection{Document status processing}
% \begin{macro}{\@@fxnote}
%   \begin{macro}{\@@fxfatal}
%     \begin{macro}{\@fxenvbegin}
%       \begin{macro}{\@fxenvend}
%         \begin{macro}{\listoffixmes}
%           \begin{option}{final}
%             \begin{option}{draft}
%               Select draft or final versions of internal macros, some of
%               them also depending on the document class:
%    \begin{macrocode}
\@fxdefinevoidkey{ltx}{final}{%
  \let\@@fxnote\@@fxnote@final%
  \let\@@fxfatal\@@fxfatal@final%
  \let\@fxenvbegin\@fxenvbegin@final%
  \let\@fxenvend\@fxenvend@final%
  \let\listoffixmes\lox@final}
\@fxdefinevoidkey{ltx}{draft}{%
  \let\@@fxnote\@@fxnote@draft%
  \let\@@fxfatal\@@fxfatal@draft%
  \let\@fxenvbegin\@fxenvbegin@draft%
  \let\@fxenvend\@fxenvend@draft%
  \let\listoffixmes\lox@draft}

%    \end{macrocode}
%             \end{option}
%           \end{option}
%         \end{macro}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%
% \subsection{Finale}
% \subsubsection{Class-dependent settings}
% Currently, our class dependencies only matter in draft mode, so one could
% argue that it is not optimal to handle this here. However, it would be
% incorrect to do it in the \texttt{draft} option code because this option can
% be switched at any point in the document (remember that it is understood
% even by the note insertion commands and environments) and the stuff below
% should only be executed once. Besides, \cs{@ifclassloaded} is an
% \cs{@onlypreamble} macro\ldots
% \begin{macro}{\@lox@prtc}
%   \begin{macro}{\@lox@psttc}
%    \begin{macrocode}
\@ifclassloaded{article}{%
  \let\@lox@prtc\@lox@prtc@article%
  \let\@lox@psttc\@lox@psttc@article}{%
  \@ifclassloaded{report}{%
    \let\@lox@prtc\@lox@prtc@report%
    \let\@lox@psttc\@lox@psttc@report}{%
    \@ifclassloaded{book}{%
      \let\@lox@prtc\@lox@prtc@book%
      \let\@lox@psttc\@lox@psttc@book}{%
      \@ifclassloaded{scrartcl}{%
        \let\@lox@prtc\@lox@prtc@scrartcl%
        \let\@lox@psttc\@lox@psttc@scrartcl}{%
        \@ifclassloaded{scrreprt}{%
          \let\@lox@prtc\@lox@prtc@scrreprt%
          \let\@lox@psttc\@lox@psttc@scrreprt}{%
          \@ifclassloaded{scrbook}{%
            \let\@lox@prtc\@lox@prtc@scrbook%
            \let\@lox@psttc\@lox@psttc@scrbook}{%
            \@ifclassloaded{amsbook}{%
              \let\lox@draft\lox@draft@ams}{%
              \@ifclassloaded{amsart}{%
                \let\lox@draft\lox@draft@ams}{%
                %% Use the article layout by default.
                \let\@lox@prtc\@lox@prtc@article%
                \let\@lox@psttc\@lox@psttc@article}}}}}}}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Options Processing}
% Put us in \texttt{english} and \texttt{final} mode, set initial area to
% ``global'', enable marginal notes and set the inner layout to inline.
% Note that as documented, marginal notes are incompatible with the ACM SIG
% classes. Initially, I thought I would detect these classes and issue an
% error if marginal layout (or clue) is active. However, I changed my mind,
% because nothing prevents somebody to write a new class on top of these ones
% and authorize \cs{marginpar} back again. Normally these classes issue an
% error if \cs{marginpar} is used. However, the 2.3 / June 2007 versions are
% buggy and the error actually triggers a stack overflow in \LaTeX\ldots
% (patch submitted). Oh boy, these classes are a mess.
%    \begin{macrocode}
\ExecuteOptionsX[fx]<ltx,lang,lox,log,layout>{%
  final,%
  english,%
  nosilent,%
  area=global,%
  layout=margin,innerlayout={layout=inline}}
%    \end{macrocode}
% Be sure to process the \texttt{lox} family after the \texttt{lang} one, as
% the default area might get a different name from a user option. We don't
% want to override it with our language setting.
%    \begin{macrocode}
\ProcessOptionsX*[fx]<ltx,legacy,lang,lox,log,layout>

%    \end{macrocode}
%
% \subsubsection{The \cs{fxsetup} macro}
% \begin{macro}{\fxsetup}
%   \marg{options}\\
%   The inevitable setup macro, extremely impressive yet as trivial as can be
%   with the \texttt{xkeyval} package\ldots All families are allowed except
%   for the ``legacy'' one.
%    \begin{macrocode}
\newcommand\fxsetup[1]{\@fxsetkeys{ltx,lang,lox,log,layout}{#1}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{User layout backward compatibility
%   tweaks\label{sec:code:userlayout}}
% User layout Backward compatibility is not as simple as the rest of the
% interface, because users of version 1 were instructed to \cs{renewcommand}
% \cs{FiXmeUser} (which is specific to fatal notes), whereas they were
% instructed to \cs{newcommand} \cs{FXUser} (which is now deprecated in favor
% of \cs{FXLayoutUser})\ldots oh boy, what a mess.
%    \begin{macrocode}
\AtBeginDocument{%
  \ifthenelse{\NOT\isundefined{\FXLayoutUser}}{%
    \renewcommand\FiXmeUser[1]{\FXLayoutUser{\fxfatalprefix}{#1}}}{%
    \ifthenelse{\NOT\isundefined{\FXUser}}{%
      \@fxdeprecatedcmdwarning{FXUser}{FXLayoutUser}%
      \newcommand\FXLayoutUser[2]{\FXUser{#1}{#2}}%
      \renewcommand\FiXmeUser[1]{\FXUser{\fxfatalprefix}{#1}}}{%
      \ifx\FiXmeUser\empty%
        \renewcommand\FiXmeUser[1]{}%
      \else%
        \@fxdeprecatedcmdwarning{FiXmeUser}{FXLayoutUser}%
      \fi}}}

%    \end{macrocode}
% \subsubsection{\fixme summary}
% Finally, output a summary giving the number of fixme notes at the end of the
% compilation:
%    \begin{macrocode}
\AtEndDocument{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces
  }{%
    FiXme Summary: Number of notes: \thefxnotecount,\MessageBreak%
    Number of warnings: \thefxwarningcount,\MessageBreak%
    Number of errors: \thefxerrorcount,\MessageBreak%
    Number of fatal errors: \thefxfatalcount,\MessageBreak%
    Total: \thefixmecount\@gobble%
  }}
%    \end{macrocode}
%
% ^^A \PrintChanges
% \PrintIndex
% \Finale
%
% ^^A fixme.dtx ends here.
