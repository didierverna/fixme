% \iffalse                                                 -*- mode: LaTeX -*-
%
% fixme.dtx --- Doc file for the FiXme package (code and documentation)
%
% Copyright (C) 1998-2002 Didier Verna.
%
% PRCS: $Id: fixme.dtx 1.44 Tue, 19 Feb 2002 19:50:49 +0100 didier $
%
% Author:        Didier Verna <didier@lrde.epita.fr>
% Maintainer:    Didier Verna <didier@lrde.epita.fr>
% Created:       Thu Dec 10 16:04:01 1998
% Last Revision: Mon Feb 18 14:49:01 2002
%
% This file is part of FiXme.
%
% FiXme may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.1
% of this license or (at your option) any later version.
% The latest version of this license is in
% http://www.latex-project.org/lppl.txt
% and version 1.1 or later is part of all distributions of LaTeX
% version 1999/06/01 or later.
%
% FiXme consists of the files listed in the file `README'.
%
%
% Commentary:
%
% Contents management by FCM version 0.1.
%
%
% Code:
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
% \OnlyDescription
% \CodelineIndex
% \RecordChanges
\begin{document}
\DocInput{fixme.dtx}
\end{document}
%</driver>
%
% \fi
%
% \catcode`\¡=14
% \CheckSum{522}
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%
% ^^A $Format: "% \\newcommand{\\version}{v$Version$}"$
% \newcommand{\version}{v2.0}
% ^^A $Format: "% \\newcommand{\\releasedate}{$ReleaseDate$}"$
% \newcommand{\releasedate}{2002/02/19}
% ^^A $Format: "% \\newcommand{\\packagecopyright}{$LaTeXCopyright$}"$
% \newcommand{\packagecopyright}{Copyright \copyright{} 1998--2002 Didier Verna}
% \newcommand{\fixme}{\textsf{FiXme}}
% \newcommand{\auctex}{AUC-\TeX}
% \MakeShortVerb{\|}
% \date{\today}
% \title{\fixme{} -- a \LaTeXe{} package for inserting fixme notes
% in your documents \thanks{This document describes \fixme{}
% \version, release date \releasedate.}}
% \author{Didier Verna\\
% \texttt{mailto:didier@lrde.epita.fr}\\
% \texttt{http://www.lrde.epita.fr/\~{}didier/}}
% \maketitle
%
%
% \begin{abstract}
% In the process of writing a long document, it is a common practice to leave
% some parts unwritten or uncomplete, and come back to them later. In such
% cases, you probably want to stick clues about which parts need to be
% ``fixed'', where they are located, and what needs to be done. This is what I
% call ``fixme notes''. The purpose of this package is to provide you with
% convenient ways to insert fixme notes in your documents.\par
% The \fixme{} package is \packagecopyright{}, and distributed under the terms
% of the LPPL license.
% \end{abstract}
%
%
% \section{Description}
% Fixme notes can appear in several forms, depending on which option(s) you
% pass to the package. These forms currently are: inline, marginal notes,
% footnotes, index entries, warnings on stdout and information in the log
% file. You can use multiple forms (possibly all) at the same time.
% Additionally, you can summarize all fixme notes in a list similar to the
% ``list of figures'' for instance.\par
% All these forms are available when you're working in \texttt{draft} mode.
% In \texttt{final} mode, the behavior is slightly different: any remaining
% critical note generates an error (the compilation aborts), while non
% critical ones are just removed from the document's body (they're still
% logged though).
%
%
% \section{User Interface}
% To use the package, simply say |\usepackage[|\meta{options}|]{fixme}| in the
% preamble of your document.
%
% \subsection{Inserting notes}
% \DescribeMacro{\fixme}
% Sticking a fixme note in your document is done thanks to the |\fixme| macro.
% This macro takes one optional and one mandatory argument. The mandatory
% argument is the note itself. But that, you guessed. The optional argument
% (available since \fixme{} version 2.0) describes the ``level'' of the note.
% Possible values are |note|, |warning| and |error| (which is the default).
%
% \subsection{Controlling the behavior of \fixme}
% \DescribeEnv{final}
% \DescribeEnv{draft}
% The global behavior of the package is controlled via the two standard
% options \texttt{final} and \texttt{draft}. These options are usually given
% to |\documentclass{}| which in turn passes them to all packages.\par
% In \texttt{draft} mode, the notes are logged (in the log file, that is) and
% appear in the text as specified (please refer to the ``layout'' sections).
% In \texttt{final} mode, the notes are still logged, but they're removed from
% the document's body.\par
% Additionaly, it is not possible to compile a final document with remaining
% error-level notes: such notes will abort compilation with an informative
% message. This will help you track down forgotten critical caveats. Final
% documents can only have notes and warnings left. Well, if, for some reason,
% you rilly rilly want to compile in \texttt{final} mode with critical fixme
% notes left behind, you always have the possibility to pass the
% \texttt{draft} option to \fixme{} directly\ldots\par
% The \texttt{final} mode has been chosen as the default because \LaTeXe{}
% itself behaves this way.\par
%
% \subsection{Controlling the layout}
% \DescribeEnv{inline}
% \DescribeEnv{margin}
% \DescribeEnv{footnote}
% \DescribeEnv{index}
% Fixme notes can appear in several forms (that can be combined) in your
% document. The forms currently supported are: inline (directly in the text),
% as marginal notes, footnotes, and index entries. To activate a particular
% layout, use the corresponding option. By default, only the \texttt{margin}
% layout is active.\par
% Each layout option has a counterpart that deactivates it. The counterpart
% option has the same name, prefixed with \texttt{no}. For instance, if you
% don't want marginal notes, use the \texttt{nomargin} option.\par
% \DescribeMacro{\listoffixmes}
% \fixme{} remembers where you put fixme notes in a toc-like file whose
% extension is \texttt{lox}. The |\listoffixmes| macro generates the list of
% all fixme notes in a manner similar to that of the ``list of figures'' for
% instance. A standard layout is automatically used for the `article',
% `report', `book' classes and their koma-script replacements. If another
% class is used, the `article' layout is selected. Also, note that if no
% fixme notes remain in the document, this macro doesn't generate an empty
% list, but rather stays silent. It also stays silent in \texttt{final} mode,
% regardless of the presence of remaining notes.
%
% \subsection{Special layout control}
% \DescribeEnv{info}
% \DescribeEnv{warning}
% Info-level notes are always registered in the log file, and warning-level
% ones also always appear on the terminal. For error-level notes, you have the
% choice: the \texttt{warning} option makes error-level notes also appear as
% warnings on the terminal with the fixme note and the line number from the
% source file. This warning is also registered in the log file. If you only
% want to register the error-level notes in the log file, use the
% \texttt{info} option instead. It does essentially the same, but doesn't mess
% up your terminal output. By default, the \texttt{warning} option is assumed.
% \begin{quote}
% - And what if I want output on the terminal, but not in the log file?\\
% - Well, just get lost :-)
% \end{quote}
%
% \subsection{Customizing the layout}
% The following macros are semi-internal: you can redefine them with
% |\renewcommand{}| if you are not satisfied with the way \fixme{} formats the
% notes.\par
% \DescribeMacro{\FXInline}
% \DescribeMacro{\FXMargin}
% \DescribeMacro{\FXFootnote}
% The \texttt{inline}, \texttt{margin} and \texttt{footnote} layouts have two
% parts: a ``prefix'' which depends on the note level, and the note
% itself. The prefix is one ``\fixme{} note:'', ``\fixme{} warning:'' or
% ``FIXME:'', and appears in bold. The note itself appears emphasized. These
% layouts are implemented thanks to corresponding macros that you can
% redefine if you whish. Each such macro takes two mandatory arguments: the
% prefix and the note, in that order.\par
% \DescribeMacro{\FXIndex}
% This macro is used for the \texttt{index} layout. All \fixme{} index entries
% appear under the ``FIXME's'' key in the symbols section. There are 3
% subcategories under this key, chosen according to the level of each note:
% ``notes'', ``warnings'', and ``to be fixed''.\par
% \DescribeMacro{\FXInfo}
% \DescribeMacro{\FXWarning}
% These commands are the ones used by \fixme{} to produce a package info or
% warning for error-level notes. They take the note itself as mandatory
% argument.
%
% \subsection{Fancy fruit salad layout}
% \DescribeEnv{user}
% \DescribeMacro{\FXUser}
% And what if you wanted something rilly, rilly fancy? I mean, like playing
% ``A Candle in the Wind'' on your loudspeaker and displaying a picture of
% Pamela Anderson naked on your boss' computer screen? Well, you \textbf{can}
% do that. Just pass the \texttt{user} option to the package (it also has its
% \texttt{nouser} counterpart), and define an |\FXUser| macro in the following
% manner:\\
% |\newcommand{\FXUser}[2]{|\meta{fancy fruit salad layout job}|}|\\ The
% arguments are the prefix, and the note itself, in that order.
%
% \subsection{Selecting a language}
% \DescribeEnv{english}
% \DescribeEnv{french}
% \DescribeEnv{francais}
% \DescribeEnv{german}
% \DescribeEnv{ngerman}
% \DescribeEnv{italian}
% \fixme{} currently supports English, French, German and Italian. You can
% select the language you want to use by passing the corresponding option
% (these options are usually given directly to |\documentclass{}| which in
% turn passes them to all packages). The \texttt{french} and \texttt{francais}
% options are synonyms. The \texttt{german} and \texttt{ngerman} options are
% currently equivalent.\par
% If you want a finer grain on the language-dependent parts of \fixme{}, the
% following macros are provided and can be redefined:\\
% \DescribeMacro{\fixmenoteprefix}
% Defines the prefix for note-level notes.\\
% \DescribeMacro{\fixmewarningprefix}
% Defines the prefix for warning-level notes.\\
% \DescribeMacro{\fixmeerrorprefix}
% Defines the prefix for error-level notes.\\
% \DescribeMacro{\fixmeindexname}
% Defines the name of the \fixme{} index key.\\
% \DescribeMacro{\fixmenoteindexname}
% Defines the name of the note-level subkey.\\
% \DescribeMacro{\fixmewarningindexname}
% Defines the name of the warning-level subkey.\\
% \DescribeMacro{\fixmeerrorindexname}
% Defines the name of the error-level subkey.\\
% \DescribeMacro{\listfixmename}
% Defines the title for the ``list of fixmes'' section.
%
% \subsection{Counters}
% \DescribeMacro{\thefixmecount}
% \DescribeMacro{\thefixmenotecount}
% \DescribeMacro{\thefixmewarningcount}
% \DescribeMacro{\thefixmeerrorcount}
% As of \fixme{} version 2.0, four counters are provided. They count
% respectively the total number of fixme notes, and the number of
% level-specific ones. At the end of processing, a \fixme{} usage summary is
% displayed and logged.
%
%
% \section{\auctex{} support}
% \auctex{} is a powerful major mode for editing \TeX{} documents in
% \textsf{Emacs} or \textsf{XEmacs}. In particular, it provides automatic
% completion of macro names once they are known. \fixme{} supports \auctex{}
% by providing a style file named \texttt{fixme.el} which contains \auctex{}
% definitions for the relevant macros. This file should be installed to a
% location where \auctex{} can find it (usually in a subdirectory of your
% \LaTeX{} styles directory). Please refer to the \auctex{} documentation for
% more information on this.
%
% \section{Changes}
% \begin{itemize}
% \item[v2.0] New feature: notes levels (optional argument to |\fixme|).\\
% New feature: fixme notes counters and usage summary.\\
% More translation work.\\
% Suggestions from Kasper B. Graversen |<kbg@dkik.dk>|.
% \item[v1.5] New appearance option: \texttt{inline}.
% \item[v1.4] Support for the koma-script classes has been added.\\
% Fix bug reported by Ulf Jaenicke-Roessler
% |<ujr@physik.phy.tu-dresden.de>|: the |\listoffixmes| command didn't work
% when called before the first fixme note.
% \item[v1.3] Support for Italian thanks to Riccardo Murri
%   |<murri@phc.unipi.it>|.
% \item[v1.2] Support for German thanks to Harald Harders
% |<h.harders@tu-bs.de>|.
% \end{itemize}
%
% \StopEventually{\par Well, I think that's it. Enjoy using \fixme{}!
%   \vfill\hfill\small \packagecopyright{}.}
%
% \section{The Code}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
¡ $Format: "\\ProvidesPackage{fixme}[$ReleaseDate$ v$Version$"$
\ProvidesPackage{fixme}[2002/02/19 v2.0
                        Insert fixme notes in your documents]

\newcommand*\fixmelogo{\textsf{FiXme}}

%    \end{macrocode}
% \subsection{List macros}
% \begin{macro}{\listoffixmes}
%   \begin{macro}{\listoffixmes@final}
%     \begin{macro}{\listoffixmes@draft}
%       |\listoffixmes| is empty by default. The |final| or |draft| options
%       will provide the proper definition. Lists are output in a document
%       class dependant fashion. Classes currently recognized are article,
%       report, book and their koma-script replacements.
%
% ^^A \changes{v1.4}{2001/09/04}{Fix bug reported by Ulf Jaenicke-Roessler}
%       In order to prevent the List of Fixme's chapter heading from being
%       generated when there are no fixmes, a test on the existence of the lox
%       file is performed. There's a slight bug left however: after removing
%       the last fixme, one ends up with an empty lox file, so the heading
%       still appear. Previously, this was done by checking if some fixmes
%       were given, but that was buggy: the list of fixme's could not appear
%       before the first fixme note\ldots
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\newcommand\listoffixmes{}
\def\listoffixmes@final{}
\def\listoffixmes@draft{%
  \IfFileExists{\jobname .lox}{\@listoffixmes@pretoc}{}%
  \@starttoc{lox}%
  \IfFileExists{\jobname .lox}{\@listoffixmes@posttoc}{}%
  }

%    \end{macrocode}
% \begin{macro}{\listfixmename}
%   In order to redefine the list title, users have to call |\renewcommand|.
%   I don't like this much: it would be cleaner to provide a real command
%   that redefines the title internally. However, I'll stick with the
%   current scheme because it is consistent with the rest of \LaTeXe's lists.
% \end{macro}
%    \begin{macrocode}
\newcommand*\listfixmename{}

%    \end{macrocode}
%
% \subsubsection{Standard classes}
% \begin{macro}{\listoffixmes@pretoc@article}
%   \begin{macro}{\listoffixmes@posttoc@article}
%     \begin{macro}{\l@fixme@article}
%       Let's start with the article version:
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\def\@listoffixmes@pretoc@article{%
  \section*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}%
  }
\def\@listoffixmes@posttoc@article{}
\def\l@fixme@article{\@dottedtocline{1}{1.5em}{2.3em}}

%    \end{macrocode}
% \begin{macro}{\listoffixmes@pretoc@report}
%   \begin{macro}{\listoffixmes@posttoc@report}
%     \begin{macro}{\l@fixme@report}
%       Here's the report version:
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\def\@listoffixmes@pretoc@report{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}%
  }
\def\@listoffixmes@posttoc@report{\if@restonecol\twocolumn\fi}
\def\l@fixme@report{\@dottedtocline{1}{1.5em}{2.3em}}

%    \end{macrocode}
% \begin{macro}{\listoffixmes@pretoc@book}
%   \begin{macro}{\listoffixmes@posttoc@book}
%     \begin{macro}{\l@fixme@book}
%       And here's the book version:
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\def\@listoffixmes@pretoc@book{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}%
  }
\def\@listoffixmes@posttoc@book{\if@restonecol\twocolumn\fi}
\def\l@fixme@book{\@dottedtocline{1}{1.5em}{2.3em}}

%    \end{macrocode}
%
% \subsubsection{koma-script classes}
% \begin{macro}{\listoffixmes@pretoc@scrartcl}
%   \begin{macro}{\listoffixmes@posttoc@scrartcl}
%     \begin{macro}{\l@fixme@scrartcl}
%       Let's start with the scrartcl version:
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\def\@listoffixmes@pretoc@scrartcl{%
  \section*{\listfixmename%
    \@mkboth{\listfixmename}{\listfixmename}}%
  }
\def\@listoffixmes@posttoc@scrartcl{}
\def\l@fixme@scrartcl{\@dottedtocline{1}{1.5em}{2.3em}}

%    \end{macrocode}
% \begin{macro}{\listoffixmes@pretoc@scrreprt}
%   \begin{macro}{\listoffixmes@posttoc@scrreprt}
%     \begin{macro}{\l@fixme@scrreprt}
%       Here's the scrreprt version:
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\def\@listoffixmes@pretoc@scrreprt{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\listfixmename}{\listfixmename}}%
  }
\def\@listoffixmes@posttoc@scrreprt{\if@restonecol\twocolumn\fi}
\def\l@fixme@scrreprt{\@dottedtocline{1}{1.5em}{2.3em}}

%    \end{macrocode}
% \begin{macro}{\listoffixmes@pretoc@scrbook}
%   \begin{macro}{\listoffixmes@posttoc@scrbook}
%     \begin{macro}{\l@fixme@scrbook}
%       And here's the scrbook version:
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\def\@listoffixmes@pretoc@scrbook{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\listfixmename}{\listfixmename}}%
  }
\def\@listoffixmes@posttoc@scrbook{\if@restonecol\twocolumn\fi}
\def\l@fixme@scrbook{\@dottedtocline{1}{1.5em}{2.3em}}

%    \end{macrocode}
%
% \subsection{Layout macros}
% ^^A \changes{v1.5}{2002/02/18}{New appearance option: \texttt{inline}}
% \begin{macro}{\FXInline}
%   \begin{macro}{\FXMargin}
%     \begin{macro}{\FXFootnote}
%       \begin{macro}{\FXUser}
%         \begin{macro}{\FXIndex}\begin{macro}{\fixmeindexname}
%           \begin{macro}{\FXInfo}
%             \begin{macro}{\FXWarning}
%               The macros to implement different layouts for the fixme notes:
%             \end{macro}
%           \end{macro}
%         \end{macro}\end{macro}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\newcommand\FXInline[2]{%
  \textbf{#1}: \emph{#2}}
\newcommand\FXMargin[2]{%
  \marginpar{\footnotesize\flushright\textbf{#1}: \emph{#2}}}
\newcommand\FXFootnote[2]{%
  \footnote{\textbf{#1}: \emph{#2}}}
\newcommand\FXUser[2]{}

\newcommand*\fixmeindexname{}
\newcommand\FXIndex[1]{%
  \index{***@\fixmeindexname:!#1}}
\newcommand\FXInfo[1]{\PackageInfo{FiXme}{`#1'}}
\newcommand\FXWarning[1]{\PackageWarning{FiXme}{`#1'}}

%    \end{macrocode}
%
% \begin{macro}{\fixmeerrorprefix}
% \begin{macro}{\FiXmeInline}
%   \begin{macro}{\FiXmeMargin}
%     \begin{macro}{\FiXmeFootnote}
%       \begin{macro}{\FiXmeUser}
%         \begin{macro}{\FiXmeIndex}
%           \begin{macro}{\FiXmeInfo}
%             \begin{macro}{\FiXmeWarning}
%               The following layout macros are kept only to preserve backward
%               compatibility. They are used only by critical fixme notes
%               (errors) and are made to call the new versions by default:
%             \end{macro}
%           \end{macro}
%         \end{macro}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
% \end{macro}
%    \begin{macrocode}
\newcommand*\fixmeerrorprefix{}
\newcommand\FiXmeInline[1]{\FXInline{\fixmeerrorprefix}{#1}}
\newcommand\FiXmeMargin[1]{\FXMargin{\fixmeerrorprefix}{#1}}
\newcommand\FiXmeFootnote[1]{\FXFootnote{\fixmeerrorprefix}{#1}}
\newcommand\FiXmeUser[1]{\FXUser{\fixmeerrorprefix}{#1}}

\newcommand\FiXmeIndex[1]{\FXIndex{#1}}
\newcommand\FiXmeInfo[1]{\FXInfo{#1}}
\newcommand\FiXmeWarning[1]{\FXWarning{#1}}

%    \end{macrocode}
% Booleans that control which layouts are selected:
%    \begin{macrocode}
\newif\iffixme@inline\fixme@inlinefalse
\newif\iffixme@margin\fixme@marginfalse
\newif\iffixme@footnote\fixme@footnotefalse
\newif\iffixme@user\fixme@userfalse
\newif\iffixme@index\fixme@indexfalse
\newif\iffixme@info\fixme@infofalse
\newif\iffixme@warning\fixme@warningfalse

%    \end{macrocode}
% \begin{macro}{\fixme@text}
%   This macro implements the common (textual) part of all notes:
% \end{macro}
%    \begin{macrocode}
\def\fixme@text#1#2{%
  \iffixme@inline\FXInline{#1}{#2}\fi%
  \iffixme@margin\FXMargin{#1}{#2}\fi%
  \iffixme@footnote\FXFootnote{#1}{#2}\fi%
  \iffixme@user\FXUser{#1}{#2}\fi}

%    \end{macrocode}
%
% \subsection{Fixme notes}
% \begin{macro}{\fixme@note@draft}
%   \begin{macro}{\fixme@note@final}
%     \begin{macro}{\fixmenoteprefix}
%       \begin{macro}{\fixmenoteindexname}
%         The different flavors of fixme notes. Proper definitions will be
%         selected by the |draft| or |final| options. Let's start with the
%         note notes:
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\newcommand*\fixmenoteprefix{}
\newcommand*\fixmenoteindexname{}
\def\fixme@note@draft#1{%
  \fixme@text{\fixmenoteprefix}{#1}%
  \FXInfo{#1}%
  \FXIndex{**a@\fixmenoteindexname:!#1}%
  \addcontentsline{lox}{fixme}{\fixmenoteprefix: #1}}
\def\fixme@note@final#1{%
  \FXInfo{#1}%
  \addcontentsline{lox}{fixme}{\fixmenoteprefix: #1}}

%    \end{macrocode}
% \begin{macro}{\fixme@warning@draft}
%   \begin{macro}{\fixme@warning@final}
%     \begin{macro}{\fixmewarningprefix}
%       \begin{macro}{\fixmewarningindexname}
%         Here are the warnings notes:
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\newcommand*\fixmewarningprefix{}
\newcommand*\fixmewarningindexname{}
\def\fixme@warning@draft#1{%
  \fixme@text{\fixmewarningprefix}{#1}%
  \FXWarning{#1}%
  \FXIndex{**b@\fixmewarningindexname:!#1}%
  \addcontentsline{lox}{fixme}{\fixmewarningprefix: #1}}
\def\fixme@warning@final#1{%
  \FXWarning{#1}%
  \addcontentsline{lox}{fixme}{\fixmewarningprefix: #1}}

%    \end{macrocode}
% \begin{macro}{\fixme@error@draft}
%   \begin{macro}{\fixme@error@final}
%     \begin{macro}{\fixmeerrorindexname}
%       And here are the error ones. Note that in \texttt{draft} mode, it's
%       useless to generate both a warning and an information because warnings
%       are also logged.
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\newcommand*\fixmeerrorindexname{}
\def\fixme@error@draft#1{%
  \iffixme@inline\FiXmeInline{#1}\fi%
  \iffixme@margin\FiXmeMargin{#1}\fi%
  \iffixme@footnote\FiXmeFootnote{#1}\fi%
  \iffixme@user\FiXmeUser{#1}\fi%
  \iffixme@index\FiXmeIndex{**c@\fixmeerrorindexname:!#1}\fi%
  \iffixme@warning\FiXmeWarning{#1}\else\iffixme@info\FiXmeInfo{#1}\fi\fi%
  \addcontentsline{lox}{fixme}{\fixmeerrorprefix: #1}}
\def\fixme@error@final#1{%
  \PackageError{FiXme}{`#1' fixme left in final version}{%
    You are processing your document in final mode,\MessageBreak
    but you still have some critical FiXme's left behind.\MessageBreak
    Type X to quit, fix your document, and rerun LaTeX.}}

%    \end{macrocode}
% \begin{macro}{\fixme}
%   \begin{macro}{\fixme@note}
%     \begin{macro}{\fixme@warning}
%       \begin{macro}{\fixme@error}
%         Here's the |\fixme| macro. By default, critical notes (errors) are
%         generated. The different versions are |\let| to the draft of final
%         flavors defined above by the \texttt{draft} or \texttt{fianl}
%         options.
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\newcounter{fixmecount}
\newcounter{fixmenotecount}
\newcounter{fixmewarningcount}
\newcounter{fixmeerrorcount}

\newcommand\fixme[2][error]{%
  \stepcounter{fixmecount}%
  \stepcounter{fixme#1count}%
  \csname fixme@#1\endcsname{#2}}

%    \end{macrocode}
% Options that control which layouts are selected:
%    \begin{macrocode}
\DeclareOption{inline}{\fixme@inlinetrue}
\DeclareOption{noinline}{\fixme@inlinefalse}
\DeclareOption{margin}{\fixme@margintrue}
\DeclareOption{nomargin}{\fixme@marginfalse}
\DeclareOption{footnote}{\fixme@footnotetrue}
\DeclareOption{nofootnote}{\fixme@footnotefalse}
\DeclareOption{user}{\fixme@usertrue}
\DeclareOption{nouser}{\fixme@userfalse}
\DeclareOption{index}{\fixme@indextrue}
\DeclareOption{noindex}{\fixme@indexfalse}
\DeclareOption{info}{\fixme@infotrue}
\DeclareOption{noinfo}{\fixme@infofalse}
\DeclareOption{warning}{\fixme@warningtrue}
\DeclareOption{nowarning}{\fixme@warningfalse}

%    \end{macrocode}
%
% \subsection{Language processing}
% Options that control which language is selected:
% ^^A \changes{v1.3}{2001/04/23}{Support for Italian thanks to Riccardo Murri}
% ^^A \changes{v1.2}{2000/12/26}{Support for German thanks to Harald Harders}
%    \begin{macrocode}
\DeclareOption{english}{%
  \renewcommand*\fixmenoteprefix{\fixmelogo~note}
  \renewcommand*\fixmewarningprefix{\fixmelogo~warning}
  \renewcommand*\fixmeerrorprefix{\fixmelogo}
  \renewcommand*\fixmeindexname{Corrections}
  \renewcommand*\fixmenoteindexname{\fixmelogo~notes}
  \renewcommand*\fixmewarningindexname{\fixmelogo~warnings}
  \renewcommand*\fixmeerrorindexname{\fixmelogo's}
  \renewcommand*{\listfixmename}{List of Corrections}}
\DeclareOption{french}{%
  \renewcommand*\fixmenoteprefix{\fixmelogo~note}
  \renewcommand*\fixmewarningprefix{\fixmelogo~attn}
  \renewcommand*\fixmeerrorprefix{\fixmelogo}
  \renewcommand*\fixmeindexname{Corrections}
  \renewcommand*\fixmenoteindexname{\fixmelogo~notes}
  \renewcommand*\fixmewarningindexname{\fixmelogo~attn}
  \renewcommand*\fixmeerrorindexname{\fixmelogo's}
  \renewcommand*{\listfixmename}{Liste des Corrections}}
\DeclareOption{francais}{\ExecuteOptions{french}}
\DeclareOption{german}{%
  \renewcommand*\fixmenoteprefix{\fixmelogo~anm}
  \renewcommand*\fixmewarningprefix{\fixmelogo~warnung}
  \renewcommand*\fixmeerrorprefix{\fixmelogo}
  \renewcommand*\fixmeindexname{Korrekturen}
  \renewcommand*\fixmenoteindexname{\fixmelogo~anm}
  \renewcommand*\fixmewarningindexname{\fixmelogo~warnungen}
  \renewcommand*\fixmeerrorindexname{\fixmelogo's}
  \renewcommand*{\listfixmename}{Liste der Korrekturen}}
\DeclareOption{ngerman}{%
  \ExecuteOptions{german}}
\DeclareOption{italian}{%
  \renewcommand*{\listfixmename}{Corrigenda}}

%    \end{macrocode}
%
% \subsection{Document status processing}
% \begin{macro}{\fixme@note}
%   \begin{macro}{\fixme@warning}
%     \begin{macro}{\fixme@error}
%       Here's where the draft or final version of the internal macros are
%       selected.
%     \end{macro}
%   \end{macro}
% \end{macro}
%    \begin{macrocode}
\DeclareOption{final}{
  \let\fixme@note\fixme@note@final
  \let\fixme@warning\fixme@warning@final
  \let\fixme@error\fixme@error@final
  \let\listoffixmes\listoffixmes@final
  }

\DeclareOption{draft}{
  \let\fixme@note\fixme@note@draft
  \let\fixme@warning\fixme@warning@draft
  \let\fixme@error\fixme@error@draft
  \let\listoffixmes\listoffixmes@draft
  \@ifclassloaded{article}{
    \let\@listoffixmes@pretoc\@listoffixmes@pretoc@article
    \let\@listoffixmes@posttoc\@listoffixmes@posttoc@article
    \let\l@fixme\l@fixme@article}{
    \@ifclassloaded{report}{
      \let\@listoffixmes@pretoc\@listoffixmes@pretoc@report
      \let\@listoffixmes@posttoc\@listoffixmes@posttoc@report
      \let\l@fixme\l@fixme@report}{
      \@ifclassloaded{book}{
        \let\@listoffixmes@pretoc\@listoffixmes@pretoc@book
        \let\@listoffixmes@posttoc\@listoffixmes@posttoc@book
        \let\l@fixme\l@fixme@book}{
        \@ifclassloaded{scrartcl}{
          \let\@listoffixmes@pretoc\@listoffixmes@pretoc@scrartcl
          \let\@listoffixmes@posttoc\@listoffixmes@posttoc@scrartcl
          \let\l@fixme\l@fixme@scrartcl}{
          \@ifclassloaded{scrreprt}{
            \let\@listoffixmes@pretoc\@listoffixmes@pretoc@scrreprt
            \let\@listoffixmes@posttoc\@listoffixmes@posttoc@scrreprt
            \let\l@fixme\l@fixme@scrreprt}{
            \@ifclassloaded{scrbook}{
              \let\@listoffixmes@pretoc\@listoffixmes@pretoc@scrbook
              \let\@listoffixmes@posttoc\@listoffixmes@posttoc@scrbook
              \let\l@fixme\l@fixme@scrbook}{
              %% Use the article layout by default.
              \let\@listoffixmes@pretoc\@listoffixmes@pretoc@article
              \let\@listoffixmes@posttoc\@listoffixmes@posttoc@article
              \let\l@fixme\l@fixme@article}
            }
          }
        }
      }
    }
  }

%    \end{macrocode}
% Put us in \texttt{english} and \texttt{final} mode, and enable the marginal
% notes. Also output error-level notes as warnings by default:
%    \begin{macrocode}
\ExecuteOptions{english,final,margin,warning}
\ProcessOptions*

%    \end{macrocode}
% Finally, output a summary giving the number of fixme notes at the end of the
% compilation:
%    \begin{macrocode}
\AtEndDocument{%
  \GenericWarning{%
    (FiXme) \@spaces\@spaces\@spaces\@spaces
  }{%
    Package FiXme Summary: %
    \space Number of notes: \thefixmenotecount,\MessageBreak%
    Number of warnings: \thefixmewarningcount,\MessageBreak%
    Number of errors: \thefixmeerrorcount,\MessageBreak%
    Total: \thefixmecount\@gobble%
  }}
%    \end{macrocode}
%
% ^^A \PrintChanges
% ^^A \PrintIndex
% \Finale
%
% ^^A fixme.dtx ends here.
