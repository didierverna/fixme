% \iffalse                                                 -*- mode: LaTeX -*-
%
% fixme.dtx --- Doc file for the FiXme package (code and documentation)
%
% Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006 Didier Verna.
% Copyright (C) 2007, 2009 Didier Verna.
%
% Author:        Didier Verna <didier@lrde.epita.fr>
% Maintainer:    Didier Verna <didier@lrde.epita.fr>
% Created:       Thu Dec 10 16:04:01 1998
% Last Revision: Thu Jul 16 19:55:00 2009
%
% This file is part of FiXme.
%
% FiXme may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.1
% of this license or (at your option) any later version.
% The latest version of this license is in
% http://www.latex-project.org/lppl.txt
% and version 1.1 or later is part of all distributions of LaTeX
% version 1999/06/01 or later.
%
% FiXme consists of the files listed in the file `README'.
%
%
% Commentary:
%
% Contents management by FCM version 0.1.
%
%
% Code:
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\usepackage{xspace}
\usepackage{docx}
% \OnlyDescription
\CodelineIndex
% \RecordChanges
\begin{document}
\DocInput{fixme.dtx}
\end{document}
%</driver>
%
% \fi
%
% \catcode`\¡=14
% ^^A\CheckSum{880}
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%
% \MakeShortVerb{\|}
%
% \makeatletter
% \renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}{%
%     -3.25ex\@plus -1ex \@minus -.2ex}{%
%     1.5ex \@plus .2ex}{%
%     \normalfont\normalsize\bfseries}}
% \makeatother
% \newcommand\subsubsubsection[1]{\paragraph{#1:}}
%
% ^^A Let's not depend on varioref for just that:
% \newcommand\sectionref[1]{\ref{#1} on page \pageref{#1}}
%
% \newcommand\etc{\textit{etc.}\xspace}
% \newcommand\komascript{\textsc{Koma}-Script\xspace}
% \newcommand\auctex{AUC-\TeX\xspace}
%
% \newcommand\version{4.0}
% \newcommand\releasedate{2009/09/02}
% \newcommand\packagecopyright{%
%   Copyright \copyright{} 1998--2002, 2004--2007, 2009 Didier Verna}
% \newcommand\fixme{\textsf{FiXme}\xspace}
%
% \date\today
% \title{\fixme{} -- a \LaTeXe{} package for inserting fixme notes
%   in your documents\thanks{This document describes \fixme \version,
%     release date \releasedate.}}
% \author{Didier Verna\\
%   \texttt{mailto:didier@lrde.epita.fr}\\
%   \texttt{http://www.lrde.epita.fr/\~{}didier/}}
% \maketitle
%
%
% \begin{abstract}
%   In the process of writing a long document, it is a common practice to
%   leave some parts unwritten or uncomplete, and come back to them later. In
%   such cases, you probably want to stick clues about which parts need to be
%   ``fixed'', where they are located, and what needs to be done. This is what
%   I call ``fixme notes''. The purpose of this package is to provide you with
%   convenient ways to insert such notes in your documents.\par
%   The \fixme package is \packagecopyright{}, and distributed under the
%   terms of the LPPL license.
% \end{abstract}
%
% \tableofcontents
%
% \section{Description}
% With \fixme, you can insert different kinds of notes in your documents,
% ranging from simple not-so-important notices to critical stuff that must
% absolutely be fixed in the final version.\par
% \fixme gives you full control on the layout of these notes: they can be
% displayed inline (directly in the text), as marginal paragraphs (the
% default), as footnotes and even as index entries. All these possibilities
% can be mixed together. Additionally, you can summarize all \fixme notes in
% a ``list of fixme's''.\par
% \fixme notes are also recorded in the log file, and (depending on their
% importance level) some of them are displayed on the terminal during
% compilation. A final summary is also created at the end of the compilation
% process.\par
% All these features are actually available when you're working in
% \texttt{draft} mode. In \texttt{final} mode, the behavior is slightly
% different: any remaining critical note generates an error (the compilation
% aborts), while non critical ones are just removed from the document's body
% (they're still recorded in the log file though).
%
%
% \section{Using \fixme}
% \subsection{Requirements}
% In order to work properly, \fixme requires the presence of some \LaTeX{}
% packages. You don't have to load them explicitly though. As long as
% \LaTeX{} can locate them, they will be used automatically. \fixme currently
% depends on \texttt{xspace}, \texttt{ifthen}, \texttt{verbatim} and
% \texttt{xkeyval} no older than release date 2006/11/18.
%
% \subsection{Loading the package}
% In order to load \fixme, simply say |\usepackage[|\meta{options}|]{fixme}|
% in the preamble of your document. There is an important number of options
% that you can use in order to customize \fixme's default or glabal behavior.
% These options will be discussed when appropriate.\\
% \DescribeMacro{\fxsetup}\marg{options}\\
% Another way of customizing \fixme's global behavior is to use the
% \cs{fxsetup} command. \cs{fxsetup} understands the same options as the
% package itself and can be used in the preamble as well as in the document's
% body.
%
% Finally, note that unless specified otherwise, all package options are also
% understood by the note insertion commands or environments. The effect is
% then local to that particular command.
%
% \subsection{Inserting \fixme notes}
% \subsubsection{Macros}
% \DescribeMacro{\fxnote}
% \DescribeMacro{\fxwarning}
% \DescribeMacro{\fxerror}
% \DescribeMacro{\fxfatal}\oarg{options}\marg{note}\\
% \fixme provides four note insertion commands corresponding to different
% levels of importance (notes, warnings, errors and fatal errors).
% \cs{fxfatal} is a bit different from the other ones, as will be explained in
% section \sectionref{sec:manual:behavior}.\par
% \DescribeMacro{\fixme}
% As of version 4, the \cs{fixme} command is a synonym for \cs{fxfatal} and is
% considered deprecated.\par
% \fixme notes are meant to be short: consider that they are likely to go in
% the list of fixmes and in the index for instance. If you feel the need for
% writing longer comments, the environments described in the next section
% might come in handy.
%
% \subsubsection{Environments}
% \emph{\textbf{Warning:} as of version 4.0, the environments interface has
%   changed and is \emph{not} backward-compatible.}\\
% \DescribeEnv{anfxnote}
% \DescribeEnv{anfxwarning}
% \DescribeEnv{anfxerror}
% \DescribeEnv{anfxfatal}\oarg{options}\marg{summary}\\
% As of version 3.0, \fixme provides four environments for inserting longer
% notes, if you feel that a short one is inappropriate.
%
% \fixme environments take one mandatory argument (meant to be a short summary
% of the long note) and behave in exactly the same way as their macro
% counterpart. The layout policy is a bit different though (see section
% \sectionref{sec:manual:layout}): the long note (the environment's contents)
% will always appear inline, and the \meta{summary} will obey all active
% layout forms except for the inline one, just as if it had been passed to one
% of the \fixme note insertion commands described in the previous section.
%
% \DescribeEnv{afixme}
% As of version 4, the \texttt{afixme} environement is a synonym for
% \texttt{anfxfatal}, and is considered deprecated.
%
% \subsection{Controlling the behavior of \fixme\label{sec:manual:behavior}}
% \DescribeOption{final}
% \DescribeOption{draft}
% The behavior of \fixme is controlled by the two standard options
% \texttt{final} and \texttt{draft}. These options are usually given to
% \cs{documentclass} which in turn passes them to all packages. In addition,
% you can also use them as an option to \cs{usepackage}, in the call to
% \cs{fxsetup}, and even to the note insertion commands and environments.
%
% In \texttt{draft} mode, \fixme notes are recorded in the log file and appear
% in the document as specified by the layout settings (see section
% \sectionref{sec:manual:layout}). Additionally, warnings, errors and fatal
% errors are also displayed on the terminal.
%
% In final mode, non fatal notes (those generated by \cs{fxnote},
% \cs{fxwarning}, \cs{fxerror} and their corresponding environments) are still
% logged, but they're not typeset. On the other hand, fatal notes (those
% generated by the \cs{fxfatal} command and the \texttt{anfxfatal}
% environment) will throw a \LaTeX{} error and thus interrupt or abort
% compilation with an informative message. This will help you track down
% forgotten important caveats in your document.
%
% Let me rephrase: final documents can only have notes, warnings, and (non
% fatal) errors left. Of course, this is not completely true: remember that
% these options are understood locally by all the note insertion commands and
% environments, so even in \texttt{final} mode, you can use something like
% this:
% \begin{verbatim}
% \fxfatal[draft]{bla bla}
% \end{verbatim}
%
% By default, \fixme is in \texttt{final} mode (\LaTeX{} itself behaves that
% way).
%
% \subsection{Controlling the layout of \fixme notes\label{sec:manual:layout}}
% \fixme notes can appear in several forms in your document. Each of these
% forms can be individually selected, or they can be combined together. This
% section describes the available layout forms and their possible combination.
%
% \subsubsection{Available layout forms}
% The layout forms currently supported are: inline (directly in the text),
% marginal notes (the default), footnotes, index entries and (as of version
% 3.2) marginal clues.\footnote{\fixme notes also appear in a ``list of
%   fixmes'', see section \sectionref{sec:manual:lox}.} While most of
%   these layout forms should be self-explanatory, the marginal clues deserve
%   a bit more explanation.
%
% If your preferred layout form is inline or say, footnote, it might be
% somewhat difficult to localize the \fixme note on the page, especially its
% vertical position. That's where marginal clues come into play. A marginal
% clue does not display the \fixme note's contents, but only an indication
% that there is such a note at that (vertical) position. So you have to use
% another layout form (again, typically inline or footnote) in order to get
% the actual note's contents.
%
% Obviously, the margin and margin clue forms are mutually exclusive, so if
% you try to activate both, only the most recently activated one will be
% enabled (and you'll get a notice in the log file and on the terminal).
%
% \subsubsection{Individual control}
% \DescribeOption{inline}
% \DescribeOption{margin}
% \DescribeOption{marginclue}
% \DescribeOption{footnote}
% \DescribeOption{index}
% For each layout form, there is a corresponding boolean option. These options
% are understood by the package itself, the \cs{fxsetup} command and also
% locally by every note insertion command or environment.
%
% To activate a layout form, use the option directly or give it a value of
% \texttt{true}. For instance, these two forms are equivalent:
% \begin{verbatim}
% \fxnote[margin]{note...}
% \fxnote[margin=true]{note...}
% \end{verbatim}
%
% \DescribeOption{noinline}
% \DescribeOption{nomargin}
% \DescribeOption{nomarginclue}
% \DescribeOption{nofootnote}
% \DescribeOption{noindex}
% For convenience, each layout option has a counterpart that deactivates the
% corresponding layout form. The counterpart option has the same name,
% prefixed with \texttt{no}. Again, these options are understood by the
% package itself, the \cs{fxsetup} command and also locally by every note
% insertion command or environment. For instance, these two forms are
% equivalent:
% \begin{verbatim}
% \fxsetup{margin=false}
% \fxsetup{nomargin}
% \end{verbatim}
%
% \subsubsection{Global control}
% \DescribeOption{layout}
% \DescribeOption{morelayout}
% As of version 4.0, an even more convenient way to specify the required
% layout is to use the \texttt{layout} and \texttt{morelayout} options. In
% fact, the use of individual control is considered more or less deprecated.
% Both of these options take a comma-separated list of the individual options
% described above (this includes the \texttt{no}\meta{option} form as well).
%
% While the \texttt{morelayout} options \emph{adds} to the current layout
% configuration, the \texttt{layout} one completely overrides it. For
% instance, knowing that by default, only the \texttt{margin} layout form is
% active, the following forms are all equivalent:
% \begin{verbatim}
% \usepackage[nomargin,inline,index]{fixme}
% \usepackage[margin=false,inline=true,index=true]{fixme}
% \usepackage[morelayout={nomargin,inline,index}]{fixme}
% \usepackage[layout={inline,index}]{fixme}
% \end{verbatim}
%
% Again, these two options are understood by the package itself, the
% \cs{fxsetup} command and also locally by every note insertion command or
% environment.
%
% \subsubsection{Inner layout}
% There might be various reasons for you to change the layout locally for one
% particular note (see section \sectionref{sec:manual:othercommonproblems} for
% some of them). As of version 4.0, one frequent reason (described below) can
% be handled automatically by \fixme.
%
% Remember that the default layout is to use margin paragraphs. Unfortunately,
% margin paragraphs are forbidden by \TeX{} in several situations, like a
% figure's caption for instance. If you try that, you will get a cryptic ``Not
% in outer par mode'' error message.
%
% \DescribeOption{innerlayout}
% The good news is that this situation can be detected automatically. As of
% version 4.0, \fixme provides an option named \texttt{innerlayout} that
% allows you to specify an alternate layout setting to use when \TeX{} is in
% \emph{inner} mode. In addition to that, \fixme automatically disables the
% \texttt{margin} and \texttt{marginclue} forms.
%
% Using \texttt{innerlayout} is not as trivial as it may seem: it
% \emph{really} is an alternate layout configuration, and as such, you can use
% any combination you like of individual options, or you can even use the
% \texttt{layout} and \texttt{morelayout} options. This means that your
% alternate layout can either \emph{add} to the existing one, or
% \emph{override} it. Here are some examples to clarify things a little. You
% should try to understand them.
% \begin{itemize}
% \item By default, the \fixme inner layout is set to just \texttt{inline}.
%   This can be simulated by the following call:
% \begin{verbatim}
% \usepackage[layout=margin,innerlayout={layout=inline}]{fixme}
% \end{verbatim}
% \item The following gives the same result, while having a different
%   semantics:
% \begin{verbatim}
% \usepackage[layout=margin,innerlayout=inline]{fixme}
% \end{verbatim}
% \item If you have set \fixme to use a safe layout globally (for instance,
%   \texttt{inline} and \texttt{index}), and you want to use the same layout
%   in inner mode, then you should provide an \emph{empty} inner layout, like
%   this:
% \begin{verbatim}
% \fxsetup{layout={inline,index},innerlayout=}
% \end{verbatim}
%   What would happen if you didn't provide the \texttt{innerlayout} option?
% \end{itemize}
%
% \subsubsection{Other common layout
%   problems\label{sec:manual:othercommonproblems}}
% This section describes some other common problems that people have
% encountered using \fixme. Although \fixme might not be directly responsible
% for them, it is still good to keep them in mind.
%
% \subsubsubsection{Footnotes and margin paragraphs in floats}
% Using footnotes in figures (and \emph{a fortiori} in a figure's caption)
% does not work in general. Although there are some workarounds out there (for
% instance, using \cs{footnotemark} and \cs{footnotetext} directly), there is
% no completely reliable solution and it is not possible to detect that
% situation automatically. Similarly, marginal paragraphs will cause problems
% in a figure (even when not in its caption) because floats can't be nested in
% \LaTeX. Usual symptoms of these situations are: a footnote not being
% typeset, compilation breakage with the ``Floats lost'' message \etc If
% you're facing this problem, you need to change your layout locally.
%
% \subsubsubsection{Marginal paragraphs showing up on the wrong page}
% You want to look at the \texttt{mparhack} package.
%
% \subsubsubsection{ACM classes compatibility}
% The ACM \textsc{Sig} classes (\texttt{acm\_proc\_article-sp} and
% \texttt{sig-alternate}) forbid the use of \cs{marginpar}, so if you use
% these classes, don't forget to choose another layout for \fixme, and also
% avoid using marginal clues.
%
% \subsection{Controlling the logging of \fixme notes}
% As well as being displayed in the document itself, all \fixme notes are
% ``logged'' in different ways: by default, simple notes are recorded in the
% log file while the others are also displayed on the terminal output during
% compilation.\par
% \DescribeOption{silent}
% \DescribeOption{nosilent}
% You have the ability to suppress logging altogether by using the
% \texttt{silent} option. This option is understood by the package itself, the
% \cs{fxsetup} macro and all note insertion commands and environments. Just as
% individual layout options, \texttt{silent} is a boolean option, so all those
% forms are possible: \texttt{silent}, equivalent to \texttt{silent=true}, and
% \texttt{nosilent}, equivalent to \texttt{silent=false} (the default).
%
% \subsection{List of \fixme's\label{sec:manual:lox}}
% \DescribeMacro{\listoffixmes}
% \fixme remembers where you put \fixme notes in a toc-like file whose
% extension is \texttt{lox}. The \cs{listoffixmes} macro generates the list of
% all \fixme notes in a manner similar to that of the ``list of figures''
% for instance. A standard layout is automatically selected for the
% \texttt{article}, \texttt{report}, \texttt{book} classes and their
% \komascript replacements. If another class is used, the \texttt{article}
% layout is selected. Also, note that if no \fixme note remain in the
% document, this macro doesn't generate an empty list, but rather stays
% silent. It also stays silent in \texttt{final} mode, regardless of the
% presence of remaining notes.
%
% \subsection{Floating \fixme notes}
% At some point, people suggested that it would be nice to have global \fixme
% notes, not related to any portion of the text in particular. Such notes
% could be general comments about the whole document, and could even be issued
% in the preamble for instance. This is what I call ``floating'' \fixme notes.
%
% Originally, I started writing a new set of commands to do just that, but
% with the flexibility that \fixme version 4 provides, I quickly realized that
% such commands were an unnecessary addition.
%
% Since floating notes are not supposed to relate to any part of the text,
% they should not be typeset anywhere in it. This is especially true if you
% want to put some of them in the document's preamble. However, even a
% preamble \fixme note can be recorded and displayed in the index or in the
% list of fixmes. And it turns out that you can specify all that with the
% layout options described in section \sectionref{sec:manual:layout}.
%
% \DescribeOption{area}
% The only slight problem that remains in the page number, which normally
% appears in the list of fixmes and in the index: if you choose to reference a
% floating \fixme note that way, the page number is likely to be completely
% meaningless. To compensate, \fixme 4 provides an option named ``area''. When
% provided, the given value will replace the page number in both the index and
% the list of fixmes. The area can be anything you like, but should remain
% quite short. By default, \texttt{area} is set the special value
% \texttt{thepage}, which as you guessed means to use the page number.
%
% Here is an example of a floating note that would typically appear in the
% document's preamble:
% \begin{verbatim}
% \usepackage{hyperref}
% \fxfatal[layout=index,area=hyperref]{Fill in PDF fields (title etc.)}
% \end{verbatim}
%
% \section{Customizing \fixme}
% \subsection{Customizing the \fixme notes layout}
% \subsubsection{Commands}
% The actual typesetting of \fixme notes is done by the commands described
% below. If you want to change their behavior, you can \cs{renewcommand}
% them.\\
% \DescribeMacro{\FXLayoutInline}
% \DescribeMacro{\FXLayoutMargin}
% \DescribeMacro{\FXLayoutFootnote}
% \marg{prefix}\marg{note}\\
% The \texttt{inline}, \texttt{margin} and \texttt{footnote} layouts have two
% parts: a ``prefix'' which depends on the note level, and the note itself.
% By default, the prefix is one of ``\fixme note:'', ``\fixme warning:'',
% ``\fixme error:''  or simply ``\fixme:'', and appears in bold. The note
% itself appears emphasized.\\
% \DescribeMacro{\FXayoutMarginCLue}
% \marg{prefix}\\
% The special \texttt{marginclue} layout only outputs the prefix mentioned
% above.\\
% \DescribeMacro{\FXLayoutIndex}
% \marg{note}\\
% All \fixme index entries appear under the ``\fixme'' key in the symbols
% section. There are 4 subcategories under this key, as many as there are note
% levels. By default, only the first 3 of them are used though (fatal errors
% do not appear under a subkey, but directly under the \fixme key). The notes
% are numbered in the index.\par
%
% \subsubsection{Environments}
% The actual typesetting of \fixme environments is done by the commands
% described below. If you want to change their behavior, you can
% \cs{renewcommand} them.\\
% \DescribeMacro{\FXEnvBegin}
% \marg{prefix}\\
% Remember that a \fixme environment's summary is typeset by the corresponding
% layout command, as describe above. By default, \fixme uses a
% \texttt{quotation} environment to typeset the longer note, and the prefix
% appears in bold.\\
% \DescribeMacro{\FXEnvEnd}
% This macro closes the \texttt{quotation} by default.
%
% \subsection{Customizing the \fixme notes logging}
% The actual logging of \fixme notes is done by the commands described
% below. If you want to change their behavior, you can \cs{renewcommand}
% them.\\
% \DescribeMacro{\FXLogNote}
% \DescribeMacro{\FXLogWarning}
% \DescribeMacro{\FXLogError}
% \DescribeMacro{\FXLogFatal}
% \marg{note}\\
% By default, simple notes are recorded in the log file only, and the others
% also appear on the terminal during compilation.
%
% \subsection{Fancy fruit salad layout}
% \DescribeOption{user}
% If, for some totally unjustified reason, you are not happy with the
% available layouts, you have the ability to define your own: a special layout
% form is accessible through the boolean \texttt{user} layout option.\\
% \DescribeMacro{\FXLayoutUser}
% \marg{prefix}\marg{note}\\
% If you plan on using it, you must then implement the formatting by
% \cs{newcommand}'ing the corresponding macro.
%
% \subsection{Internationalization}
% \DescribeOption{english}
% \DescribeOption{french}
% \DescribeOption{francais}
% \DescribeOption{spanish}
% \DescribeOption{italian}
% \DescribeOption{german}
% \DescribeOption{ngerman}
% \DescribeOption{danish}
% \DescribeOption{croatian}
% \fixme currently supports English, French, Spanish, Italian, German,
% Danish and Croatian. At any point in the document, you can select or change
% the language you want to use by passing the corresponding option to
% \cs{documentclass}, \cs{usepackage}, \cs{fxsetup} or any \fixme note
% insertion command or environment. The \texttt{french} and \texttt{francais}
% options are synonyms. The \texttt{german} and \texttt{ngerman} options are
% currently equivalent.\par If you want a finer grain on the
% language-dependent parts of \fixme, the following macros are provided and
% can be redefined.\par
% \DescribeMacro{\fxnotename}
% \DescribeMacro{\fxwarningname}
% \DescribeMacro{\fxerrorname}
% \DescribeMacro{\fxfatalname}
% \DescribeMacro{\fixmelogo}
% The \cs{fx*name} macros define the name of the four different note levels.
% They make intensive use of the macro \cs{fixmelogo} ;-)\par
% \DescribeMacro{\fixmeindexname}
% \DescribeMacro{\fxnoteindexname}
% \DescribeMacro{\fxwarningindexname}
% \DescribeMacro{\fxerrorindexname}
% \DescribeMacro{\fxfatalindexname}
% The macro \cs{fixmeindexname} defines the main \fixme index key. The other
% ones define the different index subkeys for each note level. Please note that
% an empty name for a subkey means that you don't actually want a subcategory
% (that's the case by default for fatal errors). The corresponding notes will
% then appear directly under the main \fixme key. For that reason, a non
% empty subkey must end with an exclamation mark.\par
% \DescribeMacro{\listfixmename}
% \cs{listfixmename} defines the title for the ``list of fixmes'' section.
%
% \section{\auctex support}
% \auctex is a powerful major mode for editing \TeX{} documents in
% \textsf{Emacs} or \textsf{XEmacs}. In particular, it provides automatic
% completion of macro names once they are known. \fixme supports \auctex
% by providing a style file named \texttt{fixme.el} which contains \auctex
% definitions for the relevant macros. This file should be installed in a
% place where \auctex can find it (usually in a subdirectory of your
% \LaTeX{} styles directory). Please refer to the \auctex documentation for
% more information on this.
%
% \section{History}
% \begin{itemize}
% \item[v4.0] New feature: floating notes (not specific to any portion of
%   text), suggested by Rasmus Villemoes.\\
%   New feature: alternate layout autoswitch for inner mode, suggested by Will
%   Robertson.\\
%   New feature: key/value argument syntax in the whole user interface.\\
%   New command: \cs{fxsetup}.\\
%   Homogenize the log and console messages.\\
%   Heavy internals refactoring.
% \item[v3.4] \cs{fixme}, \cs{fxerror}, \cs{fxwarning} and \cs{fxnote} are now
%   robust, thanks to Will Robertson.\\
%   Fix incompatibility with \komascript classes version of \cs{@starttoc}
%   when the lox file is inexistent, reported by Philipp Stephani.
% \item[v3.3] Document incompatibility between marginal layout and the ACM
%   SIG classes, reported by Jochen Wuttke.\\
%   Honor \texttt{twoside} option in marginal layout, suggested by Jens
%   Remus.\\
%   Support for \komascript classes version 2006/07/30 v2.95b, suggested by
%   Jens Remus.\\
%   Documentation improvements suggested by Brian van den Broek.\\
%   Fix incompatibility with \texttt{amsart} reported by Lars Madsen:
%   \cs{@starttoc} takes two arguments.\\
%   Fix bug reported by Stefan Mann: a typo in the \cs{fixme@footnotetrue}
%   macro name.
% \item[v3.2] Added the marginclue layout option which only signals a fixme in
%   the margin, withtout the actual contents.\\
%   Support for Croatian thanks to Marcel Maretic |<marcel@fsb.hr>|.\\
%   Fix incompatibility with \texttt{amsbook} reported by Claude
%   Lacoursi\`ere: \cs{@starttoc} takes two arguments.\\
%   Fix incompatibility with Beamer reported by Akim Demaille: protect
%   contents of lox file.
% \item[v3.1] Fix bug reported by Arnold Beckmann: the environments were
%   visible in final mode.
% \item[v3.0] Added environments corresponding to the note insertion
%   commands.\\
%   Added an optional first argument to the note insertion commands
%   to change the layout locally.\\
%   Fix bug reported by Akim Demaille: marginal notes could mess up the
%   document's layout by flushing it right.
% \item[v2.2] New option \texttt{silent} to suppress notes logging.\\
%   Support for Danish thanks to Kim Rud Bille |<krbi01@control.auc.dk>|.
% \item[v2.1] Use \cs{nobreakspace} instead of the tilda character. This avoids
%   conflicts with Babel in Spanish environments.\\
%   Fix bug reported by Knut Lickert: index entries were unconditionally built.
% \item[v2.0] New feature: note levels.\\
%   New feature: \fixme note counters and usage summary.\\
%   Suggestions from Kasper B. Graversen |<kbg@dkik.dk>|.\\
%   Support for Spanish thanks to Agust\'in Mart\'in |<agusmba@terra.es>|
% \item[v1.5] New appearance option: \texttt{inline}.
% \item[v1.4] Support for the \komascript classes.\\
%   Fix bug reported by Ulf Jaenicke-Roessler: the \cs{listoffixmes} command
%   didn't work when called before the first \fixme note.
% \item[v1.3] Support for Italian thanks to Riccardo Murri
%   |<murri@phc.unipi.it>|.
% \item[v1.2] Support for German thanks to Harald Harders
%   |<h.harders@tu-bs.de>|.
% \end{itemize}
%
% \StopEventually{\par Well, I think that's it. Enjoy using \fixme!
%   \vfill\hfill\small \packagecopyright{}.}
%
% \section{Implementation}
% \subsection{Preamble}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{fixme}[2009/09/02 v4.0
			Insert fixme notes in your documents]

%    \end{macrocode}
% Some required packages:
%    \begin{macrocode}
\RequirePackage{ifthen}
\RequirePackage{verbatim}
\RequirePackage{xkeyval}[2006/11/18]

%    \end{macrocode}
% \begin{macro}{\fixmelogo}
%   The \fixme logo:
%    \begin{macrocode}
\newcommand\fixmelogo{\textsf{FiXme}}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Utilities}
% \begin{macro}{\@fxcsstring}
%   \marg{name}\\
%   Stringify a control sequence name:
%    \begin{macrocode}
\newcommand*\@fxcsstring[1]{\expandafter\string\csname#1\endcsname}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxpkginfo}
%   \begin{macro}{\@fxpkgwarning}
%     \marg{msg}\\
%     Issue a \fixme package info or warning:
%    \begin{macrocode}
\newcommand\@fxpkginfo{\PackageInfo{FiXme}}
\newcommand\@fxpkgwarning{\PackageWarning{FiXme}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxpkgerror}
%   \marg{shortmsg}\marg{longmsg}\\
%   Issue a \fixme package error:
%    \begin{macrocode}
\newcommand\@fxpkgerror{\PackageError{FiXme}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{\texttt{xkeyval} related}
% \begin{macro}{\@fxdefinekey}
%   \marg{family}\marg{key}\oarg{default}\marg{function}
%    \begin{macrocode}
\newcommand\@fxdefinekey{\define@key[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxsetkeys}
%   \marg{families}\oarg{na}\marg{keys}
%    \begin{macrocode}
\newcommand\@fxsetkeys{\setkeys[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxpresetkeys}
%   \marg{families}\marg{head keys}\marg{tail keys}\\
%   Note: currently unused.
%    \begin{macrocode}
%% \newcommand\@fxpresetkeys{\presetkeys[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxvoidkeyerror}
%   \marg{key}\marg{value}\\
%   Issue a \fixme error about a void key misuse (see below):
%    \begin{macrocode}
\newcommand*\@fxvoidkeyerror[2]{%
  \@fxpkgerror{misuse of key '#1'}{%
    You have given the key '#1' the argument '#2' but it takes
    none.\MessageBreak
    Type X to quit, fix that key and re-run LaTeX.\MessageBreak}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefinevoidkey}
%   \marg{family}\marg{name}\marg{func}\\
%   A \fixme ``void key'' is an \texttt{xkeyval} key that doesn't expect any
%   argument.
%    \begin{macrocode}
\newcommand*\@fxdefinevoidkey[3]{%
  \define@key[fx]{#1}{#2}[]{%
    \ifthenelse{\equal{##1}{}}{%
      #3}{%
      \@fxvoidkeyerror{#2}{##1}}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefineboolkey}
%   \oarg{func}\marg{family}\marg{name}\\
%   A \fixme ``boolean key'' is like an \texttt{xkeyval} one, with the
%   addition that for every such \texttt{key}, there is a \texttt{nokey} void
%   key counterpart.
%    \begin{macrocode}
\newcommand*\@fxdefineboolkey[3][]{%
  \define@boolkey[fx]{#2}{#3}[true]{#1}
  \@fxdefinevoidkey{#2}{no#3}{\@nameuse{fx@#2@#3}{false}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdeclarecmdkey}
%   \marg{family}\oarg{mp}\marg{key}\oarg{default}\marg{function}\\
%    \begin{macrocode}
\newcommand\@fxdefinecmdkey{\define@cmdkey[fx]}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Preliminary stuff}
% \begin{option}{area}
%   A \fixme note's ``area'' may replace the page number in the list of
%   fixmes or in the index (see sections \sectionref{sec:code:contentsline}
%   and \sectionref{sec:code:contentslinelayout}).
%    \begin{macrocode}
\@fxdefinecmdkey{lox}{area}{}
%    \end{macrocode}
% \end{option}
%
% \subsection{List macros}
% \subsubsection{Contents lines\label{sec:code:contentsline}}
% \begin{macro}{\l@fixme}
%   We use the same layout as for the list of figures.
%    \begin{macrocode}
\let\l@fixme\l@figure
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdottedtocline}
%   \marg{tocdepth}\marg{indent}\marg{numwidth}\marg{contents}\marg{location}\\
%   This macro is copied almost verbatim from \LaTeX's core. The intent is
%   to do a similar layout, but replacing the last argument, normally a page
%   number, by arbitrary text. The original macro defines a restricted width
%   to typeset the page number which is much too short for us, so we just let
%   the \meta{location} text take all the space it needs.
%    \begin{macrocode}
\newcommand*\@fxdottedtocline[5]{%
  \ifnum #1>\c@tocdepth \else
    \vskip \z@ \@plus.2\p@
    {\leftskip #2\relax \rightskip \@tocrmarg \parfillskip -\rightskip
     \parindent #2\relax\@afterindenttrue
     \interlinepenalty\@M
     \leavevmode
     \@tempdima #3\relax
     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
     {#4}\nobreak
     \leaders\hbox{$\m@th
	\mkern \@dotsep mu\hbox{.}\mkern \@dotsep
	mu$}\hfill
     \nobreak
     #5\par}%
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fxcontentsline}
%   \marg{contents}\marg{area}\\
%   Similar to \LaTeX's \cs{contentsline} macro, but temporarily bind
%   \cs{@dottedtocline} to our own version. The nice thing about this
%   implementation is that we can still use \cs{l@fixme} (remember that it is
%   bound to \cs{l@figure}) without exactly knowing what its definition is.
%   Note that this macro is at the user level because \cs{contentsline} is,
%   but it is not currently documented in the user manual.
%    \begin{macrocode}
\newcommand*\fxcontentsline[2]{%
  \begingroup%
  \let\@dottedtocline\@fxdottedtocline%
  \l@fixme{#1}{#2}%
  \endgroup}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fxaddcontentsline}
%   \marg{contents}\\
%   Wrapper around \LaTeX's \cs{addcontentsline} macro to handle the
%   \texttt{area} option. If a specific area is provided, we can't use the
%   normal \cs{addcontentsline} macro for reasons explained above, so we use
%   our own version of \cs{contentsline} instead. Note that this macro is at
%   the user level because \cs{addcontentsline} is, but it is not currently
%   documented in the user manual.
%    \begin{macrocode}
\newcommand*\fxaddcontentsline[1]{%
  \ifthenelse{\equal{\cmdfx@lox@area}{thepage}}{%
    \addcontentsline{lox}{fixme}{#1}}{%
    \addtocontents{lox}{\protect\fxcontentsline{#1}{\cmdfx@lox@area}}}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{List title}
% \begin{macro}{\listfixmename}
%   In order to redefine the list title, users have to call \cs{renewcommand}.
%   I don't like this much: it would be cleaner to provide a real command
%   that redefines the title internally. However, I'll stick with the
%   current scheme because it is consistent with the rest of \LaTeX's lists.
%    \begin{macrocode}
\newcommand\listfixmename{}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{List headers}
% Lists are output in a document class dependant fashion. Classes
% currently recognized are \texttt{article}, \texttt{report},
% \texttt{book} and their \komascript replacements.
% \subsubsubsection{\texttt{article} version}
% \begin{macro}{\@lox@prtc@article}
%   \begin{macro}{\@lox@psttc@article}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@article{%
  \section*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}}
\let\@lox@psttc@article\relax

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{report} version}
% \begin{macro}{\@lox@prtc@report}
%   \begin{macro}{\@lox@psttc@report}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@report{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}}
\newcommand\@lox@psttc@report{\if@restonecol\twocolumn\fi}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{book} version}
% \begin{macro}{\@lox@prtc@book}
%   \begin{macro}{\@lox@psttc@book}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@book{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}}
\newcommand\@lox@psttc@book{\if@restonecol\twocolumn\fi}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
%
% The code below (version 3.3) mimics \komascript version 2006/07/30 v2.95b.
% Older versions (using chapter*) are no longer supported because it is
% simpler that way, but if some people complain, I'll  have to conditionalize
% on the \komascript version, which would be a \textsc{pita}.
% \begin{macro}{\lox@heading}
%   \mbox{}
%    \begin{macrocode}
\newcommand\lox@heading{\float@listhead{\listfixmename}}

%    \end{macrocode}
%  \end{macro}
%  \subsubsubsection{\texttt{scrartcl} version}
%  \begin{macro}{\@lox@prtc@scrartcl}
%    \begin{macro}{\@lox@psttc@scrartcl}
%      \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@scrartcl{%
  \begingroup%
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative}
\let\@lox@psttc@scrartcl\endgroup

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{scrreprt} version}
% \begin{macro}{\@lox@prtc@scrreprt}
%   \begin{macro}{\@lox@psttc@scrreprt}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@scrreprt{%
  \begingroup%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative}
\newcommand\@lox@psttc@scrreprt{%
    \if@restonecol\twocolumn\fi
  \endgroup}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{scrbook} version}
% \begin{macro}{\@lox@prtc@scrbook}
%   \begin{macro}{\@lox@psttc@scrbook}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@scrbook{%
  \begingroup%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative}
\newcommand\@lox@psttc@scrbook{%
    \if@restonecol\twocolumn\fi
  \endgroup}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
%
% \subsubsection{Generic implementation}
% \begin{macro}{\lox@final}
%   \begin{macro}{\lox@draft}
%     In order to prevent the List of Fixme's heading from being generated
%     when there are no \fixme notes, a test on the existence of the
%     \texttt{lox} file is performed. There's a slight bug left however:
%     after removing the last fixme note, one ends up with an empty
%     \texttt{lox} file, so the heading still appears. Previously, this
%     was done by checking if some \fixme notes were given, but that was
%     buggy: the List of Fixme's could not appear before the first fixme
%     note\ldots I should try to detect whether the file is empty.
%    \begin{macrocode}
\let\lox@final\relax
\newcommand\lox@draft{%
  \IfFileExists{\jobname .lox}{%
    \@lox@prtc%
    \@starttoc{lox}%
    \@lox@psttc}{%
    \@starttoc{lox}}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\lox@draft@ams}
%   The \texttt{amsbook} and \texttt{amsart} classes have the very ugly idea
%   of redefining the \cs{@starttoc} command to take two arguments. Therefore,
%   I need to provide a specific version of the \cs{listoffixmes} macro:
%    \begin{macrocode}
\newcommand\lox@draft@ams{\@starttoc{lox}\listfixmename}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Layout}
% \begin{macro}{\@fxsetlayoutkeys}
%   \marg{keys}\\
%   This macro would probably be overkill if we did not need to
%   \cs{expandafter} it at some point (see section
%   \sectionref{sec:code:layoutdispatch}).
%    \begin{macrocode}
\newcommand\@fxsetlayoutkeys{\@fxsetkeys{layout}}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Layout creation}
% \begin{macro}{\@fxlayouts}
%   Maintains the list of available layouts. The order in which we add the
%   built-in layouts is important: we start with the footnote layout, so that
%   it is sticked properly to the preceding text if active. Next we handle
%   marginal layouts so that they are also close to the text to fix.
%    \begin{macrocode}
\newcommand*\@fxlayouts{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\FXRegisterLayout}
%   \oarg{boolfunc}\marg{name}\marg{funcname}\\
%   Register a new layout with \fixme. This currently involves creating the
%   boolean layout option with an optional function argument, \cs{let}'ing the
%   translation macro to the actual layout macro, and updating the layout
%   list.
%    \begin{macrocode}
\newcommand*\FXRegisterLayout[3][]{%
  \@fxdefineboolkey[#1]{layout}{#2}%
  \expandafter\let\csname @fx@layout@#2\endcsname#3%
  \ifx\@fxlayouts\empty%
    \g@addto@macro\@fxlayouts{#2}%
  \else%
    \g@addto@macro\@fxlayouts{,#2}%
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Built-in layouts}
% \subsubsubsection{Footnote}
% \begin{macro}{\FXLayoutFootnote}
%   \begin{option}{footnote}
%     \begin{macro}{\@fx@layout@footnote}
%       \marg{type}\marg{author}\marg{note}
%    \begin{macrocode}
\newcommand*\FXLayoutFootnote[3]{\footnote{#2 \@nameuse{fx#1name}: #3}}
\FXRegisterLayout{footnote}{\FXLayoutFootnote}
%    \end{macrocode}
%     \end{macro}
%   \end{option}
% \end{macro}
%
% \subsubsubsection{Margin}
% \begin{macro}{\FXLayoutMargin}
%   \begin{option}{margin}
%     \begin{macro}{\@fx@layout@margin}
%       \marg{type}\marg{author}\marg{note}\\
%    \begin{macrocode}
\newcommand*\FXLayoutMargin[3]{%
  \marginpar[\footnotesize\raggedleft#2 \@nameuse{fx#1name}: #3]{%
    \footnotesize\raggedright#2 \@nameuse{fx#1name}: #3}}
\FXRegisterLayout[%
  \ifthenelse{\boolean{fx@layout@margin}\and\boolean{fx@layout@marginclue}}{%
    \@fxpkgwarning{%
      marginal notes requested;\MessageBreak
      turning marginal clues off}%
    \fx@layout@marginclue{false}}]{%
    margin}{\FXLayoutMargin}
%    \end{macrocode}
%     \end{macro}
%   \end{option}
% \end{macro}
%
% \subsubsubsection{Margin clue}
% \begin{macro}{\FXLayoutMarginCLue}
%   \begin{option}{marginclue}
%     \begin{macro}{\@fx@layout@marginclue}
%       \marg{type}\marg{author}\marg{note}
%    \begin{macrocode}
\newcommand*\FXLayoutMarginClue[3]{%
  \marginpar[\footnotesize\raggedleft#2 \@nameuse{fx#1name}!]{%
    \footnotesize\raggedright#2 \@nameuse{fx#1name}!}}
\FXRegisterLayout[%
  \ifthenelse{\boolean{fx@layout@marginclue}\and\boolean{fx@layout@margin}}{%
    \@fxpkgwarning{%
      marginal clues requested;\MessageBreak
      turning marginal notes off}%
    \fx@layout@margin{false}}]{%
    marginclue}{\FXLayoutMarginClue}
%    \end{macrocode}
%     \end{macro}
%   \end{option}
% \end{macro}
%
% \subsubsubsection{Inline}
% \begin{macro}{\FXLayoutInline}
%   \begin{option}{inline}
%     \begin{macro}{\@fx@layout@inline}
%       \marg{type}\marg{author}\marg{note}
%    \begin{macrocode}
\newcommand*\FXLayoutInline[3]{#2 \@nameuse{fx#1name}: #3}
\FXRegisterLayout{inline}{\FXLayoutInline}
%    \end{macrocode}
%     \end{macro}
%   \end{option}
% \end{macro}
%
% \subsubsubsection{Index}
% \begin{macro}{\fixmeindexname}
%   The comment about \cs{listfixmename} applies to \cs{fixmeindexname} as
%   well.
%    \begin{macrocode}
\newcommand\fixmeindexname{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@wrindex}
%   \marg{contents}\\
%   A replacement for \LaTeX's standard \cs{@wrindex} command to deal with the
%   \texttt{area} option. When given, it is supposed to replace the page
%   number, just as in the list of fixmes.
%    \begin{macrocode}
\def\@wrindex#1{%
  \ifthenelse{\equal{\cmdfx@lox@area}{thepage}}{%
    \protected@write\@indexfile{}{\string\indexentry{#1}{\thepage}}}{%
    \protected@write\@indexfile{}{\string\indexentry{#1}{\cmdfx@lox@area}}}
  \endgroup
  \@esphack}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fxnotesubidx}
%   \begin{macro}{\fxwarningsubidx}
%     \begin{macro}{\fxerrorsubidx}
%       \begin{macro}{\fxfatalsubidx}
%    \begin{macrocode}
\newcommand*\fxnotesubidx{**a}
\newcommand*\fxwarningsubidx{**b}
\newcommand*\fxerrorsubidx{**c}
\newcommand*\fxfatalsubidx{}
%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
% \begin{macro}{\FXLayoutIndex}
%   \begin{option}{index}
%     \begin{macro}{\@fx@layout@index}
%       \marg{type}\marg{author}\marg{note}
%    \begin{macrocode}
\newcommand*\FXLayoutIndex[3]{%
  \index{***@\fixmeindexname:%
    !\@nameuse{fx#1subidx}@\@nameuse{fx#1sname}:%
    !\@nameuse{thefx#1count}: #3}}
\FXRegisterLayout{index}{\FXLayoutIndex}
%    \end{macrocode}
%     \end{macro}
%   \end{option}
% \end{macro}
%
% \subsubsubsection{Contents line\label{sec:code:contentslinelayout}}
% \begin{macro}{\FXLayoutContentsLine}
%   \marg{type}\marg{author}\marg{note}\\
%   This one is not registered like the others because it is always active and
%   used explicitely by the \texttt{lox} code.
%    \begin{macrocode}
\newcommand*\FXLayoutContentsLine[3]{%
  \fxaddcontentsline{\@nameuse{fx#1name}: #3}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Layout control}
% \begin{option}{innerlayout}
%   The alternate inner mode layout:
%    \begin{macrocode}
\@fxdefinecmdkey{layout}{innerlayout}{}
%    \end{macrocode}
% \end{option}
% \begin{option}{morelayout}
%   The \texttt{morelayout} option adds to the existing layout configuration.
%   The implementation is trivial, as it simply boils down to calling
%   \cs{setkeys} on its argument. There are several advantages in doing this.
%   \begin{enumerate}
%   \item It is possible to disable a layout by using the
%     \texttt{no}\meta{layout} form. For example,
%     |morelayout={inline,nomargin}| will work.
%   \item A wrong layout name (for instance, misspelled) will trigger an
%   \texttt{xkeyval} error.
%   \end{enumerate}
%    \begin{macrocode}
\@fxdefinekey{layout}{morelayout}{\@fxsetlayoutkeys{#1}}
%    \end{macrocode}
% \end{option}
% \begin{option}{layout}
%   The \texttt{layout} option lets the user specify exactly which ones she
%   wants to use. Not very difficult to implement either: it works by first
%   deactivating all layouts, and then activating the provided ones as before.
%   Note that the use of the \texttt{no}\meta{layout} form is valid but has no
%   effect.
%    \begin{macrocode}
\@fxdefinekey{layout}{layout}{%
  \@for\@fxlt:=\@fxlayouts\do{\@nameuse{fx@layout@\@fxlt}{false}}%
  \@fxsetlayoutkeys{#1}}
%    \end{macrocode}
% \end{option}
%
% \subsection{Logging}
% \subsubsection{Logging macros}
% \begin{macro}{\FXLogNote}
%   \begin{macro}{\FXLogWarning}
%     \begin{macro}{\FXLogerror}
%       \begin{macro}{\FXLogFatal}
%         \marg{msg}\\
%         Logging includes both log file and terminal output.
%    \begin{macrocode}
\newcommand*\FXLogNote[1]{%
  \GenericInfo{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Note: '#1'}}
\newcommand*\FXLogWarning[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Warning: '#1'}}
\newcommand*\FXLogError[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Error: '#1'}}
\newcommand*\FXLogFatal[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Fatal Error: '#1'}}

%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxlogcs@note}
%   \begin{macro}{\@fxlogcs@warning}
%     \begin{macro}{\@fxlogcs@fatal}
%       In order for the generic note dispatcher to be able to call the
%       logging macros (see section \sectionref{sec:code:nonfatalnotes}), we
%       need an easier translation mechanism from the note type to the actual
%       command name. This, however, is unnecessary for fatal notes because
%       they are implemented in a specialized way (see section
%       \sectionref{sec:code:fatalnotes}).
%    \begin{macrocode}
\let\@fxlogcs@note\FXLogNote
\let\@fxlogcs@warning\FXLogWarning
\let\@fxlogcs@error\FXLogError

%    \end{macrocode}
%    \end{macro}
%  \end{macro}
% \end{macro}
%
% \subsubsection{Logging options}
% \begin{option}{silent}
%   \begin{option}{nosilent}
%     \mbox{}
%    \begin{macrocode}
\@fxdefineboolkey{log}{silent}

%    \end{macrocode}
%   \end{option}
% \end{option}
%
% \subsection{\fixme notes}
% \subsubsection{Note parameters}
% \begin{counter}{fixmecount}
%   \texttt{fixmecount} maintains the total of all notes, regardless of their
%   level.
%    \begin{macrocode}
\newcounter{fixmecount}

%    \end{macrocode}
% \end{counter}
% \begin{macro}{\@fxnoteparameters}
%   \marg{type}\\
%   The following macro creates all required note parameters. This currently
%   comprises the note counter, name and index name.
%    \begin{macrocode}
\newcommand*\@fxnoteparameters[1]{%
  \newcounter{fx#1count}
  \expandafter\newcommand\expandafter*\csname fx#1name\endcsname{}
  \expandafter\newcommand\expandafter*\csname fx#1sname\endcsname{}}

%    \end{macrocode}
% \end{macro}
% \begin{counter}{fx*count}
%     \begin{macro}{\fx*name}
%       \begin{macro}{\fx*sname}
%           And we use it for all note types:
%    \begin{macrocode}
\@fxnoteparameters{note}
\@fxnoteparameters{warning}
\@fxnoteparameters{error}
\@fxnoteparameters{fatal}

%    \end{macrocode}
%     \end{macro}
%   \end{macro}
% \end{counter}
%
% \subsubsection{Layout dispatch\label{sec:code:layoutdispatch}}
% \begin{macro}{\@fxhandleinnermode}
%   Handles the case where \TeX{} is in inner mode. We use the alternate
%   layout provided by the \texttt{innerlayout} option, and we make sure to
%   disable both the \texttt{margin} and \texttt{marginclue} layout forms.
%   This is done by appending \texttt{nomargin} and \texttt{nomarginclue} to
%   the inner layout value (this also renders nasty user settings harmless).
%   Before that, we provide some informative message if risky layout forms
%   were active.
%    \begin{macrocode}
\newcommand\@fxhandleinnermode{%
  \ifinner%
    \ifthenelse{\boolean{fx@layout@margin}}{%
      \@fxpkginfo{%
	inner mode detected;\MessageBreak
	turning margin layout form off}}{%
      \ifthenelse{\boolean{fx@layout@marginclue}}{%
	\@fxpkginfo{%
	  inner mode detected;\MessageBreak
	  turning marginclue layout form off}}{}}%
    \expandafter\@fxsetlayoutkeys\expandafter{%
      \cmdfx@layout@innerlayout,nomargin,nomarginclue}%
  \fi}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxlayout}
%   \marg{type}\marg{note}\\
%   Dispatch all active layouts.
%    \begin{macrocode}
\newcommand*\@fxlayout[2]{%
  \@fxhandleinnermode%
  \@for\@fxlt:=\@fxlayouts\do{%
    \@nameuse{iffx@layout@\@fxlt}%
      \@nameuse{@fx@layout@\@fxlt}{#1}{\fixmelogo}{#2}%
    \fi}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Non fatal notes\label{sec:code:nonfatalnotes}}
% The generic mechanism below applies only to \fixme notes, warnings and
% errors. Fatal notes are handled in the next section.
%
% \subsubsubsection{Standard notes}
% \begin{macro}{\@@fxnote@final}
%   \begin{macro}{\@@fxnote@draft}
%     \marg{type}\marg{note}
%    \begin{macrocode}
\newcommand*\@@fxnote@final[2]{%
  \FXLayoutContentsLine{#1}{\fixmelogo}{#2}%
  \iffx@log@silent\else\@nameuse{@fxlogcs@#1}{#2}\fi}
\newcommand*\@@fxnote@draft[2]{%
  \@fxlayout{#1}{#2}%
  \@@fxnote@final{#1}{#2}}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \begin{macro}{\@fxnote}
%   \marg{type}\oarg{options}\marg{note}
%    \begin{macrocode}
\def\@fxnote#1[#2]#3{%
  \begingroup%
  \@fxsetkeys{ltx,lang,lox,log,layout}{#2}%
  \stepcounter{fixmecount}%
  \stepcounter{fx#1count}%
  \@@fxnote{#1}{#3}%
  \endgroup}

%    \end{macrocode}
% \end{macro}
%
% \subsubsubsection{Starred versions}
% \begin{macro}{\@fxsnote}
%   \marg{type}\oarg{options}\marg{note}\marg{text}
%    \begin{macrocode}
\long\def\@fxsnote#1[#2]#3#4{%
  #4\@fxnote{#1}[#2]{#3}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsubsection{User-level interface}
% \begin{macro}{\fxnote}
%   \begin{macro}{\fxwarning}
%     \begin{macro}{\fxerror}
%       \oarg{options}\marg{note}
%    \begin{macrocode}
\DeclareRobustCommand\fxnote{%
  \@ifstar{%
    \@ifnextchar[%]
    {\@fxsnote{note}}{\@fxsnote{note}[]}}{%
    \@ifnextchar[%]
    {\@fxnote{note}}{\@fxnote{note}[]}}}
\DeclareRobustCommand\fxwarning{%
  \@ifstar{%
    \@ifnextchar[%]
    {\@fxsnote{warning}}{\@fxsnote{warning}[]}}{%
    \@ifnextchar[%]
    {\@fxnote{warning}}{\@fxnote{warning}[]}}}
\DeclareRobustCommand\fxerror{%
  \@ifstar{%
    \@ifnextchar[%]
    {\@fxsnote{error}}{\@fxsnote{error}[]}}{%
    \@ifnextchar[%]
    {\@fxnote{error}}{\@fxnote{error}[]}}}

%    \end{macrocode}
%     \end{macro}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Fatal notes}
% Fatal notes can't be handled in exactly the same generic way as the others
% because their behavior differs in \texttt{final} mode.\par
%
% \subsubsubsection{Low-level implementation\label{sec:code:fatalnotes}}
% \begin{macro}{\@@fxfatal@final}
%   \begin{macro}{\@@fxfatal@draft}
%     \marg{note}\\
%    \begin{macrocode}
\newcommand*\@@fxfatal@final[1]{%
  \@fxpkgerror{'#1' fatal error left in final version}{%
    You are currently processing in final mode,\MessageBreak
    but you still have some FiXme fatal errors left behind.\MessageBreak
    Type X to quit, fix your document (or switch back to draft
    mode),\MessageBreak
    and rerun LaTeX.}}
\newcommand*\@@fxfatal@draft[1]{%
  \@fxlayout{fatal}{#1}%
  \FXLayoutContentsLine{fatal}{\fixmelogo}{#1}%
  \iffx@log@silent\else\FXLogFatal{#1}\fi}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxfatal}
%   \oarg{options}\marg{note}
%    \begin{macrocode}
\newcommand*\@fxfatal[2][]{%
  \begingroup%
  \@fxsetkeys{ltx,lang,lox,log,layout}{#1}%
  \stepcounter{fixmecount}%
  \stepcounter{fxfatalcount}%
  \@@fxfatal{#2}%
  \endgroup}

%    \end{macrocode}
% \end{macro}
%
% \subsubsubsection{User-level interface}
% \begin{macro}{\fxfatal}
%   \oarg{options}\marg{note}
%    \begin{macrocode}
\DeclareRobustCommand\fxfatal{%
  \@ifstar{%
    \@ifnextchar[%]
    {\@fxsfatal}{\@fxsfatal[]}}{%
    \@ifnextchar[%]
    {\@fxfatal}{\@fxfatal[]}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fixme}
%   \oarg{options}\marg{note}
%   Deprecate \cs{fixme}:
%    \begin{macrocode}
\DeclareRobustCommand\fixme{%
  \@fxpkgwarning{\string\fixme\space is deprecated;\MessageBreak
    please use \string\fxfatal\space instead}%
  \fxfatal}
%    \end{macrocode}
% \end{macro}
%
% \subsection{\fixme environments}
% \subsubsection{Layout macros}
% \begin{macro}{\FXEnvBegin}
%   \marg{type}\marg{author}
%    \begin{macrocode}
\newcommand*\FXEnvBegin[2]{\begin{quotation}#2 \@nameuse{fx#1name}: }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\FXEnvEnd}
%   \mbox{}
%    \begin{macrocode}
\newcommand\FXEnvEnd{\end{quotation}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{\texttt{final} and \texttt{draft} versions}
% \fixme environments are always laid out inline. The environment's summary
% is laid out by the corresponding macro, but the \texttt{inline} layout is
% disabled (this is as easy as appending \texttt{noinline} at the end of the
% options list). In \texttt{final} mode, \texttt{verbatim}'s \texttt{comment}
% environment is used to suppress output. Note that contrary to the macro
% version, we don't need to define the \texttt{fxfatal} environment in a
% specialized way because the fatal error will be triggered by the call to
% \cs{fxfatal} anyway.\\
% \begin{macro}{\@fxenvbegin@final}
%   \begin{macro}{\@fxenvbegin@draft}
%     \marg{type}\marg{options}\marg{summary}
%    \begin{macrocode}
\newcommand*\@fxenvbegin@final[3]{%
  \@nameuse{fx#1}[#2]{#3}%
  \comment}
\newcommand*\@fxenvbegin@draft[3]{%
  \@nameuse{fx#1}[#2,noinline]{#3}%
  \FXEnvBegin{#1}{\fixmelogo}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxenvend@final}
%   \begin{macro}{\@fxenvend@draft}
%     \mbox{}
%    \begin{macrocode}
\let\@fxenvend@final\endcomment
\let\@fxenvend@draft\FXEnvEnd

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{User-level environments}
% \begin{macro}{\@fxdefineenvironment}
%   \marg{type}\\
%   This command defines \fixme environments in a generic way:
%    \begin{macrocode}
\newcommand*\@fxdefineenvironment[1]{%
  \newenvironment{anfx#1}[2][]{\@fxenvbegin{#1}{##1}{##2}}{\@fxenvend}}

%    \end{macrocode}
% \end{macro}
% \begin{environment}{anfxnote}
%   \begin{environment}{anfxwarning}
%     \begin{environment}{anfxerror}
%       \begin{environment}{anfxfatal}
%         And we use it to create the user level interface:
%    \begin{macrocode}
\@fxdefineenvironment{note}
\@fxdefineenvironment{warning}
\@fxdefineenvironment{error}
\@fxdefineenvironment{fatal}

%    \end{macrocode}
%       \end{environment}
%     \end{environment}
%   \end{environment}
% \end{environment}
% \begin{environment}{afixme}
%   Deprecate the \texttt{afixme} environment:
%    \begin{macrocode}
\def\afixme{%
  \@fxpkgwarning{The 'afixme' environment is deprecated;\MessageBreak
    please use 'anfxfatal' instead}%
  \anfxfatal}
\let\endafixme\endanfxfatal
%    \end{macrocode}
% \end{environment}
%
% \subsection{Internationalization}
% \begin{option}{english}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{english}{%
  \renewcommand*\fxnotename{Note}%
  \renewcommand*\fxwarningname{Warning}%
  \renewcommand*\fxerrorname{Error}%
  \renewcommand*\fxfatalname{Fatal}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnotesname{Notes}%
  \renewcommand*\fxwarningsname{Warnings}%
  \renewcommand*\fxerrorsname{Errors}%
  \renewcommand*\fxfatalsname{}%
  \renewcommand*{\listfixmename}{List of Corrections}}
%    \end{macrocode}
% \end{option}
% \begin{option}{french}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{french}{%
  \renewcommand*\fxnotename{Note}%
  \renewcommand*\fxwarningname{Attention}%
  \renewcommand*\fxerrorname{Erreur}%
  \renewcommand*\fxfatalname{Fatal}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnotesname{Notes}%
  \renewcommand*\fxwarningsname{Avertissements}%
  \renewcommand*\fxerrorsname{Erreurs}%
  \renewcommand*\fxfatalsname{}%
  \renewcommand*{\listfixmename}{Liste des Corrections}}
%    \end{macrocode}
% \end{option}
% \begin{option}{francais}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{francais}{\@fxsetkeys{lang}{french}}
%    \end{macrocode}
% \end{option}
% \begin{option}{spanish}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{spanish}{%
  \renewcommand*\fxnotename{Nota}%
  \renewcommand*\fxwarningname{Aviso}%
  \renewcommand*\fxerrorname{Error}%
  \renewcommand*\fxfatalname{FIXME}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnotesname{Notas}%
  \renewcommand*\fxwarningsname{Avisos}%
  \renewcommand*\fxerrorsname{Errores}%
  \renewcommand*\fxfatalsname{}%
  \renewcommand*{\listfixmename}{Lista de Correcciones}}
%    \end{macrocode}
% \end{option}
% \begin{option}{italian}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{italian}{%
  \renewcommand*\fxnotename{Nota}%
  \renewcommand*\fxwarningname{Avviso}%
  \renewcommand*\fxerrorname{Errore}%
  \renewcommand*\fxfatalname{FIXME}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnotesname{Note}%
  \renewcommand*\fxwarningsname{Avvisi}%
  \renewcommand*\fxerrorsname{Errori}%
  \renewcommand*\fxfatalsname{}%
  \renewcommand*{\listfixmename}{Corrigenda}}
%    \end{macrocode}
% \end{option}
% \begin{option}{german}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{german}{%
  \renewcommand*\fxnotename{Anm}%
  \renewcommand*\fxwarningname{Warnung}%
  \renewcommand*\fxerrorname{Fehler}%
  \renewcommand*\fxfatalname{FIXME}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnotesname{Anmerkungen}%
  \renewcommand*\fxwarningsname{Warnungen}%
  \renewcommand*\fxerrorsname{Fehler}%
  \renewcommand*\fxfatalsname{}%
  \renewcommand*{\listfixmename}{Verzeichnis der Korrekturen}}
%    \end{macrocode}
% \end{option}
% \begin{option}{ngerman}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{ngerman}{\@fxsetkeys{lang}{german}}
%    \end{macrocode}
% \end{option}
% \begin{option}{danish}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{danish}{%
  \renewcommand*\fxnotename{Note}%
  \renewcommand*\fxwarningname{Advarsel}%
  \renewcommand*\fxerrorname{Fejl}%
  \renewcommand*\fxfatalname{FIXME}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnotesname{Noter}%
  \renewcommand*\fxwarningsname{Advarsler}%
  \renewcommand*\fxerrorsname{Fejl}%
  \renewcommand*\fxfatalsname{}%
  \renewcommand*{\listfixmename}{Rettelser}}
%    \end{macrocode}
% \end{option}
% \begin{option}{croatian}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{croatian}{%
  \renewcommand*\fxnotename{Poruka}%
  \renewcommand*\fxwarningname{Upozorenje}%
  \renewcommand*\fxerrorname{Gre\v ska}%
  \renewcommand*\fxfatalname{FIXME}%
  \renewcommand*\fixmeindexname{\fixmelogo}%
  \renewcommand*\fxnotesname{Poruke}%
  \renewcommand*\fxwarningsname{Upozorenja}%
  \renewcommand*\fxerrorsname{Greske}%
  \renewcommand*\fxfatalsname{}%
  \renewcommand*{\listfixmename}{Popis korekcija}}

%    \end{macrocode}
% \end{option}
%
% \subsection{Document status processing}
% \begin{macro}{\@@fxnote}
%   \begin{macro}{\@@fxfatal}
%     \begin{macro}{\@fxenvbegin}
%       \begin{macro}{\@fxenvend}
%         \begin{macro}{\listoffixmes}
%           \begin{option}{final}
%             \begin{option}{draft}
%               Select draft or final versions of internal macros, some of
%               them also depending on the document class:
%    \begin{macrocode}
\@fxdefinevoidkey{ltx}{final}{%
  \let\@@fxnote\@@fxnote@final%
  \let\@@fxfatal\@@fxfatal@final%
  \let\@fxenvbegin\@fxenvbegin@final%
  \let\@fxenvend\@fxenvend@final%
  \let\listoffixmes\lox@final}
\@fxdefinevoidkey{ltx}{draft}{%
  \let\@@fxnote\@@fxnote@draft%
  \let\@@fxfatal\@@fxfatal@draft%
  \let\@fxenvbegin\@fxenvbegin@draft%
  \let\@fxenvend\@fxenvend@draft%
  \let\listoffixmes\lox@draft}

%    \end{macrocode}
%             \end{option}
%           \end{option}
%         \end{macro}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%
% \subsection{Finale}
% \subsubsection{Class-dependent settings}
% Currently, our class dependencies only matter in draft mode, so one could
% argue that it is not optimal to handle this here. However, it would be
% incorrect to do it in the \texttt{draft} option code because this option can
% be switched at any point in the document (remember that it is understood
% even by the note insertion commands and environments) and the stuff below
% should only be executed once. Besides, \cs{@ifclassloaded} is an
% \cs{@onlypreamble} macro\ldots
%
% Note that as documented, marginal notes are incompatible with the ACM SIG
% classes. Initially, I thought I would detect these classes and issue an
% error if marginal layout (or clue) is active. However, I changed my mind,
% because nothing prevents somebody to write a new class on top of these ones
% and authorize \cs{marginpar} back again. Normally these classes issue an
% error if \cs{marginpar} is used. However, the 2.3 / June 2007 versions are
% buggy and the error actually triggers a stack overflow in \LaTeX\ldots
% (patch submitted). Oh boy, these classes are a mess.
% \begin{macro}{\@lox@prtc}
%   \begin{macro}{\@lox@psttc}
%    \begin{macrocode}
\@ifclassloaded{article}{%
  \let\@lox@prtc\@lox@prtc@article%
  \let\@lox@psttc\@lox@psttc@article}{%
  \@ifclassloaded{report}{%
    \let\@lox@prtc\@lox@prtc@report%
    \let\@lox@psttc\@lox@psttc@report}{%
    \@ifclassloaded{book}{%
      \let\@lox@prtc\@lox@prtc@book%
      \let\@lox@psttc\@lox@psttc@book}{%
      \@ifclassloaded{scrartcl}{%
	\let\@lox@prtc\@lox@prtc@scrartcl%
	\let\@lox@psttc\@lox@psttc@scrartcl}{%
	\@ifclassloaded{scrreprt}{%
	  \let\@lox@prtc\@lox@prtc@scrreprt%
	  \let\@lox@psttc\@lox@psttc@scrreprt}{%
	  \@ifclassloaded{scrbook}{%
	    \let\@lox@prtc\@lox@prtc@scrbook%
	    \let\@lox@psttc\@lox@psttc@scrbook}{%
	    \@ifclassloaded{amsbook}{%
	      \let\lox@draft\lox@draft@ams}{%
	      \@ifclassloaded{amsart}{%
		\let\lox@draft\lox@draft@ams}{%
		%% Use the article layout by default.
		\let\@lox@prtc\@lox@prtc@article%
		\let\@lox@psttc\@lox@psttc@article}}}}}}}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Options Processing}
% Put us in \texttt{english} and \texttt{final} mode, set default area to
% \texttt{thepage}, enable marginal notes and set inner layout to
% \texttt{inline}.
%    \begin{macrocode}
\ExecuteOptionsX[fx]<ltx,lang,lox,log,layout>{%
  final,%
  english,%
  nosilent,%
  area=thepage,%
  layout=margin,%
  innerlayout={layout=inline}}
%    \end{macrocode}
% Be sure to process the \texttt{lox} family after the \texttt{lang} one, as
% the default area might get a different name from a user option. We don't
% want to override it with our language setting.
%    \begin{macrocode}
\ProcessOptionsX*[fx]<ltx,lang,lox,log,layout>

%    \end{macrocode}
%
% \subsubsection{The \cs{fxsetup} macro}
% \begin{macro}{\fxsetup}
%   \marg{options}\\
%   The inevitable setup macro, extremely impressive yet as trivial as can be
%   with the \texttt{xkeyval} package\ldots
%    \begin{macrocode}
\newcommand*\fxsetup[1]{\@fxsetkeys{ltx,lang,lox,log,layout}{#1}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{\fixme summary}
% Finally, output a summary giving the number of fixme notes at the end of the
% compilation:
%    \begin{macrocode}
\AtEndDocument{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces
  }{%
    FiXme Summary: Number of notes: \thefxnotecount,\MessageBreak%
    Number of warnings: \thefxwarningcount,\MessageBreak%
    Number of errors: \thefxerrorcount,\MessageBreak%
    Number of fatal errors: \thefxfatalcount,\MessageBreak%
    Total: \thefixmecount\@gobble%
  }}
%    \end{macrocode}
%
% ^^A \PrintChanges
% \PrintIndex
% \Finale
%
% ^^A fixme.dtx ends here.
