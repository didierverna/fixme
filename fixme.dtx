% \iffalse                                                 -*- mode: LaTeX -*-
%
% fixme.dtx --- Doc file for the FiXme package (code and documentation)
%
% Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006 Didier Verna.
% Copyright (C) 2007, 2009 Didier Verna.
%
% Author:        Didier Verna <didier@lrde.epita.fr>
% Maintainer:    Didier Verna <didier@lrde.epita.fr>
% Created:       Thu Dec 10 16:04:01 1998
% Last Revision: Thu Jul 16 19:55:00 2009
%
% This file is part of FiXme.
%
% FiXme may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.1
% of this license or (at your option) any later version.
% The latest version of this license is in
% http://www.latex-project.org/lppl.txt
% and version 1.1 or later is part of all distributions of LaTeX
% version 1999/06/01 or later.
%
% FiXme consists of the files listed in the file `README'.
%
%
% Commentary:
%
% Contents management by FCM version 0.1.
%
%
% Code:
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\usepackage{xspace}
\usepackage{docx}
% #### NOTE: I don't want to \usepackage{fixme} just for getting the file
% information. So here what I do: generate a header with only the
% \ProvidesPackage command, and also the \fixmelogo. Then, I \input it so that
% \GetFileInfo works. However, I need to manually set the current file name
% and extension that would normally be set by \RequirePackage. Also, note that
% the call to \GetFileInfo below needs to use the extension of the header,
% that is inc instead of sty, even the file fixme.inc does not really exist.
\makeatletter
  \def\@currname{fixme}
  \def\@currext{inc}
\makeatother
\input{header.inc}
% \OnlyDescription
\CodelineIndex
% \RecordChanges
\begin{document}
\DocInput{fixme.dtx}
\end{document}
%</driver>
%
% \fi
%
% \catcode`\¡=14
% ^^A\CheckSum{880}
% \GetFileInfo{fixme.inc}
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%
% \MakeShortVerb{\|}
%
% \makeatletter
% \def\ps@mystyle{
%   \def\@oddfoot{\hfil\thepage\hfil}
%   \def\@evenfoot{\hfil\thepage\hfil}
%   \def\@evenhead{\hfil\slshape\leftmark}
%   \def\@oddhead{\slshape\rightmark\hfil}}
% \renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}{%
%     -3.25ex\@plus -1ex \@minus -.2ex}{%
%     1.5ex \@plus .2ex}{%
%     \normalfont\normalsize\bfseries}}
% \makeatother
%
% \newcommand\subsubsubsection[1]{\paragraph{#1:}}
%
% ^^A Let's not depend on varioref for just that:
% \newcommand\sectionref[1]{\ref{#1} on page \pageref{#1}}
%
% \newcommand\etc{\textit{etc.}\xspace}
% \newcommand\vs{\textit{vs.}\xspace}
% \newcommand\ie{\textit{i.e.}\xspace}
% \newcommand\komascript{\textsc{Koma}-Script\xspace}
% \newcommand\auctex{AUC-\TeX\xspace}
%
% \newcommand\fx{\fixmelogo\xspace}
% \newcommand\packagecopyright{%
%   Copyright \copyright{} 1998--2002, 2004--2007, 2009 Didier Verna}
%
% \pagestyle{mystyle}
% \markright{\hskip-.5\marginparwidth \fx \fileversion{} (\filedate)}
%
% \date{\texttt{\fileversion{} (\filedate)}}
% \title{\fx{} -- a \LaTeXe{} package for inserting fixme notes in your
%   documents}
% \author{Didier Verna\\
%   \texttt{mailto:didier@lrde.epita.fr}\\
%   \texttt{http://www.lrde.epita.fr/\~{}didier/}}
% \maketitle
%
%
% \begin{abstract}
%   In the process of writing a long document, it is a common practice to
%   leave some parts unwritten or uncomplete, and come back to them later. In
%   such cases, you probably want to stick clues about which parts need to be
%   ``fixed'', where they are located, and what needs to be done. This is what
%   I call ``fixme notes''. The purpose of this package is to provide you with
%   convenient ways to insert such notes in your documents.\par
%   The \fx package is \packagecopyright{}, and distributed under the
%   terms of the LPPL license.
% \end{abstract}
%
% \tableofcontents
%
% \section{Description}
% With \fx, you can insert different kinds of notes in your documents,
% ranging from simple not-so-important notices to critical stuff that must
% absolutely be fixed in the final version.\par
% \fx gives you full control on the layout of these notes: they can be
% displayed inline (directly in the text), as marginal paragraphs (the
% default), as footnotes and even as index entries. All these possibilities
% can be mixed together. Additionally, you can summarize all \fx notes in
% a ``list of fixme's''.\par
% \fx notes are also recorded in the log file, and (depending on their
% importance level) some of them are displayed on the terminal during
% compilation. A final summary is also created at the end of the compilation
% process.\par
% All these features are actually available when you're working in
% \texttt{draft} mode. In \texttt{final} mode, the behavior is slightly
% different: any remaining critical note generates an error (the compilation
% aborts), while non critical ones are just removed from the document's body
% (they're still recorded in the log file though).
%
%
% \section{Using \fx}
% \subsection{Initialization}
% \subsubsection{Requirements}
% In order to work properly, \fx requires the presence of some \LaTeX{}
% packages. You don't have to load them explicitly though. As long as
% \LaTeX{} can locate them, they will be used automatically. \fx currently
% depends on \texttt{xspace}, \texttt{ifthen}, \texttt{verbatim} and
% \texttt{xkeyval} no older than release date 2006/11/18.
%
% \subsubsection{Loading the package}
% In order to load \fx, simply say |\usepackage[|\meta{options}|]{fixme}|
% in the preamble of your document. There is an important number of options
% that you can use in order to customize \fx's default or global behavior.
% These options will be discussed when appropriate.\\
%
% \subsubsection{Global setup modification}
% \DescribeMacro{\fxsetup}\marg{options}\\
% Another way of customizing \fx's global behavior is to use the
% \cs{fxsetup} command. \cs{fxsetup} understands the same options as the
% package itself and can be used in the preamble as well as in the document's
% body.
%
% \subsubsection{Local setup modification}
% Finally, note that unless specified otherwise, all package options are also
% understood by the note insertion commands or environments described in
% section \sectionref{sec:manual:insertion}. The effect is then local to that
% particular command.
%
% \subsection{Inserting \fx notes\label{sec:manual:insertion}}
% \subsubsection{Commands}
% \DescribeMacro{\fxnote}
% \DescribeMacro{\fxwarning}
% \DescribeMacro{\fxerror}
% \DescribeMacro{\fxfatal}
% \oarg{options}\marg{note}\\
% \fx provides four note insertion commands corresponding to different
% levels of importance (notes, warnings, errors and fatal errors).
% \cs{fxfatal} is a bit different from the other ones, as will be explained in
% section \sectionref{sec:manual:behavior}.\par
% \DescribeMacro{\fx}
% As of version 4, the \cs{fixme} command is a synonym for \cs{fxfatal} and is
% considered deprecated.\par
%
% \subsubsection{Targeted commands}
% \DescribeMacro{\fxnote*}
% \DescribeMacro{\fxwarning*}
% \DescribeMacro{\fxerror*}
% \DescribeMacro{\fxfatal*}\oarg{options}\marg{note}\marg{text}\\
% Sometimes, you might not only want to issue a \fx note, but also
% highlight the relevant part of the text to which it applies. This is what I
% call ``targeting'' the note. As of version 4, \fx provides starred
% versions of its note insertion commands to do that. In star form, these
% commands expect an additional mandatory argument containing the text to be
% highlighted.
%
% \subsubsection{Environments}
% \emph{\textbf{Warning:} as of version 4.0, the environments interface has
%   changed and is \emph{not} backward-compatible.}\\
% \fx notes are meant to be short: consider that they are likely to go in
% the list of fixmes and in the index for instance. If you feel the need for
% writing longer comments, the environments described below might come in
% handy.\\
% \DescribeEnv{anfxnote}
% \DescribeEnv{anfxwarning}
% \DescribeEnv{anfxerror}
% \DescribeEnv{anfxfatal}\oarg{options}\marg{summary}\\
% \fx provides four note environments; one for every note level. These
% environments take one mandatory argument (meant to be a short summary
% of the long note) and behave in exactly the same way as their command
% counterpart. The layout policy is a bit different though (see section
% \sectionref{sec:manual:layout}): the long note (the environment's contents)
% will always appear inline, and the \meta{summary} will obey all active
% layout forms except for the inline one, just as if it had been passed to one
% of the \fx note insertion commands described in the previous section.
%
% \DescribeEnv{afixme}
% As of version 4, the \texttt{afixme} environement is a synonym for
% \texttt{anfxfatal}, and is considered deprecated.
%
% \subsubsection{Targeted environments}
% \DescribeEnv{anfxnote*}
% \DescribeEnv{anfxwarning*}
% \DescribeEnv{anfxerror*}
% \DescribeEnv{anfxfatal*}\oarg{options}\marg{summary}\marg{text}\\
% \fx environments can also be targeted to a specific portion of text. When
% using the starred version, the environments expect one additional mandatory
% argument: the text in question that will be highlighted.
%
% \subsection{List of \fx's\label{sec:manual:lox}}
% \DescribeMacro{\listoffixmes}
% \fx remembers where you put \fx notes in a toc-like file whose
% extension is \texttt{lox}. The \cs{listoffixmes} command generates the list
% of all \fx notes in a manner similar to that of the ``list of figures''
% for instance. A standard layout is automatically selected for the
% \texttt{article}, \texttt{report}, \texttt{book} classes and their
% \komascript replacements. If another class is used, the \texttt{article}
% layout is selected. Also, note that if there is no \fx note left in the
% document, this command doesn't generate an empty list, but rather stays
% silent. It also stays silent in \texttt{final} mode, regardless of the
% presence of remaining notes (see section \sectionref{sec:manual:behavior}).
%
% \subsection{Controlling the behavior of \fx\label{sec:manual:behavior}}
% \DescribeOption{final}
% \DescribeOption{draft}
% The behavior of \fx is controlled by the two standard options
% \texttt{final} and \texttt{draft}. These options are usually given to
% \cs{documentclass} which in turn passes them to all packages. In addition,
% you can also use them as options to \cs{usepackage}, in the call to
% \cs{fxsetup}, and even to the note insertion commands and environments.
%
% In \texttt{draft} mode, \fx notes are recorded in the log file and appear
% in the document as specified by the layout settings (see section
% \sectionref{sec:manual:layout}). Additionally, warnings, errors and fatal
% errors are also displayed on the terminal.
%
% In final mode, non fatal notes (those generated by \cs{fxnote},
% \cs{fxwarning}, \cs{fxerror} and their corresponding environments) are still
% logged, but they're not typeset. On the other hand, fatal notes (those
% generated by the \cs{fxfatal} command and the \texttt{anfxfatal}
% environment) will throw a \LaTeX{} error and thus interrupt or abort
% compilation with an informative message. This will help you track down
% forgotten important caveats in your document.
%
% Let me rephrase: final documents can only have notes, warnings, and (non
% fatal) errors left. Of course, this is not completely true: remember that
% these options are understood locally by all the note insertion commands and
% environments, so even in \texttt{final} mode, you can use something like
% this:
% \begin{verbatim}
% \fxfatal[draft]{bla bla}
% \end{verbatim}
%
% \DescribeOption{status}
% By default, \fx is in \texttt{final} mode (\LaTeX{} itself behaves that
% way). If you're manipulating the document status at the level of \fx
% itself (as opposed to the \cs{documentclass} level), then the preferred way
% to do this is to use the \texttt{status} option, and give it the value
% \texttt{final} or \texttt{draft}.
%
% \subsection{Controlling the layout of \fx notes\label{sec:manual:layout}}
% \fx notes can appear in several forms in your document. Each of these
% forms can be individually selected, or they can be combined together. This
% section describes the built-in layout forms and their possible combination.
%
% \subsubsection{Built-in layout forms}
% The layout forms built in the core of \fx are: inline (directly in the
% text, in bold), marginal notes (the default), footnotes, index entries
% (sorted by level of importance) and marginal clues. While most of these
% forms should be self-explanatory, marginal clues deserve a bit more
% explanation.
%
% If your preferred layout form is inline or say, footnote, it might be
% somewhat difficult to localize the \fx note on the page, especially its
% vertical position. That's where marginal clues come into play. A marginal
% clue does not display the \fx note's contents, but only an indication
% that there is such a note at that (vertical) position. So you have to use
% another layout form (again, typically inline or footnote) in order to get
% the actual note's contents.
%
% Obviously, the margin and margin clue forms are mutually exclusive, so if
% you try to activate both, only the most recently activated one will be
% enabled (and you'll get a notice in the log file and on the terminal).
%
% \subsubsection{Individual control\label{sec:manual:individuallayoutcontrol}}
% \DescribeOption{inline}
% \DescribeOption{margin}
% \DescribeOption{marginclue}
% \DescribeOption{footnote}
% \DescribeOption{index}
% For each layout form, there is a corresponding boolean option. These options
% are understood by the package itself, the \cs{fxsetup} command and also
% locally by every note insertion command or environment.
%
% To activate a layout form, use the option directly or give it a value of
% \texttt{true}. For instance, these two forms are equivalent:
% \begin{verbatim}
% \fxnote[margin]{note...}
% \fxnote[margin=true]{note...}
% \end{verbatim}
%
% \DescribeOption{noinline}
% \DescribeOption{nomargin}
% \DescribeOption{nomarginclue}
% \DescribeOption{nofootnote}
% \DescribeOption{noindex}
% For convenience, each layout option has a counterpart that deactivates the
% corresponding layout form. The counterpart option has the same name,
% prefixed with \texttt{no}. Again, these options are understood by the
% package itself, the \cs{fxsetup} command and also locally by every note
% insertion command or environment. For instance, these two forms are
% equivalent:
% \begin{verbatim}
% \fxsetup{margin=false}
% \fxsetup{nomargin}
% \end{verbatim}
%
% \subsubsection{Global control\label{sec:manual:globallayoutcontrol}}
% \DescribeOption{layout}
% \DescribeOption{morelayout}
% As of version 4.0, an even more convenient way to specify the required
% layout is to use the \texttt{layout} and \texttt{morelayout} options. In
% fact, the use of individual control is considered more or less deprecated.
% Both of these options take a comma-separated list of the individual options
% described above (this includes the \texttt{no}\meta{option} form as well).
%
% While the \texttt{morelayout} options \emph{adds} to the current layout
% configuration, the \texttt{layout} one completely overrides it. For
% instance, knowing that by default, only the \texttt{margin} layout form is
% active, the following forms are all equivalent:
% \begin{verbatim}
% \usepackage[nomargin,inline,index]{fixme}
% \usepackage[margin=false,inline=true,index=true]{fixme}
% \usepackage[morelayout={nomargin,inline,index}]{fixme}
% \usepackage[layout={inline,index}]{fixme}
% \end{verbatim}
%
% Again, these two options are understood by the package itself, the
% \cs{fxsetup} command and also locally by every note insertion command or
% environment.
%
% \subsubsection{Corollary: floating \fx notes}
% At some point, people suggested that it would be nice to have global \fx
% notes, not related to any portion of the text in particular. Such notes
% could be general comments about the whole document, and could even be issued
% in the preamble. This is what I call ``floating'' \fx notes.
%
% Originally, I started writing a new set of commands to do just that, but
% with the flexibility that \fx version 4 provides, I quickly realized that
% such commands were an unnecessary addition.
%
% Since floating notes are not supposed to relate to any part of the text,
% they should not be typeset anywhere in it. This is especially true if you
% want to put some of them in the document's preamble. However, even a
% preamble \fx note could be recorded and displayed in the index or in the
% list of fixmes. And it turns out that you can specify all that with the
% layout options described in sections
% \sectionref{sec:manual:individuallayoutcontrol} and
% \sectionref{sec:manual:globallayoutcontrol}.
%
% \DescribeOption{target}
% The only slight problem that remains in the page number, which normally
% appears in the list of fixmes and in the index: if you choose to reference a
% floating \fx note that way, the page number is likely to be completely
% meaningless. To compensate, a new option named ``target'' is provided. When
% used, the given value will replace the page number in both the index and the
% list of fixmes. The target can be anything you like, but should remain rather
% short. By default, \texttt{target} is set the special value \texttt{thepage},
% which as you guessed means to use the page number.
%
% The name "target" bears an intentional resemblance to \fx's targeted
% commands and environments, because we are indeed targetting the note to
% something. The only difference is that in the case of floating notes, the
% target is non-textual.
%
% Here is an example of a floating note that would typically appear in the
% document's preamble:
% \begin{verbatim}
% \usepackage{hyperref}
% \fxfatal[layout=index,target=hyperref]{Fill in PDF fields (title etc.)}
% \end{verbatim}
%
% \subsubsection{Inner layout}
% There might be various reasons for you to change the layout locally for one
% particular note: creating a floating note is one of them; see section
% \sectionref{sec:manual:othercommonproblems} for some others. As of version
% 4.0, one frequent reason (described below) can be handled automatically by
% \fx.
%
% Remember that the default layout is to use margin paragraphs. Unfortunately,
% margin paragraphs are forbidden by \TeX{} in several situations, like a
% figure's caption for instance. If you try that, you will get a cryptic ``Not
% in outer par mode'' error message.
%
% \DescribeOption{innerlayout}
% The good news is that this situation can be detected automatically. As of
% version 4.0, \fx provides an option named \texttt{innerlayout} that
% allows you to specify an alternate layout setting to use when \TeX{} is in
% \emph{inner} mode. In addition to that, \fx automatically disables the
% \texttt{margin} and \texttt{marginclue} forms.
%
% Using \texttt{innerlayout} is not as trivial as it may seem: it
% \emph{really} is an alternate layout configuration, and as such, you can use
% any combination you like of individual layout options, or you can even use
% the \texttt{layout} and \texttt{morelayout} options. This means that your
% alternate layout can either \emph{add} to the existing one, or
% \emph{override} it. Here are some examples to clarify things a little. You
% should try to understand them.
% \begin{itemize}
% \item By default, the \fx inner layout is set to just \texttt{inline}.
%   This can be simulated by the following call:
% \begin{verbatim}
% \usepackage[layout=margin,innerlayout={layout=inline}]{fixme}
% \end{verbatim}
% \item The following happens to give the same result in our particular case,
%   while having a different semantics:
% \begin{verbatim}
% \usepackage[layout=margin,innerlayout=inline]{fixme}
% \end{verbatim}
% \item If you have set \fx to use a safe layout globally (for instance,
%   \texttt{inline} and \texttt{index}), and you want to use the same layout
%   in inner mode, then you should provide an \emph{empty} inner layout, like
%   this:
% \begin{verbatim}
% \fxsetup{layout={inline,index},innerlayout=}
% \end{verbatim}
%   What would happen if you didn't provide the \texttt{innerlayout} option?
% \end{itemize}
%
% \subsubsection{Other common layout
%   problems\label{sec:manual:othercommonproblems}}
% This section describes some other common problems that people have
% encountered using \fx. Although \fx might not be directly responsible
% for them, it is still good to keep them in mind.
%
% \subsubsubsection{Footnotes and margin paragraphs in floats}
% Using footnotes in figures (and \emph{a fortiori} in a figure's caption)
% does not work in general. Although there are some workarounds out there (for
% instance, using \cs{footnotemark} and \cs{footnotetext} directly), there is
% no completely reliable solution and it is not possible to detect that
% situation automatically. Similarly, marginal paragraphs will cause problems
% in a figure (even when not in its caption) because floats can't be nested in
% \LaTeX. Usual symptoms of these situations are: a footnote not being
% typeset, compilation breakage with the ``Floats lost'' message \etc If
% you're facing this problem, you need to change your layout locally.
%
% \subsubsubsection{Marginal paragraphs showing up on the wrong page}
% You want to look at the \texttt{mparhack} package.
%
% \subsubsubsection{ACM classes compatibility}
% The ACM \textsc{Sig} classes (\texttt{acm\_proc\_article-sp} and
% \texttt{sig-alternate}) forbid the use of \cs{marginpar}, so if you use
% these classes, don't forget to choose another layout for \fx, and also
% avoid using marginal clues.
%
% \subsection{Controlling the layout of \fx
%   environments\label{sec:manual:envlayoutcontrol}}
% As discussed in section \sectionref{sec:manual:insertion}, the contents of a
% \fx environment (a long note) always appears inline. However, the exact
% way this contents is typeset (in draft mode only) is subject to a layout of
% its own, called the ``environment layout''.
%
% \subsubsection{Selecting an environment layout}
% \DescribeOption{envlayout}
% The desired environment layout can be selected with the \texttt{envlayout}
% option. Contrary to the note layouts, only one environment layout can be
% active at a time. The \texttt{envlayout} option is understood by the package
% itself, the \cs{fxsetup} command and all the note insertion environments
% (not the commands!). There are some restrictions on its usage however, as
% discussed in the next section.
%
% \subsubsection{Built-in \vs external environment layouts}
% Environments layouts are provided either in the core of \fx, or in separate
% files loaded dynamically on demand. Simple layouts are typically built-in,
% whereas those requiring additional packages are external, so that they don't
% consume \TeX{} resources if not used. As a consequence, selecting an
% external layout with the \texttt{envlayout} option might involve loading the
% relevant file first.
%
% \noindent\DescribeMacro{\fxuseenvlayout}\marg{name}\\
% \DescribeMacro{\fxloadenvlayouts}\marg{names}\\
% For technical reasons, it is not possible to do such a thing outside the
% preamble, neither in the middle of processing \cs{usepackage} options. As a
% result, the \texttt{envlayout} option is restricted and you have two
% possibilities for using an external layout:
% \begin{enumerate}
% \item Use the \texttt{envlayout} option in a call to \cs{fxsetup} in the
%   preamble, like this: |\fxsetup{envlayout=name}|. This will load it
%   \emph{and} select it immediately.
% \item Use the \cs{fxuseenvlayout} command in the preamble like this:\\
%   |\fxuseenvlayout{name}|. This is strictly equivalent to the previous
%   solution.
% \item If on the other hand you want to load one or several environment
%   layouts \emph{without} using them immediately (perhaps in order to use
%   them locally in some \fx notes), use the \cs{fxloadenvlayouts} command in
%   the preamble like this: |\fxloadenvlayouts{name,...}|. After that, you can
%   select any of those layouts anywhere you wish.
% \end{enumerate}
%
% \subsubsection{Available environment layouts}
% The table below lists the environment layouts currently distributed with
% \fx.
% \begin{center}
%   \DeleteShortVerb{\|}
%   \begin{tabular}{|l|l|p{5cm}|}
%     \hline
%     \textbf{Name} & \textbf{External} & \textbf{Description}\\
%     \hline\hline
%     \texttt{bold} & & Display contents in bold\\
%     \texttt{italics} & & Display contents in italics\\
%     \hline
%   \end{tabular}
%   \MakeShortVerb{\|}
% \end{center}
%
% \subsection{Controlling the layout of \fx targets}
% As discussed in section \sectionref{sec:manual:insertion}, the starred
% versions of the \fx note insertion commands and environments let you
% highlight a portion of text which is relevant to the current \fx note.
% The exact way this textual target is typeset (in draft mode only; otherwise
% it is typeset as-is) is subject to a layout of its own, called the ``target
% layout''.
%
% \subsubsection{Selecting a target layout}
% \DescribeOption{targetlayout}
% The desired target layout can be selected with the \texttt{targetlayout}
% option. Contrary to the note layouts, only one target layout can be active
% at a time. The \texttt{targetlayout} option is understood by the package
% itself, the \cs{fxsetup} command and all the note insertion environments
% (not the commands!). There are some restrictions on its usage however, as
% discussed in the next section.
%
% \subsubsection{Built-in \vs external target layouts}
% Target layouts are provided either in the core of \fx, or in separate files
% loaded dynamically on demand. Simple layouts are typically built-in, whereas
% those requiring additional packages are external, so that they don't consume
% \TeX{} resources if not used. As a consequence, selecting an external layout
% with the \texttt{targetlayout} option might involve loading the relevant
% file first.
%
% \noindent\DescribeMacro{\fxusetargetlayout}\marg{name}\\
% \DescribeMacro{\fxloadtargetlayouts}\marg{names}\\
% For technical reasons, it is not possible to do such a thing outside the
% preamble, neither in the middle of processing \cs{usepackage} options. As a
% result, the \texttt{targetlayout} option is restricted and you have two
% possibilities for using an external layout:
% \begin{enumerate}
% \item Use the \texttt{targetlayout} option in a call to \cs{fxsetup} in the
%   preamble, like this: |\fxsetup{targetlayout=name}|. This will load it
%   \emph{and} select it immediately.
% \item Use the \cs{fxusetargetlayout} command in the preamble like this:\\
%   |\fxusetargetlayout{name}|. This is strictly equivalent to the previous
%   solution.
% \item If on the other hand you want to load one or several target layouts
%   \emph{without} using them immediately (perhaps in order to use
%   them locally in some \fx notes), use the \cs{fxloadtargetlayouts} command
%   in the preamble like this: |\fxloadtargetlayouts{name,...}|. After that,
%   you can select any of those layouts anywhere you wish.
% \end{enumerate}
%
% \subsubsection{Available target layouts}
% The table below lists the target layouts currently distributed with
% \fx.
% \begin{center}
%   \DeleteShortVerb{\|}
%   \begin{tabular}{|l|l|p{5cm}|}
%     \hline
%     \textbf{Name} & \textbf{External} & \textbf{Description}\\
%     \hline\hline
%     \texttt{bold} & & Display target in bold\\
%     \texttt{italics} & & Display target in italics\\
%     \hline
%   \end{tabular}
%   \MakeShortVerb{\|}
% \end{center}
%
% \subsection{Controlling the logging of \fx}
% As well as being displayed in the document itself, all \fx notes are
% ``logged'' in different ways: by default, simple notes are recorded in the
% log file while the others are also displayed on the terminal output during
% compilation.\par
% \DescribeOption{silent}
% \DescribeOption{nosilent}
% You have the ability to suppress logging altogether by using the
% \texttt{silent} option. This option is understood by the package itself, the
% \cs{fxsetup} command and all note insertion commands and environments. Just
% as individual layout options, \texttt{silent} is a boolean option, so all
% those forms are possible: \texttt{silent}, equivalent to
% \texttt{silent=true}, and \texttt{nosilent}, equivalent to
% \texttt{silent=false} (the default).
%
% \subsection{Controlling the language of \fx\label{sec:manual:i18n}}
% \subsubsection{Available languages}
% \DescribeOption{english}
% \DescribeOption{french}
% \DescribeOption{francais}
% \DescribeOption{spanish}
% \DescribeOption{italian}
% \DescribeOption{german}
% \DescribeOption{ngerman}
% \DescribeOption{danish}
% \DescribeOption{croatian}
% \fx currently supports English (the default), French, Spanish, Italian,
% German, Danish and Croatian. You can select your preferred language by using
% the corresponding language option. These options usually appear in the call
% to \cs{documentclass} or \cs{usepackage}, but they are also understood by
% \cs{fxsetup} and all the note insertion commands or environments. This
% allows you to change the selected language either globally or locally, and
% at any popint in the document. The \texttt{french} and \texttt{francais}
% options are synonyms. The \texttt{german} and \texttt{ngerman} options are
% currently equivalent.
%
% \DescribeOption{lang}
% If you're manipulating language settings at the level of \fx itself (as
% opposed to the \cs{documentclass} level), then the preferred way to specify
% a language is to use the \texttt{lang} option, and give it the language name
% as a value. For instance:
% \begin{verbatim}
% \usepackage[lang=french]{fixme}
% \end{verbatim}
%
% \subsubsection{Language tracking}
% \DescribeOption{langtrack}
% If the document you're working on has parts written in different languages,
% it might be the case that \fx notes should follow the current language as
% well (especially if you're in collaborative mode; see section
% \sectionref{sec:manual:modes}). As of version 4, \fx provides a boolean
% option named \texttt{langtrack}. When specified, \fx assumes that you're
% using \texttt{babel} and automatically switches to the current language (as
% specified by \texttt{babel}'s \cs{languagename} command), without requiring
% an explicit language option.
%
% \DescribeOption{defaultlang}
% In the case where tracking falls on a language unsupported by \fx, a
% warning will be issued and \fx will switch to the language specified by
% the \texttt{defaultlang} option (\texttt{english} by default). If you happen
% to get one of these warnings, please consider sending me a patch with
% support for this new language (see section \sectionref{sec:code:i18n}).
%
% Finally, note that specifying a language explicitely (by means of a language
% option) in the note insertion commands and environments always takes
% precedence over the language tracking behavior.
%
% \subsubsection{Indexing in different languages}
% If your document contains \fx notes written in different languages, and
% you have requested the \texttt{index} layout, \fx will not only classify
% the notes by their level of importance, but also by language. For example,
% if you have \fx warnings in both English and French, you will find two
% different subcategories for warnings in the index: one called ``Warnings''
% and one called ``Avertissements''.
%
% \subsection{Standalone or collaborative mode\label{sec:manual:modes}}
% As of version 4, \fx supports collaborative annotations as well as
% ``standalone'', single-author documents.
% \subsubsection{Standalone mode}
% By default, \fx is in standalone mode, meaning that it assumes there is
% only one person annotating the document. This has several implications on
% the layout. If you've tried it already, you may have noticed the following
% points.
% \begin{itemize}
% \item All the built-in layout forms (index excepted) put the \fx logo in
%   front of every note. This is also true for \fx environments. The idea
%   is to distinguish \fx contents from the rest of the document (for
%   instance other marginal notes or other footnotes).
% \item All notes are indexed under the main \fx category, and sorted by
%   importance level, but the \fx logo is not repeated at every note (that
%   would be useless).
% \item Similarly, the list of fixmes does not clutter itself with the logo,
% because we already know that its contents is specific to \fx.
% \end{itemize}
% As a matter of fact, when you see the \fx logo appear somewhere, you're
% not actually contemplating it, but rather the note's \emph{author}. It just
% happens that by default (meaning in standalone mode), the only note author
% is \fx itself.
%
% \DescribeOption{author}
% In standalone mode, you might be annoyed by this orgy of \fx logos. This
% might happen if for instance you're using the \texttt{margin} layout and you
% \emph{know} there is nothing but \fx notes in there. In such a case, you
% will most likely want to change the notes author to \emph{nothing}. This can
% be acomplished by using the \texttt{author} option, which is understood by
% the package itself, the \cs{fxsetup} command and all the note insertion
% commands or environments. Doing something like the following will get rid of
% the damn logo for good:
% \begin{verbatim}
% \usepackage[author=]{fixme}
% \end{verbatim}
%
% \subsubsection{Collaborative mode}
% If, on the other hand, you're working in collaboration with other people,
% every potential ``fixer'' might want to tag his or her own notes. So
% assuming that John Doe is another author, he would most likely do something
% like this:
% \begin{verbatim}
% \fxfatal[author=JD]{rephrase this}
% \end{verbatim}
% And suddenly, John's fatal note will be prefixed with his initials. This is
% not a very satisfactory solution however, because it would require you to
% explicitely provide the author's tag in every single note you create.
% Fortunately, \fx offers an easier way to achieve this.
%
% \subsubsubsection{Registering new authors}
% \noindent\DescribeMacro{\FXRegisterAuthor}
% \marg{cmdprefix}\marg{envprefix}\marg{tag}\\
% The command \cs{FXRegisterAuthor} registers a new author with \fx. It
% takes three arguments: the last one (\meta{tag}) is just the same as the
% value you would pass to the \texttt{author} option: it will serve as a
% prefix for John's notes. In addition to that, a complete new set of
% user-level commands (prefixed with \meta{cmdprefix}) and environments
% (prefixed with \meta{envprefix}) will be created. To clarify, suppose that
% we have registered John like this:
% \begin{verbatim}
% \FXRegisterAuthor{jd}{ajd}{JD}
% \end{verbatim}
% Now, John can use the commands \cs{jdnote}, \cs{jdwarning} \etc, along with
% their starred versions, and he can also use the environments
% \texttt{ajdnote}, \texttt{ajdwarning} \etc, along with their starred
% versions as well. If you really want to know the whole story, it turns out
% that the main \fx interface described in section
% \sectionref{sec:manual:insertion} is created with this single line of code:
% \begin{verbatim}
% \FXRegisterAuthor{fx}{anfx}{fixme}
% \end{verbatim}
%
% \paragraph{Fun with the \texttt{author} option}
% Some precisions about the author option are in order here. When a new
% author is registered with \fx, the generated commands and environments
% work by \emph{presetting} the author option to the specified \meta{tag}.
% This means that it is still possible to override it explicitely like this:
% \begin{verbatim}
% \jdfatal[author=XX]{rephrase this}
% \end{verbatim}
% The only case I can figure at in which you would want to do that is if
% you're at war and want to plot a gigantic con against a fixer you hate.
%
% The other remark is about the default \texttt{fx*} user interface: the
% \texttt{fixme} default user is special in that it is the only registered
% user to honor global \texttt{author} options (provided in the call to
% \cs{usepackage} or \cs{fxsetup}). The intended use of this is that the
% \emph{main} author of the document uses the \texttt{fx*} interface
% (preferably with a personal \texttt{author} setting, different from the
% \fx logo), and all other authors are registered via
% \cs{FXRegisterAuthor}.
%
% \paragraph{Globally switching to collaborative mode}
% We're getting close, but we're not quite there yet. Perhaps you would like
% to see the tags from the different authors in the list of fixmes, or even in
% the index? Remember that \fx is in standalone mode by default, so the
% (only) tag does not appear in those places.
%
% \noindent
% \DescribeOption{singleuser}
% \DescribeOption{multiuser}
% \DescribeOption{mode}
% If you want this additional information, you've got to ask \fx to
% globally switch to collaborative mode. This can be done with either one of
% the three options \texttt{singleuser}, \texttt{mutliuser} or \texttt{mode}.
% \texttt{singleuser} and \texttt{multiuser} are boolean options. The
% \texttt{mode} option takes a value of either \texttt{singleuser} or
% \texttt{multiuser}. This is the preferred way to switch the mode. These
% options are understood globally by \cs{usepackage} or \cs{fxsetup}, and also
% locally by the note insertion commands or environments.
%
% When collaborative mode is active, \fx adjusts the list of fixmes layout
% to display the authors tags as well. Additionally, \fx notes are indexed
% as before, but additional index entries, sorted by author, and generated as
% well.
%
% \subsection{Themes}
% \fx 4.0 comes with support for themes. Themes are a way to modify the
% built-in layout capabilities of \fx, or even supply new ones. Themes do not
% belong to the core of \fx for two reasons.
% \begin{enumerate}
% \item I want the core to be as portable across \LaTeX{} distributions as
%   possible, so \fx itself does not rely on that many other packages. Themes,
%   on the other hand, might rely heavily on third-party libraries to provide
%   their functionality.
% \item Keeping themes outside of the core means that only the one you want to
%   use is loaded, effectively lightening the weight of \fx on \TeX's
%   resources.
% \end{enumerate}
%
% \subsubsection{Using themes}
% \DescribeOption{theme}
% The interface for using a theme is quite simple: use the \texttt{theme}
% option and give it the name of the theme you want to use.
%
% The \texttt{theme} option has one gotcha, though: it can only be used with
% the \cs{fxsetup} command. It is not possible to use it in \cs{usepackage},
% neither in the note insertion commands or environements. This is no big
% deal, however, because it is very unlikely that you would want to change the
% current theme in the middle of your document.
%
% Here's how you would load the \texttt{signature} theme, provided in the
% distribution:
% \begin{verbatim}
% \usepackage{fixme}
% \fxsetup{theme=signature,author=dvl,multiuser}
% \FXRegisterAuthor{jd}{ajd}{JD}
% %% etc.
% \end{verbatim}
%
% \subsubsection{Themes list}
% \fx comes with a number of predefine themes listed below.
% \begin{description}
%   \renewcommand\descriptionlabel[1]{\hspace{\labelsep}\texttt{#1}}
% \item[signature] This theme overrides the existing layouts to display the
%   author tags as a signature (\ie at the end of the notes) instead of as a
%   prefix.
% \item[color]
%   \DescribeColor{fxnote}
%   \DescribeColor{fxwarning}
%   \DescribeColor{fxerror}
%   \DescribeColor{fxfatal}
%   This theme overrides the existing layouts to use different
%   colors for the different note levels. As a consequence, it also avoids
%   printing the note names. The colors used to display the notes are named
%   \texttt{fxnote}, \texttt{fxwarning}, \texttt{fxerror} and
%   \texttt{fxfatal}. You can redefine them if you whish.
% \end{description}
%
% \section{Customizing \fx}
% \subsection{Customizing the \fx notes layout}
% \subsubsection{Commands}
% The actual typesetting of \fx notes is done by the commands described
% below. If you want to change their behavior, you can \cs{renewcommand}
% them.\\
% \DescribeMacro{\FXLayoutInline}
% \DescribeMacro{\FXLayoutMargin}
% \DescribeMacro{\FXLayoutFootnote}
% \marg{prefix}\marg{note}\\
% The \texttt{inline}, \texttt{margin} and \texttt{footnote} layouts have two
% parts: a ``prefix'' which depends on the note level, and the note itself.
% By default, the prefix is one of ``\fx note:'', ``\fx warning:'',
% ``\fx error:''  or simply ``\fx:'', and appears in bold. The note
% itself appears emphasized.\\
% \DescribeMacro{\FXayoutMarginCLue}
% \marg{prefix}\\
% The special \texttt{marginclue} layout only outputs the prefix mentioned
% above.\\
% \DescribeMacro{\FXLayoutIndex}
% \marg{note}\\
% All \fx index entries appear under the ``\fx'' key in the symbols
% section. There are 4 subcategories under this key, as many as there are note
% levels. By default, only the first 3 of them are used though (fatal errors
% do not appear under a subkey, but directly under the \fx key). The notes
% are numbered in the index.\par
%
% \subsubsection{Environments}
% The actual typesetting of \fx environments is done by the commands
% described below. If you want to change their behavior, you can
% \cs{renewcommand} them.\\
% \DescribeMacro{\FXEnvBegin}
% \marg{prefix}\\
% Remember that a \fx environment's summary is typeset by the corresponding
% layout command, as describe above. By default, \fx uses a
% \texttt{quotation} environment to typeset the longer note, and the prefix
% appears in bold.\\
% \DescribeMacro{\FXEnvEnd}
% This command closes the \texttt{quotation} by default.
%
% \subsection{Customizing the \fx notes logging}
% The actual logging of \fx notes is done by the commands described
% below. If you want to change their behavior, you can \cs{renewcommand}
% them.\\
% \DescribeMacro{\FXLogNote}
% \DescribeMacro{\FXLogWarning}
% \DescribeMacro{\FXLogError}
% \DescribeMacro{\FXLogFatal}
% \marg{note}\\
% By default, simple notes are recorded in the log file only, and the others
% also appear on the terminal during compilation.
%
% \subsection{Internationalization}
% \fx's language options have been described in section
% \sectionref{sec:manual:i18n}. If you want a finer grain on the
% language-dependent parts of \fx, the following commands are provided and
% can be renewed.\par
% \DescribeMacro{\fxnotename}
% \DescribeMacro{\fxwarningname}
% \DescribeMacro{\fxerrorname}
% \DescribeMacro{\fxfatalname}
% \DescribeMacro{\fixmelogo}
% The \cs{fx*name} commands define the name of the four different note levels.
% They make intensive use of \cs{fixmelogo} ;-)\par
% \DescribeMacro{\fixmeindexname}
% \DescribeMacro{\fxnoteindexname}
% \DescribeMacro{\fxwarningindexname}
% \DescribeMacro{\fxerrorindexname}
% \DescribeMacro{\fxfatalindexname}
% The command \cs{fixmeindexname} defines the main \fx index key. The other
% ones define the different index subkeys for each note level. Please note that
% an empty name for a subkey means that you don't actually want a subcategory
% (that's the case by default for fatal errors). The corresponding notes will
% then appear directly under the main \fx key. For that reason, a non
% empty subkey must end with an exclamation mark.\par
% \DescribeMacro{\listfixmename}
% \cs{listfixmename} defines the title for the ``list of fixmes'' section.
%
% \section{\auctex support}
% \auctex is a powerful major mode for editing \TeX{} documents in
% \textsf{Emacs} or \textsf{XEmacs}. In particular, it provides automatic
% completion of command names once they are known. \fx supports \auctex
% by providing a style file named \texttt{fixme.el} which contains \auctex
% definitions for the relevant commands. This file should be installed in a
% place where \auctex can find it (usually in a subdirectory of your
% \LaTeX{} styles directory). Please refer to the \auctex documentation for
% more information on this.
%
% \section{History}
% \begin{itemize}
% \item[v4.0] Support for collaborative annotations, suggested by Michael
%   Kubovy.\\
%   Support for ``targeted'' notes and environments (highlighting a portion of
%   text), suggested by Mark Edgington.\\
%   Support for ``floating notes'' (not specific to any portion of text),
%   suggested by Rasmus Villemoes.\\
%   Support for alternate layout autoswitch in \TeX's inner mode, suggested by
%   Will Robertson.\\
%   Support for automatic language tracking in multilingual documents.\\
%   Support for themes.\\
%   Extended support for user-provided layouts.\\
%   Support for \texttt{key=value} argument syntax in the whole user
%   interface.\\
%   New command \cs{fxsetup}.\\
%   Homogenize the log and console messages.\\
%   Heavy internals refactoring.
% \item[v3.4] \cs{fixme}, \cs{fxerror}, \cs{fxwarning} and \cs{fxnote} are now
%   robust, thanks to Will Robertson.\\
%   Fix incompatibility with \komascript classes version of \cs{@starttoc}
%   when the lox file is inexistent, reported by Philipp Stephani.
% \item[v3.3] Document incompatibility between marginal layout and the ACM
%   SIG classes, reported by Jochen Wuttke.\\
%   Honor \texttt{twoside} option in marginal layout, suggested by Jens
%   Remus.\\
%   Support for \komascript classes version 2006/07/30 v2.95b, suggested by
%   Jens Remus.\\
%   Documentation improvements suggested by Brian van den Broek.\\
%   Fix incompatibility with \texttt{amsart} reported by Lars Madsen:
%   \cs{@starttoc} takes two arguments.\\
%   Fix bug reported by Stefan Mann: a typo in the \cs{fixme@footnotetrue}
%   macro name.
% \item[v3.2] Added the marginclue layout option which only signals a fixme in
%   the margin, withtout the actual contents.\\
%   Support for Croatian thanks to Marcel Maretic |<marcel@fsb.hr>|.\\
%   Fix incompatibility with \texttt{amsbook} reported by Claude
%   Lacoursi\`ere: \cs{@starttoc} takes two arguments.\\
%   Fix incompatibility with Beamer reported by Akim Demaille: protect
%   contents of lox file.
% \item[v3.1] Fix bug reported by Arnold Beckmann: the environments were
%   visible in final mode.
% \item[v3.0] Added environments corresponding to the note insertion
%   commands.\\
%   Added an optional first argument to the note insertion commands
%   to change the layout locally.\\
%   Fix bug reported by Akim Demaille: marginal notes could mess up the
%   document's layout by flushing it right.
% \item[v2.2] New option \texttt{silent} to suppress notes logging.\\
%   Support for Danish thanks to Kim Rud Bille |<krbi01@control.auc.dk>|.
% \item[v2.1] Use \cs{nobreakspace} instead of the tilda character. This avoids
%   conflicts with Babel in Spanish environments.\\
%   Fix bug reported by Knut Lickert: index entries were unconditionally built.
% \item[v2.0] New feature: note levels.\\
%   New feature: \fx note counters and usage summary.\\
%   Suggestions from Kasper B. Graversen |<kbg@dkik.dk>|.\\
%   Support for Spanish thanks to Agust\'in Mart\'in |<agusmba@terra.es>|
% \item[v1.5] New appearance option: \texttt{inline}.
% \item[v1.4] Support for the \komascript classes.\\
%   Fix bug reported by Ulf Jaenicke-Roessler: the \cs{listoffixmes} command
%   didn't work when called before the first \fx note.
% \item[v1.3] Support for Italian thanks to Riccardo Murri
%   |<murri@phc.unipi.it>|.
% \item[v1.2] Support for German thanks to Harald Harders
%   |<h.harders@tu-bs.de>|.
% \end{itemize}
%
% \StopEventually{\par Well, I think that's it. Enjoy using \fx!
%   \vfill\hfill\small \packagecopyright{}.}
%
% \section{Implementation}
% \subsection{Preamble}
%    \begin{macrocode}
%<fixme>\NeedsTeXFormat{LaTeX2e}
%<*header>
\ProvidesPackage{fixme}[2009/09/10 v4.0 Insert fixme notes in your documents]

%</header>
%    \end{macrocode}
% Some required packages:
%    \begin{macrocode}
%<*fixme>
\RequirePackage{ifthen}
\RequirePackage{verbatim}
\RequirePackage{xkeyval}[2006/11/18]

%</fixme>
%    \end{macrocode}
% \begin{macro}{\fixmelogo}
%   The \fx logo:
%    \begin{macrocode}
%<*header>
\newcommand\fixmelogo{\textsf{FiXme}}

%</header>
%    \end{macrocode}
% \end{macro}
%
% \subsection{Utilities}
% \subsubsection{Miscellaneous}
% \begin{macro}{\@fxpkginfo}
%   \begin{macro}{\@fxpkgwarning}
%     \marg{msg}\\
%     Issue a \fx package info or warning:
%    \begin{macrocode}
%<*fixme>
\newcommand\@fxpkginfo{\PackageInfo{FiXme}}
\newcommand\@fxpkgwarning{\PackageWarning{FiXme}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxpkgerror}
%   \marg{shortmsg}\marg{longmsg}\\
%   Issue a \fx package error:
%    \begin{macrocode}
\newcommand\@fxpkgerror{\PackageError{FiXme}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{\texttt{xkeyval} related}
% \begin{macro}{\@fxkeyifundefined}
%   \marg{families}\marg{keys}\marg{then}\marg{else}
%    \begin{macrocode}
\newcommand\@fxkeyifundefined{\key@ifundefined[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefinekey}
%   \marg{family}\marg{key}\oarg{default}\marg{function}
%    \begin{macrocode}
\newcommand\@fxdefinekey{\define@key[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxvoidkeyerror}
%   \marg{key}\marg{value}\\
%   Issue a \fx error about a void key misuse (see below):
%    \begin{macrocode}
\newcommand*\@fxvoidkeyerror[2]{%
  \@fxpkgerror{misuse of key '#1'}{%
    You have given the key '#1' the argument '#2' but it takes
    none.\MessageBreak
    Type X to quit, fix that key and re-run LaTeX.\MessageBreak}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefinevoidkey}
%   \marg{family}\marg{name}\marg{func}\\
%   A \fx ``void key'' is an \texttt{xkeyval} key that doesn't expect any
%   argument.
%    \begin{macrocode}
\newcommand*\@fxdefinevoidkey[3]{%
  \define@key[fx]{#1}{#2}[]{%
    \ifthenelse{\equal{##1}{}}{%
      #3}{%
      \@fxvoidkeyerror{#2}{##1}}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefineboolkey}
%   \oarg{func}\marg{family}\marg{name}\\
%   A \fx ``boolean key'' is like an \texttt{xkeyval} one, with the
%   addition that for every such \texttt{key}, there is a \texttt{nokey} void
%   key counterpart.
%    \begin{macrocode}
\newcommand*\@fxdefineboolkey[3][]{%
  \define@boolkey[fx]{#2}{#3}[true]{#1}
  \@fxdefinevoidkey{#2}{no#3}{\@nameuse{fx@#2@#3}{false}}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefinecmdkey}
%   \marg{family}\oarg{mp}\marg{key}\oarg{default}\marg{function}
%    \begin{macrocode}
\newcommand\@fxdefinecmdkey{\define@cmdkey[fx]}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdefinechoicekey}
%   \marg{family}\marg{key}\oarg{bin}\marg{alternatives}\ignorespaces
%   \oarg{default}\marg{function}
%    \begin{macrocode}
\newcommand\@fxdefinechoicekey{\define@choicekey[fx]}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxsetkeys}
%   \marg{families}\oarg{na}\marg{keys}
%    \begin{macrocode}
\newcommand\@fxsetkeys{\setkeys[fx]}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxpresetkeys}
%   \marg{families}\marg{head keys}\marg{tail keys}
%    \begin{macrocode}
%%      Note: currently unused
%%      \newcommand\@fxpresetkeys{\presetkeys[fx]}
%    \end{macrocode}
% \end{macro}
%
% \subsection{List macros}
% \subsubsection{Contents lines\label{sec:code:contentsline}}
% \begin{macro}{\l@fixme}
%   We use the same layout as for the list of figures.
%    \begin{macrocode}
\let\l@fixme\l@figure
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxdottedtocline}
%   \marg{tocdepth}\marg{indent}\marg{numwidth}\marg{contents}\marg{target}\\
%   This macro is copied almost verbatim from \LaTeX's core. The intent is to
%   do a similar layout, but replacing the last argument, normally a page
%   number, by arbitrary text (in our case, a note's target). The original
%   macro defines a restricted width to typeset the page number which is much
%   too short for us, so we just let the \meta{target} text take all the space
%   it needs.
%    \begin{macrocode}
\newcommand*\@fxdottedtocline[5]{%
  \ifnum #1>\c@tocdepth \else
    \vskip \z@ \@plus.2\p@
    {\leftskip #2\relax \rightskip \@tocrmarg \parfillskip -\rightskip
     \parindent #2\relax\@afterindenttrue
     \interlinepenalty\@M
     \leavevmode
     \@tempdima #3\relax
     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
     {#4}\nobreak
     \leaders\hbox{$\m@th
	\mkern \@dotsep mu\hbox{.}\mkern \@dotsep
	mu$}\hfill
     \nobreak
     #5\par}%
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fxcontentsline}
%   \marg{contents}\marg{target}\\
%   Similar to \LaTeX's \cs{contentsline} macro, but temporarily bind
%   \cs{@dottedtocline} to our own version. The nice thing about this
%   implementation is that we can still use \cs{l@fixme} (remember that it is
%   bound to \cs{l@figure}) without exactly knowing what its definition is.
%   This macro is at the user level because \cs{contentsline} is, but it is
%   not currently documented in the user manual.
%    \begin{macrocode}
\newcommand*\fxcontentsline[2]{%
  \begingroup%
  \let\@dottedtocline\@fxdottedtocline%
  \l@fixme{#1}{#2}%
  \endgroup}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fxaddcontentsline}
%   \marg{contents}\\
%   Wrapper around \LaTeX's \cs{addcontentsline} macro to handle the
%   \texttt{target} option. If a specific target is provided, we can't use the
%   normal \cs{addcontentsline} macro for reasons explained above, so we use
%   our own version of \cs{contentsline} instead. This macro is at the user
%   level because \cs{addcontentsline} is, but it is not currently documented
%   in the user manual.
%    \begin{macrocode}
\newcommand*\fxaddcontentsline[1]{%
  \ifthenelse{\equal{\cmdfx@note@target}{thepage}}{%
    \addcontentsline{lox}{fixme}{#1}}{%
    \addtocontents{lox}{\protect\fxcontentsline{#1}{\cmdfx@note@target}}}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{List title}
% \begin{macro}{\listfixmename}
%   \mbox{}
%    \begin{macrocode}
\newcommand\listfixmename{}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{List headers}
% Lists are output in a document class dependant fashion. Classes
% currently recognized are \texttt{article}, \texttt{report},
% \texttt{book} and their \komascript replacements.
% \subsubsubsection{\texttt{article} version}
% \begin{macro}{\@lox@prtc@article}
%   \begin{macro}{\@lox@psttc@article}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@article{%
  \section*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}}
\let\@lox@psttc@article\relax

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{report} version}
% \begin{macro}{\@lox@prtc@report}
%   \begin{macro}{\@lox@psttc@report}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@report{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}}
\newcommand\@lox@psttc@report{\if@restonecol\twocolumn\fi}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{book} version}
% \begin{macro}{\@lox@prtc@book}
%   \begin{macro}{\@lox@psttc@book}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@book{%
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\listfixmename%
    \@mkboth{\MakeUppercase\listfixmename}{\MakeUppercase\listfixmename}}}
\newcommand\@lox@psttc@book{\if@restonecol\twocolumn\fi}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
%
% The code below (version 3.3) mimics \komascript version 2006/07/30 v2.95b.
% Older versions (using chapter*) are no longer supported because it is
% simpler that way, but if some people complain, I'll  have to conditionalize
% on the \komascript version, which would be a \textsc{pita}.
% \begin{macro}{\lox@heading}
%   \mbox{}
%    \begin{macrocode}
\newcommand\lox@heading{\float@listhead{\listfixmename}}

%    \end{macrocode}
%  \end{macro}
%  \subsubsubsection{\texttt{scrartcl} version}
%  \begin{macro}{\@lox@prtc@scrartcl}
%    \begin{macro}{\@lox@psttc@scrartcl}
%      \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@scrartcl{%
  \begingroup%
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative}
\let\@lox@psttc@scrartcl\endgroup

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{scrreprt} version}
% \begin{macro}{\@lox@prtc@scrreprt}
%   \begin{macro}{\@lox@psttc@scrreprt}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@scrreprt{%
  \begingroup%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative}
\newcommand\@lox@psttc@scrreprt{%
    \if@restonecol\twocolumn\fi
  \endgroup}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
% \subsubsubsection{\texttt{scrbook} version}
% \begin{macro}{\@lox@prtc@scrbook}
%   \begin{macro}{\@lox@psttc@scrbook}
%     \mbox{}
%    \begin{macrocode}
\newcommand\@lox@prtc@scrbook{%
  \begingroup%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \lox@heading%
    \setparsizes{0}{0}{\z@\@plus 1fil}\par@updaterelative}
\newcommand\@lox@psttc@scrbook{%
    \if@restonecol\twocolumn\fi
  \endgroup}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
%
% \subsubsection{Status/class-dependent implementation}
% \begin{macro}{\lox@final}
%   \begin{macro}{\lox@draft}
%     In order to prevent the List of Fixme's heading from being generated
%     when there are no \fx notes, a test on the existence of the
%     \texttt{lox} file is performed. There's a slight bug left however:
%     after removing the last fixme note, one ends up with an empty
%     \texttt{lox} file, so the heading still appears. Previously, this
%     was done by checking if some \fx notes were given, but that was
%     buggy: the List of Fixme's could not appear before the first fixme
%     note\ldots I should try to detect whether the file is empty.
%    \begin{macrocode}
\let\lox@final\relax
\newcommand\lox@draft{%
  \IfFileExists{\jobname .lox}{%
    \@lox@prtc%
    \@starttoc{lox}%
    \@lox@psttc}{%
    \@starttoc{lox}}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\lox@draft@ams}
%   The \texttt{amsbook} and \texttt{amsart} classes have the very ugly idea
%   of redefining the \cs{@starttoc} macro to take two arguments. Therefore, I
%   need to provide a specific version of the \cs{listoffixmes} macro:
%    \begin{macrocode}
\newcommand\lox@draft@ams{\@starttoc{lox}\listfixmename}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Layout}
% \begin{option}{multiuser}
%   \begin{option}{singleuser}
%     \begin{option}{mode}
%       These options specify whether \fx should function in standalone or
%       collaborative mode, allowing the different layouts to tweak their
%       output.
%    \begin{macrocode}
\@fxdefineboolkey[%
  \ifthenelse{\equal{#1}{true}}{%
    \fx@mode@singleuserfalse}{%
    \fx@mode@singleusertrue}]{%
    mode}{multiuser}
\@fxdefineboolkey[%
  \ifthenelse{\equal{#1}{true}}{%
    \fx@mode@multiuserfalse}{%
    \fx@mode@multiusertrue}]{%
    mode}{singleuser}
\@fxdefinechoicekey{mode}{mode}{multiuser,singleuser}{\@fxsetkeys{mode}{#1}}

%    \end{macrocode}
%     \end{option}
%   \end{option}
% \end{option}
% \begin{macro}{\@fxsetlayoutkeys}
%   \marg{keys}\\
%   This macro would probably be overkill if we did not need to
%   \cs{expandafter} it at some point (see section
%   \sectionref{sec:code:layoutdispatch}).
%    \begin{macrocode}
\newcommand\@fxsetlayoutkeys{\@fxsetkeys{layout}}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Layout creation}
% \begin{macro}{\@fxlayouts}
%   A comma-separated list of available layouts. The order in which we add the
%   built-in layouts is important: we start with the footnote layout, so that
%   it is sticked properly to the preceding text if active. Next we handle
%   marginal layouts so that they are also close to the text to fix.
%    \begin{macrocode}
\let\@fxlayouts\empty
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\FXRegisterLayout}
%   \oarg{boolfunc}\marg{name}\marg{funcname}\\
%   Register a new layout with \fx. This currently involves creating the
%   boolean layout option with an optional function argument, constructing the
%   translation macro to call the actual layout macro, and updating the layout
%   list. The translation macro can't be \cs{let} to the real one, because
%   themes might want to redefine latter.
%    \begin{macrocode}
\newcommand*\FXRegisterLayout[3][]{%
  \@fxkeyifundefined{layout}{#2}{%
    \@fxdefineboolkey[#1]{layout}{#2}%
    \expandafter\def\csname @fxlayout@#2\endcsname{#3}%
    \ifx\@fxlayouts\empty%
      \g@addto@macro\@fxlayouts{#2}%
    \else%
      \g@addto@macro\@fxlayouts{,#2}%
    \fi}{%
    \@fxpkgerror{layout '#2' already registered}{%
      You have called \string\FXRegisterLayout\space with a name already in
      use.\MessageBreak
      If you want to modify an existing layout, renew its
      command.\MessageBreak
      Otherwise, you must choose a different name.}}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Built-in layouts}
% Remember that the order is important!
% \subsubsubsection{Footnote}
% \begin{option}{footnote}
%   \begin{option}{nofootnote}
%     \begin{macro}{\FXLayoutFootnote}
%       \begin{macro}{\@fxlayout@footnote}
%         \marg{type}\marg{note}\marg{author}
%    \begin{macrocode}
\newcommand*\FXLayoutFootnote[3]{%
  \footnote{\ignorespaces#3 \@nameuse{fx#1name}: #2}}
\FXRegisterLayout{footnote}{\FXLayoutFootnote}
%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{option}
% \end{option}
%
% \subsubsubsection{Margin}
% \begin{option}{margin}
%   \begin{option}{nomargin}
%     \begin{macro}{\FXLayoutMargin}
%       \begin{macro}{\@fxlayout@margin}
%         \marg{type}\marg{note}\marg{author}
%    \begin{macrocode}
\newcommand*\FXLayoutMargin[3]{%
  \marginpar[%
  \footnotesize\raggedleft\ignorespaces#3 \@nameuse{fx#1name}: #2]{%
    \footnotesize\raggedright\ignorespaces#3 \@nameuse{fx#1name}: #2}}
\FXRegisterLayout[%
  \ifthenelse{\boolean{fx@layout@margin}\and\boolean{fx@layout@marginclue}}{%
    \@fxpkgwarning{%
      marginal notes requested;\MessageBreak
      turning marginal clues off}%
    \fx@layout@marginclue{false}}]{%
    margin}{\FXLayoutMargin}
%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{option}
% \end{option}
%
% \subsubsubsection{Margin clue}
% \begin{option}{marginclue}
%   \begin{option}{nomarginclue}
%     \begin{macro}{\FXLayoutMarginCLue}
%       \begin{macro}{\@fxlayout@marginclue}
%         \marg{type}\marg{note}\marg{author}
%    \begin{macrocode}
\newcommand*\FXLayoutMarginClue[3]{%
  \marginpar[\footnotesize\raggedleft\ignorespaces#3 \@nameuse{fx#1name}!]{%
    \footnotesize\raggedright\ignorespaces#3 \@nameuse{fx#1name}!}}
\FXRegisterLayout[%
  \ifthenelse{\boolean{fx@layout@marginclue}\and\boolean{fx@layout@margin}}{%
    \@fxpkgwarning{%
      marginal clues requested;\MessageBreak
      turning marginal notes off}%
    \fx@layout@margin{false}}]{%
    marginclue}{\FXLayoutMarginClue}
%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{option}
% \end{option}
%
% \subsubsubsection{Inline}
% \begin{option}{inline}
%   \begin{option}{noinline}
%     \begin{macro}{\FXLayoutInline}
%       \begin{macro}{\@fxlayout@inline}
%         \marg{type}\marg{note}\marg{author}
%    \begin{macrocode}
\newcommand*\FXLayoutInline[3]{%
  {\bfseries\ignorespaces#3 \@nameuse{fx#1name}: #2}}
\FXRegisterLayout{inline}{\FXLayoutInline}
%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{option}
% \end{option}
%
% \subsubsubsection{Index}
% \begin{macro}{\fixmeindexname}
%   \mbox{}
%    \begin{macrocode}
\newcommand\fixmeindexname{\fixmelogo}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@wrindex}
%   \marg{contents}\\
%   A replacement for \LaTeX's standard \cs{@wrindex} macro to deal with the
%   \texttt{target} option. When given, it is supposed to replace the page
%   number, just as in the list of fixmes.
%    \begin{macrocode}
\def\@wrindex#1{%
  \ifthenelse{\equal{\cmdfx@note@target}{thepage}}{%
    \protected@write\@indexfile{}{\string\indexentry{#1}{\thepage}}}{%
    \protected@write\@indexfile{}{\string\indexentry{#1}{\cmdfx@note@target}}}
  \endgroup
  \@esphack}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxnotekey}
%   \begin{macro}{\@fxwarningkey}
%     \begin{macro}{\@fxerrorkey}
%       \begin{macro}{\@fxfatalkey}
%         The keys used to sort indexed \fx notes by importance level:
%    \begin{macrocode}
\newcommand\@fxnotekey{***a}
\newcommand\@fxwarningkey{***b}
\newcommand\@fxerrorkey{***c}
\newcommand\@fxfatalkey{***d}
%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
% \begin{option}{index}
%   \begin{option}{noindex}
%     \begin{macro}{\FXLayoutIndex}
%       \begin{macro}{\@fxlayout@index}
%         \marg{type}\marg{note}\marg{author}
%    \begin{macrocode}
\newcommand*\FXLayoutIndex[3]{%
  \iffx@mode@multiuser%
    \index{***@\fixmeindexname:%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !\@nameuse{thefx#1count}: #3: #2}%
    \index{***#3@\fixmeindexname{} (#3):%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !\@nameuse{thefx#1count}: #2}%
  \else%
    \index{***@\fixmeindexname:%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !\@nameuse{thefx#1count}: #2}%
  \fi}
\FXRegisterLayout{index}{\FXLayoutIndex}
%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{option}
% \end{option}
%
% \subsubsubsection{Contents line\label{sec:code:contentslinelayout}}
% \begin{macro}{\FXLayoutContentsLine}
%   \marg{type}\marg{note}\marg{author}\\
%   This one is not registered like the others because it is always active and
%   used explicitely by the \texttt{lox} code.
%    \begin{macrocode}
\newcommand*\FXLayoutContentsLine[3]{%
  \iffx@mode@multiuser%
    \fxaddcontentsline{\ignorespaces#3 \@nameuse{fx#1name}: #2}%
  \else%
    \fxaddcontentsline{\@nameuse{fx#1name}: #2}%
  \fi}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Layout control}
% \begin{option}{innerlayout}
%   The alternate inner mode layout:
%    \begin{macrocode}
\@fxdefinecmdkey{layout}{innerlayout}{}
%    \end{macrocode}
% \end{option}
% \begin{option}{morelayout}
%   The \texttt{morelayout} option adds to the existing layout configuration.
%   The implementation is trivial, as it simply boils down to calling
%   \cs{setkeys} on its argument. There are several advantages in doing this.
%   \begin{enumerate}
%   \item It is possible to disable a layout by using the
%     \texttt{no}\meta{layout} form. For example,
%     |morelayout={inline,nomargin}| will work.
%   \item A wrong layout name (for instance, misspelled) will trigger an
%   \texttt{xkeyval} error.
%   \end{enumerate}
%    \begin{macrocode}
\@fxdefinekey{layout}{morelayout}{\@fxsetlayoutkeys{#1}}
%    \end{macrocode}
% \end{option}
% \begin{option}{layout}
%   The \texttt{layout} option lets the user specify exactly which ones she
%   wants to use. Not very difficult to implement either: it works by first
%   deactivating all layouts, and then activating the provided ones as before.
%   Note that the use of the \texttt{no}\meta{layout} form is valid but has no
%   effect.
%    \begin{macrocode}
\@fxdefinekey{layout}{layout}{%
  \@for\@fxlt:=\@fxlayouts\do{\@nameuse{fx@layout@\@fxlt}{false}}%
  \@fxsetlayoutkeys{#1}}
%    \end{macrocode}
% \end{option}
%
% \subsection{Environment Layout}
% \subsubsection{Environment layout creation}
% \begin{macro}{\FXRegisterEnvLayout}
%   \marg{name}\marg{beginfuncname}\marg{endfuncname}\\
%   Register a new environment layout with \fx. This currently only involves
%   constructing the translation macros. The translation macros in question
%   can't be \cs{let} to the real ones, because themes or users might want to
%   redefine the latter.
%    \begin{macrocode}
\newcommand*\FXRegisterEnvLayout[3]{%
  \@ifundefined{@fxenvlayout@#1@begin}{%
    \expandafter\def\csname @fxenvlayout@#1@begin\endcsname{#2}%
    \expandafter\def\csname @fxenvlayout@#1@end\endcsname{#3}}{%
    \@fxpkgerror{environment layout '#2' already registered}{%
      You have called \string\FXRegisterEnvLayout\space with a name already in
      use.\MessageBreak
      If you want to modify an existing environment layout, renew its
      commands.\MessageBreak
      Otherwise, you must choose a different name.}}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Built-in environment layouts}
% \subsubsubsection{Bold}
% \begin{macro}{\FXEnvLayoutBoldBegin}
%   \begin{macro}{\FXEnvLayoutBoldEnd}
%     \marg{type}\marg{author}
%    \begin{macrocode}
\newcommand*\FXEnvLayoutBoldBegin[2]{%
  \bfseries\ignorespaces#2 \@nameuse{fx#1name}: \ignorespaces}
\newcommand*\FXEnvLayoutBoldEnd[2]{}
\FXRegisterEnvLayout{bold}{%
  \FXEnvLayoutBoldBegin}{\FXEnvLayoutBoldEnd}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsubsection{Italics}
% \begin{macro}{\FXEnvLayoutItalicsBegin}
%   \begin{macro}{\FXEnvLayoutItalicsEnd}
%     \marg{type}\marg{author}
%    \begin{macrocode}
\newcommand*\FXEnvLayoutItalicsBegin[2]{%
  \itshape\ignorespaces#2 \@nameuse{fx#1name}: \ignorespaces}
\newcommand*\FXEnvLayoutItalicsEnd[2]{}
\FXRegisterEnvLayout{italics}{%
  \FXEnvLayoutItalicsBegin}{\FXEnvLayoutItalicsEnd}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Environment layout selection}
% \begin{macro}{\@fxselectenvlayout}
%   \marg{name}
%   \begin{macro}{\@fxenvlayout@begin}
%     \begin{macro}{\@fxenvlayout@end}
%       \marg{type}\marg{author}\\
%       This is much simpler than standard layout management because only one
%       environment layout at a time is possible. Using a specific environment
%       layout boils down to possibly loading it, and binding the beginning
%       and ending macros to the proper translation ones.
%    \begin{macrocode}
\newcommand*\@fxselectenvlayout[1]{%
  \expandafter\let\expandafter\@fxenvlayout@begin%
    \csname @fxenvlayout@#1@begin\endcsname%
  \expandafter\let\expandafter\@fxenvlayout@end%
    \csname @fxenvlayout@#1@end\endcsname}

%    \end{macrocode}
%     \end{macro}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Environment layout loading}
% \begin{macro}{\fxloadenvlayouts}
%   \marg{names}
%   \begin{macro}{\fxuseenvlayout}
%     \marg{name}
%    \begin{macrocode}
\newcommand*\fxloadenvlayouts[1]{%
  \@for\@fxlt:=#1\do{\usepackage{fxenvlayout#1}}}
\newcommand*\fxuseenvlayout[1]{%
  \fxloadenvlayouts{#1}%
  \@fxselectenvlayout{#1}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Environment layout control}
% \begin{option}{envlayout}
%    \begin{macrocode}
\@fxdefinekey{envlayout}{envlayout}{%
  \@ifundefined{@fxenvlayout@#1@begin}{%
    \fxuseenvlayout{#1}}{%
    \@fxselectenvlayout{#1}}}

%    \end{macrocode}
% \end{option}
%
% \subsection{Target Layout}
% \subsubsection{Target layout creation}
% \begin{macro}{\FXRegisterTargetLayout}
%   \marg{name}\marg{funcname}\\
%   Register a new target layout with \fx. This currently only involves
%   constructing the translation macro. The translation macro in question
%   can't be \cs{let} to the real one, because themes or user might want to
%   redefine the latter.
%    \begin{macrocode}
\newcommand*\FXRegisterTargetLayout[2]{%
  \@ifundefined{@fxtargetlayout@#1}{%
    \expandafter\def\csname @fxtargetlayout@#1\endcsname{#2}}{%
    \@fxpkgerror{target layout '#1' already registered}{%
      You have called \string\FXRegisterTargetLayout\space with a name
      already in use.\MessageBreak
      If you want to modify an existing target layout, renew its
      command.\MessageBreak
      Otherwise, you must choose another name.}}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Built-in target layouts}
% \subsubsubsection{Bold}
% \begin{macro}{\FXTargetLayoutBold}
%   \marg{target}
%    \begin{macrocode}
\newcommand\FXTargetLayoutBold[1]{\begingroup\bfseries#1\endgroup}
\FXRegisterTargetLayout{bold}{\FXTargetLayoutBold}

%    \end{macrocode}
% \end{macro}
%
% \subsubsubsection{Italics}
% \begin{macro}{\FXTargetLayoutItalics}
%   \marg{target}
%    \begin{macrocode}
\newcommand\FXTargetLayoutItalics[1]{\begingroup\itshape#1\endgroup}
\FXRegisterTargetLayout{italics}{\FXTargetLayoutItalics}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Target layout selection}
% \begin{macro}{\@fxselecttargetlayout}
%   \marg{name}
%   \begin{macro}{\@@fxtargetlayout}
%     \marg{target}\\
%     This is much simpler than standard layout management because only one
%     target layout at a time is possible. Using a specific target layout
%     boils down to possibly loading it, and binding the layout macro to the
%     proper translation one.
%    \begin{macrocode}
\newcommand*\@fxselecttargetlayout[1]{%
  \expandafter\let\expandafter\@@fxtargetlayout%
    \csname @fxtargetlayout@#1\endcsname}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Target layout loading}
% \begin{macro}{\fxloadtargetlayouts}
%   \marg{names}
%   \begin{macro}{\fxusetargetlayout}
%     \marg{name}
%    \begin{macrocode}
\newcommand*\fxloadtargetlayouts[1]{%
  \@for\@fxlt:=#1\do{\usepackage{fxtargetlayout#1}}}
\newcommand*\fxusetargetlayout[1]{%
  \fxloadtargetlayouts{#1}%
  \@fxselecttargetlayout{#1}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Target layout control}
% \begin{option}{targetlayout}
%    \begin{macrocode}
\@fxdefinekey{targetlayout}{targetlayout}{%
  \@ifundefined{@fxtargetlayout@#1}{%
    \fxusetargetlayout{#1}}{%
    \@fxselecttargetlayout{#1}}}

%    \end{macrocode}
% \end{option}
%
% \subsubsection{Status-dependant versions}
% \begin{macro}{\@fxtargetlayout@final}
%   \begin{macro}{\@fxtargetlayout@draft}
%     \marg{target}\\
%     In \texttt{final} mode, the target is typeset as-is. In \texttt{draft}
%     mode, we use the selected layout.
%    \begin{macrocode}
\newcommand\@fxtargetlayout@final[1]{#1}
\newcommand\@fxtargetlayout@draft[1]{\@@fxtargetlayout{#1}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsection{Logging}
% \subsubsection{Logging macros}
% \begin{macro}{\FXLogNote}
%   \begin{macro}{\FXLogWarning}
%     \begin{macro}{\FXLogerror}
%       \begin{macro}{\FXLogFatal}
%         \marg{msg}\\
%         Logging includes both log file and terminal output.
%    \begin{macrocode}
\newcommand*\FXLogNote[1]{%
  \GenericInfo{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Note: '#1'}}
\newcommand*\FXLogWarning[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Warning: '#1'}}
\newcommand*\FXLogError[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Error: '#1'}}
\newcommand*\FXLogFatal[1]{%
  \GenericWarning{%
    (FiXme)\@spaces\@spaces\@spaces\@spaces}{%
    FiXme Fatal Error: '#1'}}

%    \end{macrocode}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxlog@note}
%   \begin{macro}{\@fxlog@warning}
%     \begin{macro}{\@fxlog@error}
%       \begin{macro}{\@fxlog@fatal}
%         In order for the generic note dispatcher to be able to call the
%         logging macros (see section \sectionref{sec:code:lowlevelcmd}), we
%         need an easier translation mechanism from the note type to the
%         actual macro name. The translation macros in question can't be
%         \cs{let} to the real one, because users might want to redefine
%         the actual log macros later.
%    \begin{macrocode}
\def\@fxlog@note{\FXLogNote}
\def\@fxlog@warning{\FXLogWarning}
\def\@fxlog@error{\FXLogError}
\def\@fxlog@fatal{\FXLogFatal}

%    \end{macrocode}
%      \end{macro}
%    \end{macro}
%  \end{macro}
% \end{macro}
%
% \subsubsection{Logging control}
% \begin{option}{silent}
%   \begin{option}{nosilent}
%     Whether to log \fx notes:
%    \begin{macrocode}
\@fxdefineboolkey{log}{silent}

%    \end{macrocode}
%   \end{option}
% \end{option}
%
% \subsection{\fx notes}
% \subsubsection{Note parameters}
% \begin{counter}{fixmecount}
%   \texttt{fixmecount} maintains the total of all notes, regardless of their
%   level.
%    \begin{macrocode}
\newcounter{fixmecount}

%    \end{macrocode}
% \end{counter}
% \begin{macro}{\@fxnoteparameters}
%   \marg{type}\\
%   The following macro creates all required note parameters. This currently
%   comprises the note counter and names (singular and plural). The names will
%   be initialized when executing the language option(s).
%    \begin{macrocode}
\newcommand*\@fxnoteparameters[1]{%
  \newcounter{fx#1count}
  \expandafter\newcommand\csname fx#1name\endcsname{}
  \expandafter\newcommand\csname fx#1sname\endcsname{}}

%    \end{macrocode}
% \end{macro}
% \begin{counter}{fx*count}
%   \begin{macro}{\fx*name}
%     \begin{macro}{\fx*sname}
%       \makeatletter
%         \let\PrintMacroName=\@gobble
%         \let\PrintEnvName=\@gobble
%         \let\PrintCounterName=\@gobble
%       \makeatother
%       \begin{counter}{fxnotecount}
%         \begin{macro}{fxnotename}
%           \begin{macro}{fxnotesname}
%             \begin{counter}{fxwarningcount}
%               \begin{macro}{fxwarningname}
%                 \begin{macro}{fxwarningsname}
%                   \begin{counter}{fxerrorcount}
%                     \begin{macro}{fxerrorname}
%                       \begin{macro}{fxerrorsname}
%                         \begin{counter}{fxfatalcount}
%                           \begin{macro}{fxfatalname}
%                             \begin{macro}{fxfatalsname}
%                               And we use it for all note types:
%    \begin{macrocode}
\@fxnoteparameters{note}
\@fxnoteparameters{warning}
\@fxnoteparameters{error}
\@fxnoteparameters{fatal}

%    \end{macrocode}
%                             \end{macro}
%                           \end{macro}
%                         \end{counter}
%                       \end{macro}
%                     \end{macro}
%                   \end{counter}
%                 \end{macro}
%               \end{macro}
%             \end{counter}
%           \end{macro}
%         \end{macro}
%       \end{counter}
%     \end{macro}
%   \end{macro}
% \end{counter}
% \begin{option}{author}
%   A \fx note's ``author'' allows to distinguish notes from different
%   persons in collaborative mode.
%    \begin{macrocode}
\@fxdefinecmdkey{note}{author}{}
%    \end{macrocode}
% \end{option}
% \begin{option}{target}
%   A \fx note's ``target'' may replace the page number in the list of
%   fixmes or in the index (see also section
%   \sectionref{sec:code:contentslinelayout}).
%    \begin{macrocode}
\@fxdefinecmdkey{note}{target}{}
%    \end{macrocode}
% \end{option}
%
% \subsubsection{Layout dispatch\label{sec:code:layoutdispatch}}
% \begin{macro}{\@fxhandleinnermode}
%   Handle the case where \TeX{} is in inner mode. We use the alternate layout
%   provided by the \texttt{innerlayout} option, and we make sure to disable
%   both the \texttt{margin} and \texttt{marginclue} layout forms. This is
%   done by appending \texttt{nomargin} and \texttt{nomarginclue} to the inner
%   layout value (this also renders nasty user settings harmless). Before
%   that, we provide some informative message if risky layout forms were
%   active.
%    \begin{macrocode}
\newcommand\@fxhandleinnermode{%
  \ifinner%
    \ifthenelse{\boolean{fx@layout@margin}}{%
      \@fxpkginfo{%
	inner mode detected;\MessageBreak
	turning margin layout form off}}{%
      \ifthenelse{\boolean{fx@layout@marginclue}}{%
	\@fxpkginfo{%
	  inner mode detected;\MessageBreak
	  turning marginclue layout form off}}{}}%
    \expandafter\@fxsetlayoutkeys\expandafter{%
      \cmdfx@layout@innerlayout,nomargin,nomarginclue}%
  \fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxlayout}
%   \marg{type}\marg{note}\\
%   Dispatch to all active layouts.
%    \begin{macrocode}
\newcommand*\@fxlayout[2]{%
  \@fxhandleinnermode%
  \@for\@fxlt:=\@fxlayouts\do{%
    \@nameuse{iffx@layout@\@fxlt}%
      \@nameuse{@fxlayout@\@fxlt}{#1}{#2}{\cmdfx@note@author}%
    \fi}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Status-dependent implementation\label{sec:code:lowlevelcmd}}
% \begin{macro}{\@@@fxnote@final}
%   \begin{macro}{\@@@fxnote@draft}
%     \marg{type}\marg{note}\\
%     The lower-level macros that perform the real job:
%    \begin{macrocode}
\newcommand*\@@@fxnote@final[2]{%
  \ifthenelse{\equal{#1}{fatal}}{%
    \@fxpkgerror{'#2' fatal error left in final version}{%
      You are currently processing in final mode,\MessageBreak
      but you still have some FiXme fatal errors left behind.\MessageBreak
      Type X to quit, fix your document (or switch back to draft
      mode),\MessageBreak
      and rerun LaTeX.}}{%
    \FXLayoutContentsLine{#1}{#2}{\cmdfx@note@author}%
    \iffx@log@silent\else\@nameuse{@fxlog@#1}{#2}\fi}}
\newcommand*\@@@fxnote@draft[2]{%
  \@fxlayout{#1}{#2}%
  \FXLayoutContentsLine{#1}{#2}{\cmdfx@note@author}%
  \iffx@log@silent\else\@nameuse{@fxlog@#1}{#2}\fi}

%    \end{macrocode}
%  \end{macro}
% \end{macro}
%
% \subsubsection{Standard version}
% \begin{macro}{\@fxpostconfigure}
%   This macro is used in \cs{@@fxnote} below, after processing user options
%   (even when there is none), to postconfigure some aspects of the notes.
%   Currently, this involves two things: setting the author to \cs{fixmelogo}
%   if it still is \texttt{fixme}, and automatically tracking the current
%   language if required (note that all other language options turn tracking
%   off, meaning that one can override language tracking locally by providing
%   a language explicitely). Since environments need the post-configuration
%   done sooner, they perform it themselves and rebind this macro to
%   \cs{relax}.
%    \begin{macrocode}
\newcommand*\@fxpostconfigure{%
  \ifthenelse{\equal{\cmdfx@note@author}{fixme}}{%
    \@fxsetkeys{note}{author=\fixmelogo}}{}%
  \iffx@lang@langtrack%
    \@fxkeyifundefined{lang}{\languagename}{%
      \@fxpkgwarning{unknown language '\languagename';\MessageBreak
        falling back to \@fxdefaultlang}%
      \@fxsetkeys{lang}{\@fxdefaultlang}}{%
      \@fxsetkeys{lang}{\languagename}}
  \fi}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxendgroup}
%   This macro is used in \cs{@@fxnote} below to close the group opened at the
%   user level. Since environments need the group opened for a longer time,
%   they rebind it to \cs{relax} and close the group themselves later on.
%    \begin{macrocode}
\let\@fxendgroup\endgroup
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@fxnote}
%   \marg{type}\marg{note}\\
%   This level of indirection is needed because the counters need to be
%   updated regardless of the document status.
%    \begin{macrocode}
\def\@@fxnote#1#2{%
    \@fxpostconfigure%
    \stepcounter{fixmecount}%
    \stepcounter{fx#1count}%
    \@@@fxnote{#1}{#2}%
  \@fxendgroup}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxnote}
%   \marg{type}\oarg{options}\marg{note}
%    \begin{macrocode}
\def\@fxnote#1[#2]#3{%
  \@fxsetkeys{mode,status,lang,log,note,layout}{#2}%
  \@@fxnote{#1}{#3}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Starred version}
% \begin{macro}{\@@fxsnote}
%   \marg{type}\marg{note}\marg{text}\\
%   Post-configuration is done here (it's the code path confluent for all
%   starred commands). Relaxing post-configuration afterwards is to prevent
%   \cs{@@fxnote} from doing it again.
%    \begin{macrocode}
\long\def\@@fxsnote#1#2#3{%
  \@fxpostconfigure\let\@fxpostconfigure\relax%
  \@fxtargetlayout{#3}\@@fxnote{#1}{#2}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxsnote}
%   \marg{type}\oarg{options}\marg{note}\marg{text}\\
%   Note the \texttt{targetlayout} family here.
%    \begin{macrocode}
\long\def\@fxsnote#1[#2]#3#4{%
  \@fxsetkeys{mode,status,lang,log,note,layout,targetlayout}{#2}%
  \@@fxsnote{#1}{#3}{#4}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{User-level interface generation}
% \begin{macro}{\@fxpreconfigure}
%   \marg{author}\\
%   This macro is used at the beginning of every user-level entry point (here
%   for notes, and also in the environments section), to preconfigure some
%   aspects of the notes, before possibly processing options. Currently, this
%   only involves presetting the note's author to the one specified in the
%   call to \cs{FXRegisterAuthor}. This however is not done for the built-in
%   \texttt{fixme} author, because this one should honor a global setting.
%    \begin{macrocode}
\newcommand*\@fxpreconfigure[1]{%
  \ifthenelse{\equal{#1}{fixme}}{}{\@fxsetkeys{note}{author=#1}}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@fxnewnotemacro}
%   \marg{prefix}\marg{type}\marg{author}\\
%   This macro defines the user-level interface:
%    \begin{macrocode}
\newcommand*\@fxnewnotemacro[3]{%
  \expandafter\DeclareRobustCommand\csname #1#2\endcsname{%
    \begingroup%
      \@fxpreconfigure{#3}%
      \@ifstar{%
        \@ifnextchar[%]
        {\@fxsnote{#2}}{\@@fxsnote{#2}}}{%
        \@ifnextchar[%]
        {\@fxnote{#2}}{\@@fxnote{#2}}}}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{\fx environments}
% A \fx environment's summary is laid out by the corresponding macro, but
% the \texttt{inline} layout is disabled. This is as easy as appending
% \texttt{noinline} to the end of the options list.
% \subsubsection{Status-dependent implementation}
% \begin{macro}{\@@@@fxbeginenv@final}
%   \begin{macro}{\@@@@fxbeginenv@draft}
%     \begin{macro}{\@fxendenv@final}
%       \begin{macro}{\@fxendenv@draft}
%         \marg{type}\\
%         In final mode, \texttt{verbatim}'s \texttt{comment} environment is
%         used to suppress output.
%    \begin{macrocode}
\def\@@@@fxbeginenv@final#1{\comment}
\def\@@@@fxbeginenv@draft#1{\@fxenvlayout@begin{#1}{\cmdfx@note@author}}
\def\@fxendenv@final#1{\endcomment}
\def\@fxendenv@draft#1{\@fxenvlayout@end{#1}{\cmdfx@note@author}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Standard versions}
% \begin{macro}{\@@@fxbeginenv}
%   \begin{macro}{\@@fxbeginenv}
%     \marg{type}\marg{summary}\\
%     Post-configuration is done here (it's the code path confluent for all
%     non-starred environments). Relaxing post-configuration afterwards is to
%     prevent \cs{@@fxnote} from doing it again.
%    \begin{macrocode}
\def\@@@fxbeginenv#1#2{%
  \@fxpostconfigure\let\@fxpostconfigure\relax%
  \@@fxnote{#1}{#2}%
  \@@@@fxbeginenv{#1}}
\def\@@fxbeginenv#1#2{%
  \@fxsetkeys{layout}{noinline}%
  \@@@fxbeginenv{#1}{#2}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxbeginenv}
%   \marg{type}\oarg{options}\marg{summary}
%    \begin{macrocode}
\def\@fxbeginenv#1[#2]#3{%
  \@fxsetkeys{mode,status,lang,log,note,layout,envlayout}{#2,noinline}%
  \@@@fxbeginenv{#1}{#3}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Starred versions}
% \begin{macro}{\@@@fxbeginsenv}
%   \begin{macro}{\@@fxbeginsenv}
%     \marg{type}\marg{summary}\marg{text}\\
%     Post-configuration is done here (it's the code path confluent for all
%     starred environments). Relaxing post-configuration afterwards is to
%     prevent \cs{@@fxsnote} from doing it again.
%    \begin{macrocode}
\long\def\@@@fxbeginsenv#1#2#3{%
  \@fxpostconfigure\let\@fxpostconfigure\relax%
  \@@fxsnote{#1}{#2}{#3}
  \@@@@fxbeginenv{#1}}
\long\def\@@fxbeginsenv#1#2#3{%
  \@fxsetkeys{layout}{noinline}%
  \@@@fxbeginsenv{#1}{#2}{#3}}
%    \end{macrocode}
%   \end{macro}
% \end{macro}
% \begin{macro}{\@fxbeginenv}
%   \marg{type}\oarg{options}\marg{summary}\marg{text}\\
%   Note the \texttt{targetlayout} family here.
%    \begin{macrocode}
\long\def\@fxbeginsenv#1[#2]#3#4{%
  \@fxsetkeys{mode,status,lang,log,note,layout,envlayout,targetlayout}{%
    #2,noinline}%
  \@@@fxbeginsenv{#1}{#3}{#4}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{User-level interface generation}
% \begin{macro}{\@fxnewnoteenvs}
%   \marg{prefix}\marg{type}\marg{author}\\
%   This macro defines the user-level interface. The ending macros are
%   identical. Also, the environments close their own group, so we prevent
%   \cs{@@fxnote} from doing so by temporarily rebinding \cs{@fxendgroup} to
%   \cs{relax}.
%    \begin{macrocode}
\newcommand*\@fxnewnoteenvs[3]{%
  \expandafter\def\csname #1#2\endcsname{%
    \begingroup%
      \let\@fxendgroup\relax%
      \@fxpreconfigure{#3}%
      \@ifnextchar[%]
        {\@fxbeginenv{#2}}{\@@fxbeginenv{#2}}}
  \expandafter\def\csname end#1#2\endcsname{%
      \@fxendenv{#2}%
    \endgroup}%
  \expandafter\long\expandafter\def\csname #1#2*\endcsname{%
    \begingroup%
      \let\@fxendgroup\relax%
      \@fxpreconfigure{#3}%
      \@ifnextchar[%]
        {\@fxbeginsenv{#2}}{\@@fxbeginsenv{#2}}}
  \expandafter\def\csname end#1#2*\endcsname{%
      \@fxendenv{#2}%
    \endgroup}}

%    \end{macrocode}
% \end{macro}
%
% \subsection{\fx authors}
% \begin{macro}{\FXRegisterAuthor}
%   \marg{cmdprefix}\marg{envprefix}\marg{name}\\
%   This macro creates the whole user-level interface for a particular author:
%    \begin{macrocode}
\newcommand*\FXRegisterAuthor[3]{%
  \@ifundefined{#1note}{}{%
    \@fxpkgerror{command prefix '#1' already in use}{%
      You have called \string\FXRegisterAuthor\space with a command prefix
      already in use.\MessageBreak
      Please choose another one.}}%
  \@ifundefined{#2note}{}{%
    \@fxpkgerror{environment prefix '#2' already in use}{%
      You have called \string\FXRegisterAuthor\space with an environment
      prefix already in use.\MessageBreak
      Please choose another one.}}%
  \@fxnewnotemacro{#1}{note}{#3}%
  \@fxnewnotemacro{#1}{warning}{#3}%
  \@fxnewnotemacro{#1}{error}{#3}%
  \@fxnewnotemacro{#1}{fatal}{#3}%
  \@fxnewnoteenvs{#2}{note}{#3}%
  \@fxnewnoteenvs{#2}{warning}{#3}%
  \@fxnewnoteenvs{#2}{error}{#3}%
  \@fxnewnoteenvs{#2}{fatal}{#3}}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fx*[*]}
%   \begin{environment}{anfx*[*]}
%     \makeatletter
%       \let\PrintMacroName=\@gobble
%       \let\PrintEnvName=\@gobble
%     \makeatother
%     \begin{macro}{\fxnote}
%       \begin{macro}{\fxwarning}
%         \begin{macro}{\fxerror}
%           \begin{macro}{\fxfatal}
%             \begin{macro}{\fxnote*}
%               \begin{macro}{\fxwarning*}
%                 \begin{macro}{\fxerror*}
%                   \begin{macro}{\fxfatal*}
%                     \begin{environment}{anfxnote}
%                       \begin{environment}{anfxwarning}
%                         \begin{environment}{anfxerror}
%                           \begin{environment}{anfxfatal}
%                             \begin{environment}{anfxnote*}
%                               \begin{environment}{anfxwarning*}
%                                 \begin{environment}{anfxerror*}
%                                   \begin{environment}{anfxfatal*}
%     And we use it to create the \fx default user:
%    \begin{macrocode}
\FXRegisterAuthor{fx}{anfx}{fixme}
%    \end{macrocode}
%                                   \end{environment}
%                                 \end{environment}
%                               \end{environment}
%                             \end{environment}
%                           \end{environment}
%                         \end{environment}
%                       \end{environment}
%                     \end{environment}
%                   \end{macro}
%                 \end{macro}
%               \end{macro}
%             \end{macro}
%           \end{macro}
%         \end{macro}
%       \end{macro}
%     \end{macro}
%   \end{environment}
% \end{macro}
% \begin{macro}{\fixme}
%   \oarg{options}\marg{note}\\
%   Deprecate \cs{fixme}:
%    \begin{macrocode}
\DeclareRobustCommand\fixme{%
  \@fxpkgwarning{\string\fixme\space is deprecated;\MessageBreak
    please use \string\fxfatal\space instead}%
  \fxfatal}
%    \end{macrocode}
% \end{macro}
% \begin{environment}{afixme}
%   Deprecate the \texttt{afixme} environment:
%    \begin{macrocode}
\def\afixme{%
  \@fxpkgwarning{The 'afixme' environment is deprecated;\MessageBreak
    please use 'anfxfatal' instead}%
  \anfxfatal}
\let\endafixme\endanfxfatal
%    \end{macrocode}
% \end{environment}
%
% \subsection{Internationalization\label{sec:code:i18n}}
% \begin{option}{langtrack}
%   Whether to track the value of \cs{languagename} automatically:
%    \begin{macrocode}
\@fxdefineboolkey{lang}{langtrack}

%    \end{macrocode}
% \end{option}
% \begin{option}{defaultlang}
%   Which language to use when tracking leads to an unsuported language.
%    \begin{macrocode}
\@fxdefinechoicekey{lang}{defaultlang}[\@fxdefaultlang]{%
  english,french,francais,spanish,italian,german,ngerman,danish,croatian}{}

%    \end{macrocode}
% \end{option}
% Because an explicit language setting overrides language tracking, all the
% options below turn language tracking off.
% \begin{option}{english}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{english}{%
  \@fxsetkeys{lang}{langtrack=false}%
  \renewcommand\fxnotename{Note}%
  \renewcommand\fxnotesname{Notes}%
  \renewcommand\fxwarningname{Warning}%
  \renewcommand\fxwarningsname{Warnings}%
  \renewcommand\fxerrorname{Error}%
  \renewcommand\fxerrorsname{Errors}%
  \renewcommand\fxfatalname{Fatal}%
  \renewcommand\fxfatalsname{Fatals}%
  \renewcommand\listfixmename{List of Corrections}}
%    \end{macrocode}
% \end{option}
% \begin{option}{french}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{french}{%
  \@fxsetkeys{lang}{langtrack=false}%
  \renewcommand\fxnotename{Note}%
  \renewcommand\fxnotesname{Notes}%
  \renewcommand\fxwarningname{Attention}%
  \renewcommand\fxwarningsname{Avertissements}%
  \renewcommand\fxerrorname{Erreur}%
  \renewcommand\fxerrorsname{Erreurs}%
  \renewcommand\fxfatalname{Fatal}%
  \renewcommand\fxfatalsname{Fatales}%
  \renewcommand\listfixmename{Liste des Corrections}}
%    \end{macrocode}
% \end{option}
% \begin{option}{francais}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{francais}{\@fxsetkeys{lang}{french}}
%    \end{macrocode}
% \end{option}
% \begin{option}{spanish}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{spanish}{%
  \@fxsetkeys{lang}{langtrack=false}%
  \renewcommand\fxnotename{Nota}%
  \renewcommand\fxnotesname{Notas}%
  \renewcommand\fxwarningname{Aviso}%
  \renewcommand\fxwarningsname{Avisos}%
  \renewcommand\fxerrorname{Error}%
  \renewcommand\fxerrorsname{Errores}%
  \renewcommand\fxfatalname{FIXME}%
  \renewcommand\fxfatalsname{FIXME}%
  \renewcommand\listfixmename{Lista de Correcciones}}
%    \end{macrocode}
% \end{option}
% \begin{option}{italian}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{italian}{%
  \@fxsetkeys{lang}{langtrack=false}%
  \renewcommand\fxnotename{Nota}%
  \renewcommand\fxnotesname{Note}%
  \renewcommand\fxwarningname{Avviso}%
  \renewcommand\fxwarningsname{Avvisi}%
  \renewcommand\fxerrorname{Errore}%
  \renewcommand\fxerrorsname{Errori}%
  \renewcommand\fxfatalname{FIXME}%
  \renewcommand\fxfatalsname{FIXME}%
  \renewcommand\listfixmename{Corrigenda}}
%    \end{macrocode}
% \end{option}
% \begin{option}{german}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{german}{%
  \@fxsetkeys{lang}{langtrack=false}%
  \renewcommand\fxnotename{Anm}%
  \renewcommand\fxnotesname{Anmerkungen}%
  \renewcommand\fxwarningname{Warnung}%
  \renewcommand\fxwarningsname{Warnungen}%
  \renewcommand\fxerrorname{Fehler}%
  \renewcommand\fxerrorsname{Fehler}%
  \renewcommand\fxfatalname{FIXME}%
  \renewcommand\fxfatalsname{FIXME}%
  \renewcommand\listfixmename{Verzeichnis der Korrekturen}}
%    \end{macrocode}
% \end{option}
% \begin{option}{ngerman}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{ngerman}{\@fxsetkeys{lang}{german}}
%    \end{macrocode}
% \end{option}
% \begin{option}{danish}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{danish}{%
  \@fxsetkeys{lang}{langtrack=false}%
  \renewcommand\fxnotename{Note}%
  \renewcommand\fxnotesname{Noter}%
  \renewcommand\fxwarningname{Advarsel}%
  \renewcommand\fxwarningsname{Advarsler}%
  \renewcommand\fxerrorname{Fejl}%
  \renewcommand\fxerrorsname{Fejl}%
  \renewcommand\fxfatalname{FIXME}%
  \renewcommand\fxfatalsname{FIXME}%
  \renewcommand\listfixmename{Rettelser}}
%    \end{macrocode}
% \end{option}
% \begin{option}{croatian}
%   \mbox{}
%    \begin{macrocode}
\@fxdefinevoidkey{lang}{croatian}{%
  \@fxsetkeys{lang}{langtrack=false}%
  \renewcommand\fxnotename{Poruka}%
  \renewcommand\fxnotesname{Poruke}%
  \renewcommand\fxwarningname{Upozorenje}%
  \renewcommand\fxwarningsname{Upozorenja}%
  \renewcommand\fxerrorname{Gre\v ska}%
  \renewcommand\fxerrorsname{Greske}%
  \renewcommand\fxfatalname{FIXME}%
  \renewcommand\fxfatalsname{FIXME}%
  \renewcommand\listfixmename{Popis korekcija}}

%    \end{macrocode}
% \end{option}
% \begin{option}{lang}
%   Another way of setting the language:
%    \begin{macrocode}
\@fxdefinechoicekey{lang}{lang}{%
  english,french,francais,spanish,italian,german,ngerman,danish,croatian}{%
  \@fxsetkeys{lang}{langtrack=false,#1}}
%    \end{macrocode}
% \end{option}
%
% \subsection{Document status processing}
% \begin{macro}{\@@@fxnote}
%   \begin{macro}{\@@@@fxbeginenv}
%     \begin{macro}{\@fxendenv}
%       \begin{macro}{\@fxtargetlayout}
%         \begin{macro}{\listoffixmes}
%           \begin{option}{final}
%             \begin{option}{draft}
%               \begin{option}{status}
%                 Select draft or final versions of internal macros (some of
%                 them also depending on the document class):
%    \begin{macrocode}
\@fxdefinevoidkey{status}{final}{%
  \let\@@@fxnote\@@@fxnote@final%
  \let\@@@@fxbeginenv\@@@@fxbeginenv@final
  \let\@fxendenv\@fxendenv@final%
  \let\@fxtargetlayout\@fxtargetlayout@final%
  \let\listoffixmes\lox@final}
\@fxdefinevoidkey{status}{draft}{%
  \let\@@@fxnote\@@@fxnote@draft%
  \let\@@@@fxbeginenv\@@@@fxbeginenv@draft
  \let\@fxendenv\@fxendenv@draft%
  \let\@fxtargetlayout\@fxtargetlayout@draft%
  \let\listoffixmes\lox@draft}
\@fxdefinechoicekey{status}{status}{final,draft}{\@fxsetkeys{status}{#1}}

%    \end{macrocode}
%               \end{option}
%             \end{option}
%           \end{option}
%         \end{macro}
%       \end{macro}
%     \end{macro}
%   \end{macro}
% \end{macro}
%
% \subsection{Extrernal layout support}
% \subsubsection{External layout loading}
% \begin{macro}{\@fxloadlayout}
%     These macros implement the loading of the different layouts.
%    \begin{macrocode}
\newcommand*\@fxloadlayout[1]{\RequirePackage{fxlayout#1}}

%    \end{macrocode}
% \end{macro}
% \subsubsection{External layout activation}
% \begin{macro}{\@fxuselayout}
%     \marg{name}\\
%     These macros load and activate the different layouts.
%    \begin{macrocode}
\newcommand*\@fxuselayout[1]{%
  \@fxloadlayout{#1}%
  \@fxsetlayoutkeys{#1=true}}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{External layout options}
% \begin{option}{loadlayout}
%     The layout loading options:
%    \begin{macrocode}
\@fxdefinekey{layout}{loadlayout}{\@fxloadlayout{#1}}
%    \end{macrocode}
% \end{option}
% \begin{option}{uselayout}
%     The layout activation options:
%    \begin{macrocode}
\@fxdefinekey{layout}{uselayout}{\@fxuselayout{#1}}
%    \end{macrocode}
% \end{option}
%
% \subsection{Themes support}
% \begin{macro}{\@fxloadtheme}
%   \marg{name}\\
%   Require the package named \texttt{fxtheme}\meta{name}:
%    \begin{macrocode}
\newcommand*\@fxloadtheme[1]{\RequirePackage{fxtheme#1}}

%    \end{macrocode}
% \end{macro}
% \begin{option}{theme}
%   Because themes are implemented as style files, loading a theme can only be
%   done via \cs{fxsetup}: it is not possible to load a theme directly in
%   \cs{usepackage} (because \LaTeX{} doesn't like \cs{RequirePackage} in the
%   middle of options processing), neither during a user-level interface call,
%   probably for the same reason. I could change this, but I don't think it's
%   worth it because people will want to load only one theme at a time anyway.
%    \begin{macrocode}
\@fxdefinekey{theme}{theme}{\@fxloadtheme{#1}}

%    \end{macrocode}
% \end{option}
%
% \subsection{Finale}
% \subsubsection{Class-dependent settings}
% Currently, our class dependencies only matter in draft mode, so one could
% argue that it is not optimal to handle this here. However, it would be
% incorrect to do it in the \texttt{draft} option code because this option can
% be switched at any point in the document (remember that it is understood
% even by the note insertion macros and environments) and the stuff below
% should only be executed once. Besides, \cs{@ifclassloaded} is an
% \cs{@onlypreamble} macro\ldots
%
% As documented, marginal notes are incompatible with the ACM SIG classes.
% Initially, I thought I would detect these classes and issue an error if
% marginal layout (or clue) is active. However, I changed my mind, because
% nothing prevents somebody to write a new class on top of these ones and
% authorize \cs{marginpar} back again. Normally these classes issue an error
% if \cs{marginpar} is used. However, the 2.3 / June 2007 versions are buggy
% and the error actually triggers a stack overflow in \LaTeX\ldots (patch
% submitted). Oh boy, these classes are a mess.
% \begin{macro}{\@lox@prtc}
%   \begin{macro}{\@lox@psttc}
%    \begin{macrocode}
\@ifclassloaded{article}{%
  \let\@lox@prtc\@lox@prtc@article%
  \let\@lox@psttc\@lox@psttc@article}{%
  \@ifclassloaded{report}{%
    \let\@lox@prtc\@lox@prtc@report%
    \let\@lox@psttc\@lox@psttc@report}{%
    \@ifclassloaded{book}{%
      \let\@lox@prtc\@lox@prtc@book%
      \let\@lox@psttc\@lox@psttc@book}{%
      \@ifclassloaded{scrartcl}{%
	\let\@lox@prtc\@lox@prtc@scrartcl%
	\let\@lox@psttc\@lox@psttc@scrartcl}{%
	\@ifclassloaded{scrreprt}{%
	  \let\@lox@prtc\@lox@prtc@scrreprt%
	  \let\@lox@psttc\@lox@psttc@scrreprt}{%
	  \@ifclassloaded{scrbook}{%
	    \let\@lox@prtc\@lox@prtc@scrbook%
	    \let\@lox@psttc\@lox@psttc@scrbook}{%
	    \@ifclassloaded{amsbook}{%
	      \let\lox@draft\lox@draft@ams}{%
	      \@ifclassloaded{amsart}{%
		\let\lox@draft\lox@draft@ams}{%
		%% Use the article layout by default.
		\let\@lox@prtc\@lox@prtc@article%
		\let\@lox@psttc\@lox@psttc@article}}}}}}}}

%    \end{macrocode}
%   \end{macro}
% \end{macro}
%
% \subsubsection{Options Processing}
% First, we execute some options to initialize \fx to something sensible,
% and then we process the user ones. Note the abscence of the \texttt{theme}
% family here.
%    \begin{macrocode}
\ExecuteOptionsX[fx]<mode,status,lang,log,note,layout,envlayout,targetlayout>{%
  mode=singleuser,%
  status=final,%
  lang=english,%
  langtrack=false,%
  defaultlang=english,%
  nosilent,%
  author=fixme,%
  target=thepage,%
  layout=margin,%
  innerlayout={layout=inline},%
  envlayout=bold,%
  targetlayout=italics}
\ProcessOptionsX*[fx]<mode,status,lang,log,note,layout,envlayout,targetlayout>

%    \end{macrocode}
%
% \subsubsection{The \cs{fxsetup} macro}
% \begin{macro}{\fxsetup}
%   \marg{options}\\
%   The inevitable setup macro, extremely impressive yet as trivial as can be
%   with the \texttt{xkeyval} package\ldots \cs{fxsetup} is the only place
%   where the \texttt{theme} family is processed.
%    \begin{macrocode}
\newcommand*\fxsetup[1]{%
  \@fxsetkeys{mode,status,lang,log,note,%
    theme,layout,envlayout,targetlayout}{#1}}

%    \end{macrocode}
% \end{macro}
%
% \subsubsection{\fx summary}
% Finally, output a summary giving the number of fixme notes at the end of the
% compilation:
%    \begin{macrocode}
\AtEndDocument{%
  \iffx@log@silent\else
    \GenericWarning{%
      (FiXme)\@spaces\@spaces}{%
      FiXme Summary: Number of notes: \thefxnotecount,\MessageBreak%
      Number of warnings: \thefxwarningcount,\MessageBreak%
      Number of errors: \thefxerrorcount,\MessageBreak%
      Number of fatal errors: \thefxfatalcount,\MessageBreak%
      Total: \thefixmecount\@gobble}%
  \fi}
%</fixme>
%    \end{macrocode}
%
% \appendix
% \section{External Layouts}
% Here are the predefined layouts distributed with \fx.
%
% \subsection{Environment layouts}
% \subsection{Target Layouts}
% \section{Themes}
% Here are the predefined themes distributed with \fx.
% \subsection{The \texttt{signature} theme}
%    \begin{macrocode}
%<*fxthemesignature>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{fxthemesignature}

%    \end{macrocode}
% \begin{macro}{\@fxdosig}
%   \marg{author}\\
%   Use a signature of the form ``-- sig'', unless author is empty.
%
%   It seems that \cs{ifthenelse} is fragile: it breaks if used within moving
%   arguments (or somehting like that). So the safe path is to construct the
%   signature first (possibly empty), and to store it in a temporary macro, to
%   be used when needed.
%    \begin{macrocode}
\newcommand\@fxdosig[1]{%
  \ifthenelse{\equal{#1}{}}{\def\@fxtempsig{}}{%
    \def\@fxtempsig{ -- \textit{#1}}}}

%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\renewcommand*\FXLayoutFootnote[3]{%
  \@fxdosig{#3}%
  \footnote{\@nameuse{fx#1name}: #2\@fxtempsig}}
\renewcommand*\FXLayoutMargin[3]{%
  \@fxdosig{#3}%
  \marginpar[%
  \footnotesize\raggedleft\@nameuse{fx#1name}: #2\@fxtempsig]{%
    \footnotesize\raggedright\@nameuse{fx#1name}: #2\@fxtempsig}}
\renewcommand*\FXLayoutMarginClue[3]{%
  \@fxdosig{#3}%
  \marginpar[\footnotesize\raggedleft\@nameuse{fx#1name}!\@fxtempsig]{%
    \footnotesize\raggedright\@nameuse{fx#1name}!\@fxtempsig}}
\renewcommand*\FXLayoutInline[3]{%
  \@fxdosig{#3}%
  {\bfseries\@nameuse{fx#1name}: #2\@fxtempsig}}
\renewcommand*\FXLayoutIndex[3]{%
  \@fxdosig{#3}%
  \iffx@mode@multiuser%
    \index{***@\fixmeindexname:%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !\@nameuse{thefx#1count}: #2\@fxtempsig}%
    \index{***#3@\fixmeindexname{} (#3):%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !\@nameuse{thefx#1count}: #2}%
  \else%
    \index{***@\fixmeindexname:%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !\@nameuse{thefx#1count}: #2}%
  \fi}
\renewcommand*\FXLayoutContentsLine[3]{%
  \iffx@mode@multiuser%
    \@fxdosig{#3}%
    \fxaddcontentsline{\@nameuse{fx#1name}: #2\@fxtempsig}%
  \else%
    \fxaddcontentsline{\@nameuse{fx#1name}: #2}%
  \fi}
\renewcommand*\FXEnvLayoutBoldBegin[2]{%
  \bfseries\@nameuse{fx#1name}: \ignorespaces}
\renewcommand*\FXEnvLayoutBoldEnd[2]{\@fxdosig{#2}\@fxtempsig}
%</fxthemesignature>
%    \end{macrocode}
%
% \subsection{The \texttt{color} theme}
%    \begin{macrocode}
%<*fxthemecolor>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{fxthemecolor}

\RequirePackage{color}

%    \end{macrocode}
% \begin{macro}{\@fxdocolon}
%   \marg{author}\\
%   Add a colon after the author tag, unless empty. Same comment as above
%   about the \texttt{ifthen} package.
%    \begin{macrocode}
\newcommand\@fxdocolon[1]{%
  \ifthenelse{\equal{#1}{}}{\def\@fxcolon{}}{\def\@fxcolon{: }}}

%    \end{macrocode}
% \end{macro}
% \begin{color}{fxnote}
%   \begin{color}{fxwarning}
%     \begin{color}{fxerror}
%       \begin{color}{fxfatal}
%         The 4 colors that can be redefined by the user.
%    \begin{macrocode}
\definecolor{fxnote}{rgb}{0.0000,0.6000,0.0000}
\definecolor{fxwarning}{rgb}{1.0000,0.5490,0.0000}
\definecolor{fxerror}{rgb}{1.0000,0.2706,0.0000}
\definecolor{fxfatal}{rgb}{1.0000,0.0000,0.0000}
\definecolor{fxtarget}{rgb}{0.3725,0.6196,0.6275}

%    \end{macrocode}
%       \end{color}
%     \end{color}
%   \end{color}
% \end{color}
%    \begin{macrocode}
\renewcommand*\FXLayoutFootnote[3]{%
  \@fxdocolon{#3}%
  \footnote{\color{fx#1}\ignorespaces#3\@fxcolon #2}}
\renewcommand*\FXLayoutMargin[3]{%
  \@fxdocolon{#3}%
  \marginpar[%
  \footnotesize\raggedleft\color{fx#1}\ignorespaces#3\@fxcolon#2]{%
    \footnotesize\raggedright\color{fx#1}\ignorespaces#3\@fxcolon#2}}
\renewcommand*\FXLayoutMarginClue[3]{%
  \marginpar[\footnotesize\raggedleft\color{fx#1}\ignorespaces#3!]{%
    \footnotesize\raggedright\color{fx#1}\ignorespaces#3!}}
\renewcommand*\FXLayoutInline[3]{%
  \@fxdocolon{#3}%
  {\color{fx#1}\ignorespaces#3\@fxcolon#2}}
\renewcommand*\FXLayoutIndex[3]{%
  \iffx@mode@multiuser%
    \index{***@\fixmeindexname:%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !{\color{fx#1}\@nameuse{thefx#1count}: #3: #2}}%
    \index{***#3@\fixmeindexname{} (#3):%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !{\color{fx#1}\@nameuse{thefx#1count}: #2}}%
  \else%
    \index{***@\fixmeindexname:%
      !\@nameuse{@fx#1key}@\@nameuse{fx#1sname}:%
      !{\color{fx#1}\@nameuse{thefx#1count}: #2}}%
  \fi}

\renewcommand*\FXLayoutContentsLine[3]{%
  \@fxdocolon{#3}%
  \iffx@mode@multiuser%
    \fxaddcontentsline{\color{fx#1}\ignorespaces#3\@fxcolon#2}%
  \else%
    \fxaddcontentsline{\color{fx#1}#2}%
  \fi}

\newcommand*\FXEnvLayoutColorBegin[2]{%
  \@fxdocolon{#2}%
  \color{fx#1}\ignorespaces#2\@fxcolon\ignorespaces}
\newcommand*\FXEnvLayoutColorEnd[2]{}
\FXRegisterEnvLayout{color}{\FXEnvLayoutColorBegin}{\FXEnvLayoutColorEnd}
\@fxsetkeys{envlayout}{envlayout=color}

\newcommand\FXTargetLayoutColor[1]{\begingroup\color{fxtarget}#1\endgroup}
\FXRegisterTargetLayout{color}{\FXTargetLayoutColor}
\@fxsetkeys{targetlayout}{targetlayout=color}
%</fxthemecolor>
%    \end{macrocode}
% ^^A \PrintChanges
% \PrintIndex
% \Finale
%
% ^^A fixme.dtx ends here.
