### Makefile --- Generic Makefile for LaTeX packages

## Copyright (C) 2017 Didier Verna

## Author: Didier Verna <didier@didierverna.net>

## This file is part of LtxPkg.

## Permission to use, copy, modify, and distribute this software for any
## purpose with or without fee is hereby granted, provided that the above
## copyright notice and this permission notice appear in all copies.

## THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
## WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
## MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
## ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
## ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
## OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


### Commentary:

# LtxPkg is a generic infrastructure for maintaining LaTeX packages.  This
# makefile automates the building, installation and distribution processes.
# #### WARNING: requires GNU Make 3.81 or later.

## Usage:

# Requirements:
# =============
# - NEWS file with lines of the form "* Version x.x" for each version
# - README[.md] file [optional]
# - THANKS file [optional]
# - one or several .dtx files
# - one or several .ins files with \generate rules
# - one .el (AUC-TeX) file for every generated class or style [optional]
# - Makefile.inc [optional] with additional stuff
# - whatever else might be needed

# Supported build features:
# ========================
# - classes and styles from the \generate rules in the ins files
# - documentation (DVI and optionally PDF and PostScript) from the dtx files
# - distribution tarballs (gz and bz2)

# Supported installation features:
# ===============================
# - local
# - for web distribution


# Available targets:
# ==================
# all:         build classes, styles and DVI documentation
# dist:        build tarballs (including PDF documentation). The tarballs
#              names are taken from the PROJECT variable (from Makefile.in) if
#              it exists, or from the project's directory name. For adding
#              stuff to the tarballs, put "DST_FILES += <blabla>" in
#              Makefile.inc.
# install:     install classes, styles, DVI documentation and AUC-TeX files
# install-www: install tarballs, DVI and PDF documentation, NEWS and version
#              files on the web. The version number is computed from the NEWS
#              file (the first "* Version x.x" line).
# ... plus the usual clean distclean and generic targets.



### Code:

PROJECT := $(notdir $(shell pwd))


# Default parameters that we can override in Makefile.inc:
# ========================================================

# Utility commands:
LATEX     := latex
MAKEINDEX := makeindex
DVIPS	  := dvips
DVIPDF    := dvipdf
GREP      := grep
SED       := sed
TAR	  := COPYFILE_DISABLE=yes tar
GZIP	  := gzip
BZIP2	  := bzip2

# Automated local installation variables:
TEXMFDIR  := /usr/local/texmf
AUCTEXDIR := /usr/local/etc/auctex
LATEXDIR   = $(TEXMFDIR)/tex/latex
CLSDIR     = $(LATEXDIR)/$(PROJECT)
STYDIR     = $(LATEXDIR)/$(PROJECT)
DOCDIR     = $(TEXMFDIR)/doc/latex/$(PROJECT)
AUCCLSDIR  = $(AUCTEXDIR)
AUCSTYDIR  = $(AUCTEXDIR)

# Automated website release location:
W3DIR := ${HOME}/www/software

# Since there is no way to create a directory in TeX, one might need to
# distribute empty directories, so that their contents may be generated by a
# \generate directive.
DST_EMPTY_DIRS :=


# Time to let the user add some stuff:
-include Makefile.inc


# Default target forward definition:
# ==================================
all:


# Automatically computed stuff:
# =============================

# Ensure that a file exists:
maybe_file = $(shell test -e $(file) && echo $(file))

# Initial distribution requirements:
DST_FILES := NEWS

files := README README.md THANKS
DST_FILES += $(foreach file,$(files),$(maybe_file))

# ins files are distributed:
INS_FILES := $(wildcard *.ins)
DST_FILES += $(INS_FILES)


# Time to handle \generate'd files. For each foo.ins file, we generate a
# corresponding foo.mak makefile giving information on the generated
# targets. These mak files:
# - contain rules of the form
#   <cls|sty>: <dtx>
#	  $(LATEX) <ins>
# - add every generated file to GEN_FILES, so that distclean can do its job
#   properly.
# - add .cls files to CLS_FILES and .sty files to STY_FILES.
GEN_FILES :=
CLS_FILES :=
STY_FILES :=

MAK_FILES := $(INS_FILES:%.ins=%.mak)
GEN_FILES += $(MAK_FILES)
# Since creating the dependency mak files involves processing the ins ones, we
# need to make sure that the empty directories are created first.
mak: $(MAK_FILES)
%.mak: %.ins | $(DST_EMPTY_DIRS)
	$(LATEX) $<
include $(MAK_FILES)


TEX_FILES := $(CLS_FILES) $(STY_FILES)
all: $(TEX_FILES)

# dtx files are distributed:
DTX_FILES := $(wildcard *.dtx)
DST_FILES += $(DTX_FILES)

# dvi files are generated from the corresponding dtx ones:
DVI_FILES := $(DTX_FILES:%.dtx=%.dvi)
$(DVI_FILES): %.dvi:%.dtx

# ps files are generated from the corresponding dvi ones:
PS_FILES := $(DVI_FILES:%.dvi=%.ps)

# pdf files are generated from the dvi ones, distributed, and built by default:
PDF_FILES := $(DVI_FILES:%.dvi=%.pdf)
DST_FILES += $(PDF_FILES)
all: $(PDF_FILES)

# el (AUC-TeX) files are distributed:
files := $(CLS_FILES:%.cls=%.el)
AUC_CLS_FILES := $(foreach file,$(files),$(maybe_file))
files := $(STY_FILES:%.sty=%.el)
AUC_STY_FILES := $(foreach file,$(files),$(maybe_file))
AUC_FILES     := $(wildcard *.el)
DST_FILES     += $(AUC_FILES)


# (Un)Installation targets:
# #### NOTE: my current uninstallation scheme only removes the installed
# files, hence leaving empty directories behind. That's because every package
# gets its own directory in a TDS-compliant installation scheme. If somebody
# modifies the installation directories (for instance by installing every cls
# into a cls/ directory etc), then we don't want to remove the directories
# because they are not our own.
install:     install-doc   install-auc
uninstall: uninstall-doc uninstall-auc
ifneq (,$(CLS_FILES))
install:     install-cls
uninstall: uninstall-cls
endif
ifneq (,$(STY_FILES))
install:     install-sty
uninstall: uninstall-sty
endif
install-cls-file =					\
  install -d -m 755 $(CLSDIR)/$(dir $(1))		\
  && install -m 644 $(1) $(CLSDIR)/$(dir $(1));
install-cls: $(CLS_FILES)
	install -d -m 755 $(CLSDIR)
	$(foreach cls,$(CLS_FILES),$(call install-cls-file,$(cls)))
uninstall-cls:
	for i in $(CLS_FILES); do rm -f $(CLSDIR)/$$i; done
install-sty-file =					\
  install -d -m 755 $(STYDIR)/$(dir $(1))		\
  && install -m 644 $(1) $(STYDIR)/$(dir $(1));
install-sty: $(STY_FILES)
	install -d -m 755 $(STYDIR)
	$(foreach sty,$(STY_FILES),$(call install-sty-file,$(sty)))
uninstall-sty:
	for i in $(STY_FILES); do rm -f $(STYDIR)/$$i; done
install-doc: $(PDF_FILES)
	install -d -m 755 $(DOCDIR)
	install -m 644 $< $(DOCDIR)
uninstall-doc:
	for i in $(DVI_FILES); do rm -f $(DOCDIR)/$$i; done
install-auc:
uninstall-auc:
ifneq (,$(CLS_FILES))
install-auc:     install-auc-cls
uninstall-auc: uninstall-auc-cls
endif
ifneq (,$(STY_FILES))
install-auc:     install-auc-sty
uninstall-auc: uninstall-auc-sty
endif
install-auc-cls: $(AUC_CLS_FILES)
	install -d -m 755 $(AUCCLSDIR)
	install -m 644 $^ $(AUCCLSDIR)
uninstall-auc-cls:
	for i in $(AUC_CLS_FILES); do rm -f $(AUCCLSDIR)/$$i; done
install-auc-sty: $(AUC_STY_FILES)
	install -d -m 755 $(AUCSTYDIR)
	install -m 644 $^ $(AUCSTYDIR)
uninstall-auc-sty:
	for i in $(AUC_STY_FILES); do rm -f $(AUCSTYDIR)/$$i; done


# Distribution targets:
dist: $(PROJECT).tar.gz $(PROJECT).tar.bz2
%.tar.gz: %.tar
	$(GZIP) -c $< > $@

%.tar.bz2: %.tar
	$(BZIP2) -c $< > $@
$(PROJECT).tar: $(DST_FILES)
	install -m 755 -d $(PROJECT) $(DST_EMPTY_DIRS:%=$(PROJECT)/%)
	install -m 644 $(DST_FILES) $(PROJECT)
	$(TAR) cvf $(PROJECT).tar $(PROJECT)
	rm -fr $(PROJECT)
.INTERMEDIATE: $(PROJECT).tar


# Web installation targets:
# The new version number is taken from the first "* Version x.x" line in the
# NEWS file:
VERSION := $(shell $(GREP) -m 1 "^*[ \t]*Version" NEWS \
	     | $(SED) 's|\*[ \t]*Version[ \t]*\(.*\)|\1|')
install-www: $(PROJECT).tar.gz $(PROJECT).tar.bz2 \
	     $(DVI_FILES) $(PDF_FILES) \
	     NEWS
	install -m 644 NEWS $(W3DIR)/$(PROJECT)-news.txt
	echo "$(VERSION)" > $(W3DIR)/$(PROJECT)-version.txt
	chmod 644 $(W3DIR)/$(PROJECT)-version.txt
	install -m 644 $(DVI_FILES) $(PDF_FILES) $(W3DIR)
	install -m 644 $(PROJECT).tar.gz $(W3DIR)
	install -m 644 $(PROJECT).tar.bz2 $(W3DIR)


# Cleanup targets:
clean:
	-rm *~ *.toc *.aux *.lo* *.gl* *.idx *.ind *.ilg
distclean: clean
	-rm $(GEN_FILES)
	-rm $(DVI_FILES) $(PDF_FILES) $(PS_FILES)
	-rm $(PROJECT).tar.*
	-rm -fr .auto

# Utilities:
$(DST_EMPTY_DIRS):
	mkdir -p $@

# Implicit stuff:
%.dvi: %.dtx
	@echo "Building $@..."
	$(LATEX) $<
	$(LATEX) $<
#	$(MAKEINDEX) -s gglo -o $(PROJECT).gls $(PROJECT).glo
	$(MAKEINDEX) -s gind $(PROJECT).idx
	$(LATEX) $<
	$(LATEX) $<


%.ps: %.dvi
	$(DVIPS) -o $@ $<

%.pdf: %.dvi
	$(DVIPDF) $<

%.dvi: %.tex
	$(TEXI2DVI) $<


.PHONY: all					\
	mak					\
	install uninstall			\
	install-cls uninstall-cls		\
	install-sty uninstall-sty		\
	install-doc uninstall-doc		\
	install-auc uninstall-auc		\
	install-auc-cls uninstall-auc-cls	\
	install-auc-sty uninstall-auc-sty	\
	dist					\
	install-www				\
	clean distclean


### Makefile ends here
